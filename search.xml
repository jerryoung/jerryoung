<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>优化打开博客速度，给您的Hexo添加上PWA吧</title>
    <url>/2022/02/03/Add-PWA-to-hexo-in-fluid-theme/</url>
    <content><![CDATA[<h1 id="0-版本"><a href="#0-版本" class="headerlink" title="0. 版本"></a>0. 版本</h1><ul>
<li><p>hexo相关版本</p>
<ul>
<li>hexo: 6.0.0</li>
<li>hexo-cli: 4.3.0</li>
<li>node: 14.18.1</li>
</ul>
</li>
<li><p>fluid主题版本</p>
<ul>
<li>origin&#x2F;master</li>
</ul>
</li>
</ul>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><h2 id="1-1-安装fluid主题"><a href="#1-1-安装fluid主题" class="headerlink" title="1.1 安装fluid主题"></a>1.1 安装fluid主题</h2><ol>
<li>在hexo根目录下，执行<code>git submodule add https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</code> 下载主题源码</li>
<li>在hexo根目录下，创建<code>_config.fluid.yml</code>（hexo 5.0.0 以后，增加该方式可以覆盖主题的配置文件，<a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">详情请看hexo官方教程</a>）</li>
<li>将<code>themes/fluid</code>主题源码中的<code>_config.yml</code>，内容直接复制到<code>_config.fluid.yml</code>中</li>
</ol>
<p>经过上面三步，我们就能轻松更换一个主题了，是不是特别简单呢。</p>
<h2 id="1-2-安装PWA（Progressive-web-app）"><a href="#1-2-安装PWA（Progressive-web-app）" class="headerlink" title="1.2 安装PWA（Progressive web app）"></a>1.2 安装PWA（Progressive web app）</h2><blockquote>
<p>更多PWA的内容可以自行百度或者Google进行初步认识和了解</p>
</blockquote>
<h3 id="1-2-1-安装hexo-service-worker插件"><a href="#1-2-1-安装hexo-service-worker插件" class="headerlink" title="1.2.1 安装hexo-service-worker插件"></a>1.2.1 安装hexo-service-worker插件</h3><blockquote>
<p>hexo-offline\hexo-pwa，其他插件可以自行了解，其实都是差不多的。</p>
</blockquote>
<p>在根目录执行，<code>npm install hexo-service-worker --save</code></p>
<h3 id="1-2-2-hexo-service-worker插件配置"><a href="#1-2-2-hexo-service-worker插件配置" class="headerlink" title="1.2.2 hexo-service-worker插件配置"></a>1.2.2 hexo-service-worker插件配置</h3><p>在hexo配置文件（_config.yml，非主题的配置文件）中添加下面的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># offline config passed to sw-precache.</span><br><span class="hljs-attr">service_worker:</span><br>  <span class="hljs-attr">maximumFileSizeToCacheInBytes:</span> <span class="hljs-number">5242880</span><br>  <span class="hljs-attr">staticFileGlobs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">public/**/*.&#123;json,js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">public/*.js</span><br>  <span class="hljs-attr">stripPrefix:</span> <span class="hljs-string">public</span><br>  <span class="hljs-attr">verbose:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">runtimeCaching:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">urlPattern:</span> <span class="hljs-string">/**/*</span><br>      <span class="hljs-attr">handler:</span> <span class="hljs-string">cacheFirst</span><br>      <span class="hljs-attr">options:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">origin:</span> <span class="hljs-string">jaryoung.com</span>  <span class="hljs-comment">#需要修改成自己的域名喔</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">origin:</span> <span class="hljs-string">cdn.jsdelivr.net</span> <span class="hljs-comment">#cnd</span><br></code></pre></td></tr></table></figure>

<h3 id="1-2-3-新增manifest-json配置文件"><a href="#1-2-3-新增manifest-json配置文件" class="headerlink" title="1.2.3 新增manifest.json配置文件"></a>1.2.3 新增manifest.json配置文件</h3><ol>
<li>准备icons图片，至少准备两张图片（像素：192x192、512x512），路径参考（<code>hexo根目录/source/images/icons/</code>）</li>
<li>新增manifest.json配置文件，放到<code>hexo根目录/source</code>下</li>
</ol>
<p>图片和配置文件弄得比较麻烦，可以考虑自动生成的方案。使用 <a href="https://www.simicart.com/manifest-generator.html/">Web App Manifest Generator</a> 或者<a href="https://manifest-gen.netlify.app/">https://manifest-gen.netlify.app</a> 网站自动生成。</p>
<blockquote>
<p>注意：</p>
<ol>
<li>manifest.json最好是放在source的目录下面喔（<code>hexo根目录/source</code>），需要在图片的根目录下面，不然根据manifest.json文件寻找图片的时候会有问题</li>
<li>使用网站自动生成 manifest.json 文件，必须要有icons数组的中增加属性值 “purpose”: “maskable” ，也就是配置中必须要有可屏蔽图标，否则Chrome无法正确识别。<a href="https://web.dev/maskable-icon-audit/">具体原因</a></li>
</ol>
</blockquote>
<p>参考文件如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jaryoung.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;short_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jaryoung.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;theme_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3a311c&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;background_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3a311c&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;display&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standalone&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;orientation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-72x72.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;72x72&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-96x96.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;96x96&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-128x128.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;128x128&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-144x144.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;144x144&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-152x152.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;152x152&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-192x192.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192x192&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-384x384.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;384x384&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-512x512.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;512x512&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;any&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-72x72.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;72x72&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-96x96.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;96x96&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-128x128.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;128x128&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-144x144.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;144x144&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-152x152.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;152x152&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-192x192.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192x192&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-384x384.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;384x384&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/icons/icon-512x512.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;512x512&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;purpose&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;maskable&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;splash_pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<p><strong>注意，文件文件个人理解只要有192x192、512x512两组像素，总共4个图标配置就OK。还是要注意可屏蔽图标（”purpose”: “maskable”）是必须。</strong></p>
<h3 id="1-2-4-临门一脚，配置头文件"><a href="#1-2-4-临门一脚，配置头文件" class="headerlink" title="1.2.4 临门一脚，配置头文件"></a>1.2.4 临门一脚，配置头文件</h3><p>修改配置<code>_config.fluid.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 自定义 &lt;head&gt; 节点中的 HTML 内容</span><br><span class="hljs-comment"># Customize &lt;head&gt; HTML content</span><br><span class="hljs-attr">custom_head:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br><span class="hljs-string">&lt;script src=&quot;/sw-register.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure>

<h1 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h1><ol>
<li><p>生成和发布代码</p>
</li>
<li><p>查询manifest.json配置情况，如果如下图所示，至少说明的配置文件已经正确识别读取。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gz0mqk2zd3j32gd0u00ws.jpg" alt="Application-截图1"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gz0mqimu13j32gd0u00ws.jpg" alt="Application-截图2"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gz6hnt5jprj32ew0u0wjo.jpg" alt="sw.js"></p>
<blockquote>
<p>确保自己的sw.js被正确注册了喔，如果没有的话，记得在header里面引用 <code>sw-register.js</code> 让它注册好<code>sw.js</code> 文件</p>
</blockquote>
</li>
<li><p>安装Chrome插件<code>Lighthouse</code></p>
</li>
<li><p>如果是本地验证的时候，需要打开控制台；如果是部署到服务器或者GitHub page上面就不用了。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gz0mqkkyvpj32jb0u00zb.jpg" alt="Lighthouse-截图1"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gz0ndkga8rj31ms0u076k.jpg" alt="Lighthouse-截图2"></p>
</li>
</ol>
<h1 id="3-遇到的问题及解决"><a href="#3-遇到的问题及解决" class="headerlink" title="3. 遇到的问题及解决"></a>3. 遇到的问题及解决</h1><ol>
<li>Manifest has a maskable icon<br>解决办法：<a href="https://web.dev/maskable-icon-audit/%EF%BC%8C%E5%A2%9E%E5%8A%A0%E5%8F%AF%E5%B1%8F%E8%94%BD%E7%9A%84%E5%9B%BE%E6%A0%87">https://web.dev/maskable-icon-audit/，增加可屏蔽的图标</a></li>
<li>manifest.josn文件一直加载不到，考虑fluid主题可能，或者hexo我的版本比较新导致生成html文件的加载manifest.josn的设置，幸好fluid主题提供，插入自定义html head的配置<br>解决办法：修改配置<code>_config.fluid.yml</code>文件，<code>custom_head: &#39;&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;&lt;script src=&quot;/sw-register.js&quot;&gt;&lt;/script&gt;&#39;</code></li>
<li>其他问题，如果实在不知道自己的问题出现在哪里，可以考虑看看 <code>PWA OPTIMIZED</code> ，我很多次都是通过上面的提醒和连接，解决问题<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gz0mqj32idj31230u076x.jpg" alt="Lighthouse-截图"></li>
</ol>
<h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ol>
<li><a href="https://hexo.fluid-dev.com/posts/hexo-pwa/">给 Hexo 博客添加 PWA 支持</a></li>
<li><a href="https://hexo.io/zh-cn/docs">Hexo doc</a></li>
<li><a href="https://blog.naaln.com/2017/09/hexo-with-pwa/">让PWA支持HEXO</a></li>
</ol>
<blockquote>
<p> 以上是本文章的全部内容，希望自己踩过的坑能够帮助到您。</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>PWA</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS-Week-5</title>
    <url>/2020/07/26/ARTS-Week-5/</url>
    <content><![CDATA[<h2 id="ARTS-Week-5"><a href="#ARTS-Week-5" class="headerlink" title="ARTS Week-5"></a>ARTS Week-5</h2><h3 id="1-Algorithm：每周至少做一个-leetcode-的算法题"><a href="#1-Algorithm：每周至少做一个-leetcode-的算法题" class="headerlink" title="1.Algorithm：每周至少做一个 leetcode 的算法题"></a>1.Algorithm：每周至少做一个 leetcode 的算法题</h3><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">560.</span> Subarray Sum Equals K<br><br>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.<br><br>Example <span class="hljs-number">1</span>:<br><br>Input:nums = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], k = <span class="hljs-number">2</span><br>Output: <span class="hljs-number">2</span><br><br>来源：力扣（LeetCode）<br>链接：https:<span class="hljs-comment">//leetcode-cn.com/problems/subarray-sum-equals-k</span><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">subarraySum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>        map.put(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            sum += nums[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> map.getOrDefault(sum - k, <span class="hljs-number">0</span>);  <br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                ans += count;<br>            &#125;<br>            map.put(sum, map.getOrDefault(sum, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>解题思路：前缀和 + 哈希缓存</p>
<ol>
<li>sum{nums[x] + num[x + 1]…. nums[i]} &#x3D;&#x3D; k</li>
<li>sum - pre[x] &#x3D;&#x3D; k</li>
<li>sum - k &#x3D;&#x3D; pre[x]</li>
<li>通过 sum - k，通过map寻找 pre[x]，如果没有则返回0，否则累加次数</li>
<li>缓存sum到map，如果map中不存在sum到话存储0 + 1，否则获取到原来到次数 + 1存储</li>
</ol>
<h3 id="2-Review：阅读并点评至少一篇英文技术文章"><a href="#2-Review：阅读并点评至少一篇英文技术文章" class="headerlink" title="2.Review：阅读并点评至少一篇英文技术文章"></a>2.Review：阅读并点评至少一篇英文技术文章</h3><p><a href="https://medium.com/@factoryhr/http-2-the-difference-between-http-1-1-benefits-and-how-to-use-it-38094fa0e95b">HTTP&#x2F;2: the difference between HTTP&#x2F;1.1, benefits and how to use it</a></p>
<ul>
<li>Request multiplexing（请求多路复用）</li>
</ul>
<p>主要介绍http&#x2F;2，跟http1.0 最大到区别就是2.0能够做到请求的多路复用，而1.0不是。引用文章到图片更好说明这一点：</p>
<p><img src="https://miro.medium.com/max/1494/0*lY05UTuA-dWCXU-q.png" alt="https://miro.medium.com/max/1494/0*lY05UTuA-dWCXU-q.png"></p>
<ul>
<li>Header compression（请求头压缩）</li>
</ul>
<p><img src="https://miro.medium.com/max/1400/0*5r8-MbhEseP6lEQg.png" alt="https://miro.medium.com/max/1400/0*5r8-MbhEseP6lEQg.png"></p>
<ul>
<li>Binary protocol（二进制协议）</li>
</ul>
<p><img src="https://miro.medium.com/max/1400/0*0LtM_XmkauxVoY8M.png" alt="https://miro.medium.com/max/1400/0*0LtM_XmkauxVoY8M.png"></p>
<ul>
<li>HTTP&#x2F;2 Server Push</li>
</ul>
<p>如果服务端发现 资源X 和 Y 是有关联，会一并发送，而不是分开发送，这个也是1.0的区别。</p>
<p><img src="https://miro.medium.com/max/996/0*ZJLgVdXq_06hcF1o.png" alt="https://miro.medium.com/max/996/0*ZJLgVdXq_06hcF1o.png"></p>
<h3 id="3-Tip：学习至少一个技术技巧"><a href="#3-Tip：学习至少一个技术技巧" class="headerlink" title="3.Tip：学习至少一个技术技巧"></a>3.Tip：学习至少一个技术技巧</h3><p>学习如何将自己本地的docker镜像上传到docker hub中，遇到的坑为：需要自己在docker创建仓库，并且docker的tag需要跟你的仓库保持一致。例如，我的账号为：jaryoung，创建了一个web-demo的仓库，所以我们需要修改本地的tag为 jaryoung&#x2F;web-demo</p>
<p>下面为修改镜像的tag和推送到远端的命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">tag web-demo-docker-image jaryoung/web-demo<br>docker push jaryoung/web-demo<br></code></pre></td></tr></table></figure>

<h3 id="4-Share：分享一篇有观点和思考的技术文章"><a href="#4-Share：分享一篇有观点和思考的技术文章" class="headerlink" title="4.Share：分享一篇有观点和思考的技术文章"></a>4.Share：分享一篇有观点和思考的技术文章</h3><p><a href="https://coolshell.cn/articles/19840.html">HTTP的前世今生 | | 酷 壳 - CoolShell</a></p>
<p>（注：国内很多公司HTTP无论对错只返回200，这种把HTTP Status Code 全部抹掉完全是一种工程界的倒退）<br>不禁想起来自己以前做得蠢事，实在不应该。</p>
]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title>Google&#39;s Elite Security Team, Project Zero</title>
    <url>/2020/01/04/Google-Elite-Security-Team-Project-Zero/</url>
    <content><![CDATA[<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>When Apple launched the iPhone through an exclusive partnership with AT&amp;T in 2007, seventeen-year-old George Hotz wanted to use an iPhone but not with AT&amp;T. He wanted to make calls through hsi own T-Mobile network, so he cracked AT&amp;T’s lock on the iPhone. Apple scrambled to fix the bug that allowed this, but offcially ignored George Hotz.</p>
<p>Later in 2011, Hotz reverse engineered the Playstion 3 and posted a copy of the root keys on his website. Snoy sued him but settled after Hotz promise never to hack Sony products again.</p>
<span id="more"></span>

<p>Then in early 2014, at Google’s hacking competition, Hotz discovered a security hole in Google’s Chrome OS. The company gave him $150,000 reward. Two months later, Google’s security engineer Chris Evans offered him a position in a team of elite hackers. George Hotz accepted the offer and now workds for Google’s security team Project Zero.</p>
<p>Project Zero worked in secret until Google publically revealed the team in July 2014. Its sole mission is tracking down and getting rid of security flaws in the world’s software. These flaws are called zero-day vulnerabilities, which are a common target of cyber criminals.</p>
<p>Project Zero’s hackers aren’t just looking into the products that Google makes. They are free to hack any software in the world. Why? They want to make a safer Internet for everyone. The team’s plicy is simple. The team notifies vendors of vulnerabilities immediately, If fixes are not available within 90-days, bug reports automatically become available to the public. The 90-day diclosure policy appears to be working in most case. The Adobe Flash team fixed 37 Project Zero vulnerabilities(for 100%) within 90-day period. The Project Zero blog indicates that 85% of all velnerabilities are patched before the deadline.</p>
<p>However, recently Google’s strict 90-day policy came under fire form Microsoft and Apple. The Project Zero ream publicly disclosed bugs which were present in Windows 8.1 and MacOS X before Microsoft and Apple released patches. Microsoft heavily criticized Google since the company was scheduled to realese a patch just two days later. Recently Google loosened its 90-day policy with an additional 14-day grace period. Now vendors have an addtional 14 days to patch vulnerabilities as long as the inform Google of the release schedule before the deadline.</p>
<p>“People deserve to use the Internet without fear that vulnerabilities out there can ruin their privacy with a single website vistit. We’re goting to try to focus on the supply of these hight value vulnerabilities and elimnate them.” says Evans.</p>
<h2 id="分析核心语法"><a href="#分析核心语法" class="headerlink" title="分析核心语法"></a>分析核心语法</h2><h3 id="熟悉句式4"><a href="#熟悉句式4" class="headerlink" title="熟悉句式4"></a>熟悉句式4</h3><blockquote>
<p>句式3为【主语 + 动词（vt） + 宾语】<br>句式4为【主语 + 动词 + 宾语（间接宾语） + 宾语（直接宾语）】  </p>
</blockquote>
<p>The company <strong>gave</strong> him a reward.<br>公司<strong>给</strong>他奖励。</p>
<p>Chris Evans <strong>offered</strong> him a position.<br>克里斯·埃文斯提供<strong>给</strong>他一个职位。</p>
<p>The team notifies vendor <strong>of</strong> vulnerabilities.<br>团队<strong>向</strong>厂商<strong>通报</strong>漏洞。<br>中国式英语：The team notifies vendosrs vulnerablities.(X)</p>
<p>They <strong>inform</strong> Google <strong>of</strong> the release schedule.<br>他们<strong>向</strong>谷歌<strong>告知</strong>上线计划。<br>中国式英语：They inform Google the release schedule.(X)</p>
<h3 id="关系代名词that和which"><a href="#关系代名词that和which" class="headerlink" title="关系代名词that和which"></a>关系代名词that和which</h3><blockquote>
<p>关系代名词，连接两个句子，兼顾<strong>连词</strong>和<strong>代名词</strong>的作用。根据<strong>先行词</strong>和**<a href="https://www.zhihu.com/question/30208163">格</a><strong>种类不同，关系代名词也会相应发生变化。<br>先行词，是修饰</strong>关系代名词从句<strong>的名词。<br>格在</strong>关系代名词从句**中发挥作用。</p>
</blockquote>
<p>The team disclosed bugs. They were present in Windows 8.1.<br>等同于：<br>The team disclosed bugs that were present in Windows 8.1.<br>The team disclosed bugs which were present in Windows 8.1.</p>
<blockquote>
<p>先行词bugs指物，主语是they，此时用主格关系代名词that或者which。<br>团队公布了bug，他们存在于Windows 8.1。</p>
</blockquote>
<p>The hackers are looking into the products. Google makes them.<br>等同于：<br>The hackers are looking into the products that Google makes them.<br>The hackers are looking into the products which Google makes them.</p>
<blockquote>
<p>先行词the products指物，宾语是<strong>them</strong>，此时用主格关系代名词that或者which。<br>黑客们调查产品谷歌制造的。</p>
</blockquote>
<h4 id="关系代名词引导非限定性定语从句"><a href="#关系代名词引导非限定性定语从句" class="headerlink" title="关系代名词引导非限定性定语从句"></a>关系代名词引导非限定性定语从句</h4><p>熟悉<a href="https://baike.baidu.com/item/%E9%9D%9E%E9%99%90%E5%AE%9A%E6%80%A7%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5/10184655?fromtitle=%E9%9D%9E%E9%99%90%E5%88%B6%E6%80%A7%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5">关系代名词引导非限定性定语从句</a>。这类词用于补充说明前文的内容。关系代名词前面加（,）可以理解为【连接词 + 代名词】，也是关系代名词引导非限定性定语从句和关系代名词引导限定性定语从句的区别，后面我们慢慢探索和掌握</p>
<p>These flaws are called zero-day vulnerabilities, and they are a common target of cyber criminals.<br>等同于：<br>These flaws are called zero-day vulnerabilities which are a common target of cyber criminals.</p>
<blockquote>
<p>先行词vulnerabilities指物，主语为<strong>they</strong>，此时用主格关系代名词which，引导非限定性定语从句时候不能用that。</p>
</blockquote>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>Hystrix 是如何工作？（翻译）</title>
    <url>/2020/03/08/Hystrix-How-it-Works/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">原文链接</a></p>
</blockquote>
<h2 id="Hystrix-流程图"><a href="#Hystrix-流程图" class="headerlink" title="Hystrix-流程图"></a>Hystrix-流程图</h2><p>下图显示了通过Hystrix向服务依赖项请求时发生的情况：<br><img src="https://s2.ax1x.com/2020/03/08/3zdwSU.png" alt="3zdwSU.png"></p>
<p>以下各节将更详细地说明此流程：</p>
<p><a href="#1.%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AAHystrixCommand%E6%88%96HystrixObservableCommand%E5%AF%B9%E8%B1%A1">1.构造一个HystrixCommand或HystrixObservableCommand对象</a></p>
<p><a href="#2.%E6%89%A7%E8%A1%8CCommand">2.执行Command</a></p>
<p><a href="#3.%E5%93%8D%E5%BA%94%E6%98%AF%E5%90%A6%E7%BC%93%E5%AD%98">3.响应是否缓存</a></p>
<p><a href="#4.%E7%94%B5%E8%B7%AF%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E5%BC%80%E8%B7%AF">4.电路是否已经开路</a></p>
<p><a href="#5.%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E9%98%9F%E5%88%97/%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E6%BB%A1">5.线程池&#x2F;队列&#x2F;信号量是否已经满</a></p>
<span id="more"></span>

<p><a href="#6.HystrixObservableCommand.construct()%E6%88%96%E8%80%85HystrixCommand.run()">6.HystrixObservableCommand.construct()或者HystrixCommand.run()</a></p>
<p><a href="#7.%E8%AE%A1%E7%AE%97%E7%94%B5%E8%B7%AF%E5%81%A5%E5%BA%B7">7.计算电路健康</a></p>
<p><a href="#8.%E8%8E%B7%E5%8F%96%E5%90%8E%E5%A4%87">8.获取后备</a></p>
<p><a href="#9.%E8%BF%94%E5%9B%9E%E6%88%90%E5%8A%9F%E7%9A%84%E5%93%8D%E5%BA%94">9.返回成功的响应</a></p>
<h3 id="1-构造一个HystrixCommand或HystrixObservableCommand对象"><a href="#1-构造一个HystrixCommand或HystrixObservableCommand对象" class="headerlink" title="1.构造一个HystrixCommand或HystrixObservableCommand对象"></a>1.构造一个HystrixCommand或HystrixObservableCommand对象</h3><p>第一步，是构造一个<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>对象，以表示您对依赖项的请求。向构造函数传递发出请求时所需的任何参数。</p>
<p>如果期待依赖返回单个响应，则构造一个 <a href="http://netflix.github.com/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommand.html"><code>HystrixCommand</code></a>对象，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">HystrixCommand</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HystrixCommand</span>(arg1, arg2);<br></code></pre></td></tr></table></figure>

<p>如果期待依赖项返回一个可发出响应的Observable，则构造一个  <a href="http://netflix.github.com/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixObservableCommand.html"><code>HystrixObservableCommand</code></a> 对象，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">HystrixObservableCommand</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HystrixObservableCommand</span>(arg1, arg2);<br></code></pre></td></tr></table></figure>

<h3 id="2-执行Command"><a href="#2-执行Command" class="headerlink" title="2.执行Command"></a>2.执行Command</h3><p>使用Hystrix命令对象的以下四种方法之一，可以执行命令的方式有四种（前两种仅适用于简单的<code>HystrixCommand</code>对象，而不适用于<code>HystrixObservableCommand</code>）：</p>
<ul>
<li><a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#execute()"><code>execute()</code></a> — 代码块，然后返回从依赖项收到单个响应（发生错误的情况下引发的异常）</li>
<li><a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#queue()"><code>queue()</code></a> — 返回一个 <code>Future</code> ，您可以使用它从依赖项获得单个响应</li>
<li><a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#observe()"><code>observe()</code></a> — 订阅表示来自 依赖项的<code>Observable</code> 的响应，并返回复制源 <code>Observable</code> 的 <code>Observable</code></li>
<li><a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#toObservable()"><code>toObservable()</code></a> — 返回一个 <code>Observable</code> ,当您订阅它的时候，它将会执行Hystrix命令并发出其响应</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">K</span>             <span class="hljs-variable">value</span>   <span class="hljs-operator">=</span> command.execute();<br>Future&lt;K&gt;     fValue  = command.queue();<br>Observable&lt;K&gt; ohValue = command.observe();         <span class="hljs-comment">//hot observable</span><br>Observable&lt;K&gt; ocValue = command.toObservable();    <span class="hljs-comment">//cold observable</span><br></code></pre></td></tr></table></figure>

<p>同步调用 <code>execute()</code> ，调用 <code>queue().get()</code>. <code>queue()</code> 依次调用<code>toObservable().toBlocking().toFuture()</code>. 就是说，最终每个 <code>HystrixCommand</code> 都由一个 <a href="http://reactivex.io/documentation/observable.html"><code>Observable</code></a> 实现, 即使那些只是想返回单个简单的命令也是如此</p>
<h3 id="3-响应是否缓存"><a href="#3-响应是否缓存" class="headerlink" title="3.响应是否缓存"></a>3.响应是否缓存</h3><p>如果为此命令启用了请求缓存，并且如果对请求的响应在缓存中可用，则该缓存的响应将立即以<code>Observable</code> 的形式返回。  (See <a href="http://localhost:4000/2020/03/08/Hystrix-How-it-Works/#%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98">“Request Caching”</a> below.)</p>
<h3 id="4-电路是否已经开路"><a href="#4-电路是否已经开路" class="headerlink" title="4.电路是否已经开路"></a>4.电路是否已经开路</h3><blockquote>
<p>维基百科：<a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E8%B7%AF">开路</a></p>
<p>电路三种状态：</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1583859175204&di=1633e5307bcabc79aed491ca0edf1c50&imgtype=0&src=http://d.hiphotos.baidu.com/zhidao/wh=450,600/sign=a148305f7af40ad115b1cfe7621c3de9/b7fd5266d0160924002ba57cd50735fae6cd344e.jpg" alt="电路三种状态"></p>
</blockquote>
<p>当你执行这个命令，<code>Hystrix</code> 会检查断路器，以查看断路器是否是<code>open</code>。</p>
<p>如果电路是<code>open</code>（或跳闸），然后<code>Hystrix</code>将不会执行这个命令，但将会路由路由到<code>8. Get the Fallback</code>。</p>
<p>如果电路是闭合的，则流程到<code>5. Semaphore/Thread pool rejected.</code>，以检查是否有可用于运行该命令的容量。</p>
<h3 id="5-线程池-x2F-队列-x2F-信号量是否已经满"><a href="#5-线程池-x2F-队列-x2F-信号量是否已经满" class="headerlink" title="5.线程池&#x2F;队列&#x2F;信号量是否已经满"></a>5.线程池&#x2F;队列&#x2F;信号量是否已经满</h3><p>如果与该命令关联的线程池和队列（或信号量，如果没有运行在线程上）已满，则<code>Hystrix</code>将不会执行该命令，但会马上返回<code>8. Get the Fallback</code></p>
<h3 id="6-HystrixObservableCommand-construct-或者HystrixCommand-run"><a href="#6-HystrixObservableCommand-construct-或者HystrixCommand-run" class="headerlink" title="6.HystrixObservableCommand.construct()或者HystrixCommand.run()"></a>6.HystrixObservableCommand.construct()或者HystrixCommand.run()</h3><p>在这里， <code>Hystrix</code> 通过为此目的编写方法（以下之一）调用对依赖项的请求:</p>
<ul>
<li><a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run()"><code>HystrixCommand.run()</code></a> — 返回单个响应或抛出异常</li>
<li><a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#construct()"><code>HystrixObservableCommand.construct()</code></a> — 返回一个<code>Observable</code> ，它发出响应或发送<code>onError</code> 通知</li>
</ul>
<p>If the <code>run()</code> or <code>construct()</code> method exceeds the command’s timeout value, the thread will throw a <code>TimeoutException</code> (or a separate timer thread will, if the command itself is not running in its own thread). In that case Hystrix routes the response through 8. Get the Fallback, and it discards the eventual return value <code>run()</code> or <code>construct()</code> method if that method does not cancel&#x2F;interrupt.</p>
<p>如果<code>run（）</code>或<code>construct（）</code>方法的值超过了命令的超时的数值，则线程将抛出“ TimeoutException”（或者，如果命令本身未在其自己的线程中运行，则线程将抛出单独的计时器线程）。在那种情况下，Hystrix将响应路由到<code>8. Get the Fallback</code>，如果该方法没有取消&#x2F;中断，则它会丢弃最终的返回值<code>run()</code> 或者<code>construct()</code> 方法。</p>
<p>请注意，没有办法强制潜在线程停止工作-Hystrix在JVM上可以做的最好的事情就是将其抛出InterruptedException。如果Hystrix封装的工作不遵守InterruptedExceptions，尽管客户端已经收到TimeoutException，Hystrix线程池中的线程仍将继续工作。尽管负载已“正确释放”，但此行为可能会使Hystrix线程池饱和。大多数Java HTTP客户端库不解释InterruptedExceptions。因此，请确保在HTTP客户端上正确配置连接和读取&#x2F;写入超时。如果命令没有抛出任何异常，然后它会返回一个响应，则<code>Hystrix</code>在执行一些日志记录和监控报告后将返回此响应。对于<code>run</code>，<code>Hystrix</code>返回一个<code>Observable</code>，它发出单个响应，然后发出一个 <code>onCompleted</code>通知；对于 <code>construct()</code> ，<code>Hystrix</code>返回的是 <code>construct()</code>返回的<code>Observable</code>。</p>
<h3 id="7-计算电路健康"><a href="#7-计算电路健康" class="headerlink" title="7.计算电路健康"></a>7.计算电路健康</h3><p><code>Hystrix</code> 向断路器 报告成功，失败，拒绝和超时，断路器保持滚动一个计数器来计算统计信息。它使用这些统计信息来确定断路器什么时候应该跳闸，这时他会将随后所有请求短路，直到经过恢复期为止，在此之后，在首先检查某些运行状况检查后，它将在此闭合电路。</p>
<h3 id="8-获取后备（Get-the-Fallback）"><a href="#8-获取后备（Get-the-Fallback）" class="headerlink" title="8. 获取后备（Get the Fallback）"></a>8. 获取后备（Get the Fallback）</h3><p>Hystrix tried to revert to your fallback whenever a command execution fails:</p>
<p><code>Hystrix</code>尝试在命令执行失败时回复到您的后备状态：</p>
<ul>
<li>当<code>construct（）</code>或<code>run（）</code>抛出异常时（6.）</li>
<li>当命令由于电路断开而短路时（4.）</li>
<li>命令的线程池和队列或信号量达到最大容量（5.）</li>
<li>命令超过其超时长度时。</li>
</ul>
<p>编写您的后备，以从内存缓存中或者通过其他的静态逻辑提供通用的响应，而无需任何网络依赖性。如果你在后备中必须使用网络调用，您应该通过<code>HystrixCommand</code> 或 <code>HystrixObservableCommand</code> 来使用。</p>
<p>对于 <code>HystrixCommand</code>，要提供后备逻辑，请实现<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getFallback()"><code>HystrixCommand.getFallback()</code></a>，它将会返回一个后备值。</p>
<p>对于<code>HystrixObservableCommand</code>，要提供后备逻辑，您可以实现<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixObservableCommand.html#resumeWithFallback"><code>HystrixObservableCommand.resumeWithFallback()</code></a>，它返回一个Observable，它可能会发出一个或多个后备值。</p>
<p>如果fallback方法返回响应，则Hystrix将将此响应返回给调用方。如果是<code>HystrixCommand.getFallback()</code>，它将返回一个Observable，该Observable发出从方法返回的值。对于<code>HystrixObservableCommand.resumeWithFallback()</code>，它将返回从方法返回的相同Observable。</p>
<p>如果尚未为<code>Hystrix</code>命令实现后备方法，或者后备本身引发异常，则Hystrix仍会返回一个Observable，但它不发出任何内容并立即以<code>onError</code>通知终止。通过此<code>onError</code>通知，导致命令失败的异常被发送回调用者。 （实施回退实现可能会失败，这是一个糟糕的做法。您应该实施回退，以使其不执行任何可能失败的逻辑。）</p>
<p>后备失败或不存在的后备结果将因调用<code>Hystrix</code>命令的方式而异：</p>
<ul>
<li><code>execute()</code> — 抛出异常</li>
<li><code>queue()</code> — 成功返回 <code>Future</code>，但是这个 <code>Future</code>如果调用<code>get()</code>方法时候将会抛出异常</li>
<li><code>observe()</code> — 返回一个 <code>Observable</code> ，当你订阅它时，将通过调用订阅者的<code>onError</code> 方法立刻终止</li>
<li><code>toObservable()</code> — 返回一个 <code>Observable</code> ，当您订阅它时，将通过调用订阅者的<code>onError</code> 方法终止</li>
</ul>
<h3 id="9-返回成功的响应"><a href="#9-返回成功的响应" class="headerlink" title="9.返回成功的响应"></a>9.返回成功的响应</h3><p>如果<code>Hystrix</code>命令成功执行，它将以<code>Observable</code>的形式将一个或多个响应返回给调用方。根据您在上述第2步中调用命令的方式，此<code>Observable</code>可能会在返回给您之前进行转换：</p>
<p><a href="https://imgchr.com/i/8yU8AK"><img src="https://s1.ax1x.com/2020/03/19/8yU8AK.png" alt="8yU8AK.png"></a></p>
<ul>
<li><code>execute()</code> —  以与<code>.queue()</code> 相同的方式获取<code>Future</code>，然后在此<code>Future</code>调用<code>get</code>以获取<code>Observable</code> 发出的单个值。</li>
<li><code>queue()</code> — 将 <code>Observable</code> 转换为 <code>BlockingObservable</code> ，以便于可以将其转换成一个 <code>Future</code>，然后返回<code>Future</code>。</li>
<li><code>observe()</code> — 立即定于 <code>Observable</code> 并开始执行命令的流程；返回一个 <code>Observable</code> ，当您 <code>subscribe（订阅）</code> 它时候，将重新发出和通知。</li>
<li><code>toObservable()</code> — 不变地返回 <code>Observable</code> ； 您必须 <code>subscribe（订阅）</code> 它，才能真正开始真正执行命令的流程。</li>
</ul>
<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>@adrianb11 has kindly provided a <a href="https://design.codelytics.io/hystrix/how-it-works">sequence diagram</a> demonstrating the above flows.（Note: 需要梯子喔。）</p>
<p>参考上面，自己也有手撸了一个：</p>
<p><img src="https://s1.ax1x.com/2020/03/19/86icFS.png" alt="86icFS.png"></p>
<h2 id="断路器（熔断器）"><a href="#断路器（熔断器）" class="headerlink" title="断路器（熔断器）"></a>断路器（熔断器）</h2><p>下面展示了 <code>HystrixCommand</code> 或者 <code>HystrixObservableCommand</code> 如何与 <a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCircuitBreaker.html"><code>HystrixCircuitBreaker</code></a> 交互，以及其逻辑和决策流程，包括计数器在断路器中的行为方式。</p>
<p><img src="https://s1.ax1x.com/2020/03/19/86kkNT.png" alt="86kkNT.png"></p>
<p>电路打开和闭合的精确方式如下：</p>
<ol>
<li>假设电路上的容量达到某个阈值(<code>HystrixCommandProperties.circuitBreakerRequestVolumeThreshold()</code>)…</li>
<li>并假设误差百分比超过阈值误差百分比(<code>HystrixCommandProperties.circuitBreakerErrorThresholdPercentage()</code>)…</li>
<li>断路器从 <code>CLOSED</code> 状态转换成 <code>OPEN</code>状态。</li>
<li>当它断开时，它会使针对该断路器的所有请求短路。</li>
<li>一段时间后(<code>HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()</code>)，下一个单个请求被允许通过（这是<code>HALF-OPEN(半开)</code>状态）。如果请求失败，断路器将在睡眠窗口期间返回<code>OPEN</code>状态。如果请求成功，断路器将切换到<code>CLOSED</code> 然后回到1.中的逻辑。</li>
</ol>
<h2 id="隔离（Isolation）"><a href="#隔离（Isolation）" class="headerlink" title="隔离（Isolation）"></a>隔离（Isolation）</h2><p>Hystrix使用隔板模式将依赖关系彼此隔离，并限制对其中任何一个的并发访问。</p>
<p><img src="https://s1.ax1x.com/2020/03/20/82UKHA.png" alt="82UKHA.png"></p>
<h2 id="线程和线程池"><a href="#线程和线程池" class="headerlink" title="线程和线程池"></a>线程和线程池</h2><p>客户端（库，网络调用等）在单独的线程上执行。这样可以将它们与调用线程（Tomcat线程池）隔离，以便调用者可以“摆脱”花费太长时间的依赖项调用。</p>
<p>Hystrix使用单独的，每个依赖关系的线程池作为约束任何给定依赖关系的方式，因此对基础执行的延迟将仅使该池中的可用线程饱和。</p>
<p><img src="https://s1.ax1x.com/2020/03/20/82aUxO.png" alt="82aUxO.png"></p>
<p>您可以在不使用线程池的情况下防止失败，但这需要信任的客户端非常快速地失败（网络连接&#x2F;读取超时和重试配置），并且始终表现良好。</p>
<p>Netflix在Hystrix的设计中选择使用线程和线程池来实现隔离的原因很多，其中包括：</p>
<ul>
<li>许多应用程序会针对许多不同团队开发的数十种不同服务执行数十种（有时甚至超过100种）不同的后端服务调用。</li>
<li>每个服务都提供自己的客户端库。</li>
<li>客户端库一直在变化</li>
<li>客户端库逻辑可以更改以添加新的网络调用。</li>
<li>客户端库可以包含诸如重试，数据解析，缓存（内存中或跨网络）之类的逻辑，以及其他此类行为。</li>
<li>客户端库往往是“黑匣子”-用户对其实现细节，网络访问模式，配置默认值等不透明。</li>
<li>在实际的几次生产中断中，确定为“哦，某些更改并且应该调整属性”或“客户端库更改了其行为”。</li>
<li>即使客户端本身没有变化，服务本身也会发生变化，从而影响性能特征，进而导致客户端配置无效</li>
<li>传递依赖关系可能会引入其他意外的客户端库，这些客户端库可能不是预期的，而且配置可能不正确。</li>
<li>大部分的网络访问是同步进行。</li>
<li>故障和延迟也可能在客户端代码中发生，而不仅仅是在网络调用中。</li>
</ul>
<h3 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h3><p>通过自己线程池中的线程进行隔离的好处是：</p>
<ul>
<li>该应用程序受到完全保护，不受客户端库的攻击。给定依赖库的池可以填满，而不会影响应用程序的其余部分。</li>
<li>该应用程序可以接受风险更低的新客户端库。如果发生问题，它将隔离到库中，并且不会影响其他所有问题。</li>
<li>当发生故障的客户端再次恢复正常运行时，线程池将被清除，应用程序将立即恢复运行正常的性能，与整个Tomcat容器不堪重负的长时间恢复相反。</li>
<li>如果客户端库配置错误，线程池的运行状况将迅速证明这一点（通过增加错误，延迟，超时，拒绝等），您可以处理它（通常通过动态属性实时进行）而不会影响应用程序功能。</li>
<li>如果客户端服务更改了性能特征（通常会经常出现问题），进而导致需要调整属性（增加&#x2F;减少超时，更改重试次数等），则可以通过线程池指标（错误，延迟）再次看到该特征，超时，拒绝），并且可以在不影响其他客户端，请求或用户的情况下进行处理。</li>
<li>除了隔离优势之外，拥有专用线程池还可以提供内置的并发性，可以利用这些并发性在同步客户端库之上构建异步外观（类似于Netflix API如何在Hystrix命令之上构建一个reactive，采用完全异步的Java API）。</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/03/20/8207FA.png" alt="8207FA.png"></p>
<p>简而言之，线程池提供的隔离允许客户端库和子系统性能特征的不断变化和动态组合得到优雅处理，而不会造成中断。</p>
<p>注意：尽管有单独的线程提供了隔离，但您的基础客户端代码也应具有超时和&#x2F;或对线程中断的响应，因此它不能无限期地阻塞并使Hystrix线程池饱和。</p>
<h3 id="线程池的缺点"><a href="#线程池的缺点" class="headerlink" title="线程池的缺点"></a>线程池的缺点</h3><p>线程池的主要缺点是它们增加了计算开销。每个命令执行都涉及在单独的线程上运行命令所涉及的队列，调度和上下文切换。</p>
<p>Netflix API使用线程隔离每天处理10+亿次Hystrix Command执行。每个API实例有40多个线程池，每个线程池中有5-20个线程（大多数设置为10）。</p>
<h3 id="线程的成本"><a href="#线程的成本" class="headerlink" title="线程的成本"></a>线程的成本</h3><p><img src="https://github.com/Netflix/Hystrix/wiki/images/thread-cost-60rps-original.png" alt="thread-cost-60rps-original.png"></p>
<p>在中位数（或更低）处，拥有一个单独的线程没有成本。</p>
<p>在第90个百分位数处，拥有一个单独的线程需要花费3ms的时间。</p>
<p>在第99个百分位数处，拥有一个单独的线程要花费9ms。但是请注意，成本的增加远远小于单独线程（网络请求）的执行时间的增加，后者从2跳到28，而成本从0跳到9。</p>
<p>对于这样的电路，这种开销在90％或更高的百分比上被认为对于大多数Netflix用例都是可以接受的，以实现所具有的弹性。</p>
<p>对于包装延迟非常低的请求的电路（例如那些主要访问内存缓存的请求），开销可能会过高，在这种情况下，您可以使用另一种方法，例如可尝试的信号量，尽管它们不允许超时，提供最大的弹性优势，而没有开销。但是，总的来说开销很小，以至于Netflix实际上通常比这种技术更喜欢使用单独线程的隔离优势。</p>
<h3 id="信号灯（Semaphores）"><a href="#信号灯（Semaphores）" class="headerlink" title="信号灯（Semaphores）"></a>信号灯（Semaphores）</h3><p>您可以使用信号量（或计数器）将并发调用的数量限制为任何给定的依赖项，而不是使用线程池&#x2F;队列大小。这使Hystrix无需使用线程池就可以减轻负载，但它不允许超时和退出。如果您信任客户端，并且只希望减少负载，则可以使用这种方法。</p>
<p><code>HystrixCommand</code> and <code>HystrixObservableCommand</code> 在2个地方支持信号灯:</p>
<ul>
<li><strong>Fallback:</strong> Hystrix检索回退时，总是在调用Tomcat线程上进行回退。</li>
<li><strong>Execution:</strong> 如果将属性<code>execution.isolation.strategy</code>设置为<code>SEMAPHORE</code>，则Hystrix将使用信号量而不是线程来限制调用该命令的并发父线程的数量</li>
</ul>
<p>您可以通过定义可以执行多少个并发线程的动态属性来配置信号灯的这两种用法。您应该使用与确定线程池大小时相似的计算方法来确定它们的大小（在不到毫秒的时间内返回的内存中调用的性能可以超过5000rps，并且信号量仅为1或2…但默认值为10）。</p>
<p>注意：如果依赖关系被信号量隔离，然后变为潜在状态，则父线程将保持阻塞状态，直到基础网络调用超时为止。</p>
<p>一旦达到限制，信号灯拒绝将开始，但是填充信号灯的线程无法终止。</p>
<h2 id="请求折叠（Request-Collapsing）"><a href="#请求折叠（Request-Collapsing）" class="headerlink" title="请求折叠（Request Collapsing）"></a>请求折叠（Request Collapsing）</h2><p>您可以在<code>HystrixCommand</code>前面加上请求折叠程序（<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCollapser.html"><code>HystrixCollapser</code></a>是抽象父级），您可以将多个请求折叠为一个后端依赖项调用。</p>
<p>下图显示了两种情况下的线程和网络连接数：首先是没有连接，然后是请求折叠（假设所有连接在较短的时间范围内（在这种情况下为10ms）在“并发”状态）。</p>
<p><img src="https://s1.ax1x.com/2020/03/20/82RCtS.png" alt="82RCtS.png"></p>
<h3 id="请求折叠-时序图"><a href="#请求折叠-时序图" class="headerlink" title="请求折叠-时序图"></a>请求折叠-时序图</h3><p>@adrianb11 has kindly provided a <a href="https://design.codelytics.io/hystrix/request-collapsing">sequence diagram</a> of request-collapsing（Note: 需要梯子喔。）<br>同样手撸一个图，如果想了解大概流程，可以参考上面的链接：<br><img src="https://s1.ax1x.com/2020/03/22/8ICSXT.png" alt="8ICSXT.png"></p>
<h3 id="为什么使用请求折叠"><a href="#为什么使用请求折叠" class="headerlink" title="为什么使用请求折叠"></a>为什么使用请求折叠</h3><p>使用请求折叠可减少执行并发<code>HystrixCommand</code>执行所需的线程数和网络连接数。请求折叠以一种自动化的方式完成，不会强制所有代码库的开发人员协调手动的请求批处理。</p>
<h4 id="全局上下文-Across-All-Tomcat-Threads"><a href="#全局上下文-Across-All-Tomcat-Threads" class="headerlink" title="全局上下文 (Across All Tomcat Threads)"></a>全局上下文 (Across All Tomcat Threads)</h4><p>理想的折叠类型是在全局应用程序级别完成的，因此可以将来自任何Tomcat线程上任何用户的请求一起折叠。</p>
<p>例如，如果将<code>HystrixCommand</code>配置为支持对检索电影分级的依赖项的所有用户的批处理，则当同一JVM中的任何用户线程发出这样的请求时，Hystrix都会将其请求与其他任何请求一起添加到同一JVM中网络通话崩溃。</p>
<p>请注意，折叠器会将单个<code>HystrixRequestContext</code>对象传递给折叠的网络调用，因此下游系统必须处理这种情况才能使其成为有效的选择。</p>
<h4 id="用户请求的上下文-Single-Tomcat-Thread"><a href="#用户请求的上下文-Single-Tomcat-Thread" class="headerlink" title="用户请求的上下文 (Single Tomcat Thread)"></a>用户请求的上下文 (Single Tomcat Thread)</h4><p>如果将<code>HystrixCommand</code>配置为仅处理单个用户的批处理请求，则Hystrix可以折叠单个Tomcat线程（请求）中的请求。</p>
<p>例如，如果用户想为300个视频对象加载书签，而不是执行300个网络调用，Hystrix可以将它们全部合并为一个。</p>
<h4 id="对象建模和代码复杂度"><a href="#对象建模和代码复杂度" class="headerlink" title="对象建模和代码复杂度"></a>对象建模和代码复杂度</h4><p>有时，当您创建对对象的使用者具有逻辑意义的对象模型时，与对象的生产者的有效资源利用并不十分匹配。</p>
<p>例如，给定一个300个视频对象的列表，对其进行迭代并在每个对象上调用<code>getSomeAttribute()</code>是一个显而易见的对象模型，但是如果天真地实现了，则可能会导致300个网络调用之间相互之间的毫秒数（并且很可能会占用资源）。</p>
<p>有一些手动方法可以处理此问题，例如在允许用户调用<code>getSomeAttribute()</code>之前，要求他们声明要为其获取属性的视频对象，以便可以全部提取它们。</p>
<p>或者，您可以划分对象模型，以便用户必须从一个地方获取视频列表，然后从其他地方询问该视频列表的属性。</p>
<p>这些方法可能导致笨拙的API和对象模型与思维模型和使用模式不匹配。当多个开发人员在一个代码库上工作时，它们还可能导致简单的错误和效率低下，因为针对一个用例进行的优化可能会因另一用例的实现和代码的新路径而中断。</p>
<p>通过将折叠逻辑推到Hystrix层，无论如何创建对象模型，以什么顺序进行调用，或者不同的开发人员是否知道已完成优化或什至需要完成优化都无关紧要.</p>
<p>可以将<code>getSomeAttribute()</code>方法放在最合适的位置，并以适合使用模式的任何方式调用它，然后折叠器将自动将调用批量处理到时间窗口中。</p>
<h4 id="请求折叠的成本是多少"><a href="#请求折叠的成本是多少" class="headerlink" title="请求折叠的成本是多少"></a>请求折叠的成本是多少</h4><p>启用请求折叠的代价是在执行实际命令之前增加了等待时间。最大成本是批处理窗口的大小。</p>
<p>如果您有一条命令需要花费5ms的中位数执行时间和10ms的批处理窗口，则在最坏的情况下执行时间可能变为15ms。通常，一个请求不会在打开时就被提交到窗口，因此中值损失是窗口时间的一半，在这种情况下为5ms。</p>
<p>确定此成本是否值得取决于所执行的命令。高延迟命令不会受到少量额外平均延迟的影响。同样，给定命令的并发量很关键：如果很少有超过1或2个请求被批处理在一起，那么付出代价是没有意义的。实际上，在单线程顺序迭代中，折叠将是主要的性能瓶颈，因为每次迭代将等待10ms的批处理窗口时间。</p>
<p>但是，如果特定命令被大量同时使用，并且可以将数十个甚至数百个呼叫分批处理。然后，由于Hystrix减少了所需的线程数以及与依存关系的网络连接数，因此获得的吞吐量通常远远超过了成本。</p>
<h4 id="折叠流程图"><a href="#折叠流程图" class="headerlink" title="折叠流程图"></a>折叠流程图</h4><p><img src="https://s1.ax1x.com/2020/03/20/82TSJ0.png" alt="82TSJ0.png"></p>
<h2 id="请求缓存"><a href="#请求缓存" class="headerlink" title="请求缓存"></a>请求缓存</h2><p><code>HystrixCommand</code>和<code>HystrixObservableCommand</code>实现可以定义一个缓存键，然后将其用于以并发感知的方式对请求上下文中的重复数据进行重复数据删除。</p>
<p>这是一个示例流程，涉及一个HTTP请求生命周期和两个在该请求中工作的线程：</p>
<p>请求缓存的好处是：</p>
<ul>
<li>不同的代码路径可以执行Hystrix命令，而无需担心重复的工作。</li>
</ul>
<p>这在大型代码库中特别有用，在该代码库中许多开发人员正在实现不同的功能。</p>
<p>例如，所有需要获得用户的<code>Account</code>对象的代码的多个路径都可以这样请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserGetAccount</span>(accountId).execute();<br><br><span class="hljs-comment">//or</span><br><br>Observable&lt;Account&gt; accountObservable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserGetAccount</span>(accountId).observe();<br></code></pre></td></tr></table></figure>

<p>Hystrix <code>RequestCache</code>将一次且仅执行一次基础<code>run()</code>方法，并且尽管实例化了不同的实例，但执行<code>HystrixCommand</code>的两个线程仍将接收相同的数据。</p>
<ul>
<li>整个请求中的数据检索都是一致的。</li>
</ul>
<p>不是每次执行命令时都可能返回不同的值（或回退），而是对同一请求内的所有后续调用进行缓存并返回第一个响应。</p>
<ul>
<li>消除重复线程执行</li>
</ul>
<p>由于请求缓存位于<code>construct()</code>或<code>run()</code>方法调用的前面，因此Hystrix可以在导致线程执行之前对重复数据删除重复数据。</p>
<p>如果Hystrix没有实现请求缓存功能，则每个命令都需要自己在<code>construct()</code>或<code>run()</code>方法内部实现它，这会将其放在线程排队和执行之后。</p>
]]></content>
      <categories>
        <category>translate</category>
      </categories>
      <tags>
        <tag>Hystrix</tag>
        <tag>translate</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的包装类型</title>
    <url>/2019/04/03/Java%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>顾名思义，包装类型就是对基本类型的封装的对象。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类型</th>
<th>大小</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>Boolean</td>
<td>1B</td>
<td>false</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
<td>1B</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
<td>2B</td>
<td>0</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>2B</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>4B</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>8B</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>4B</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>8B</td>
<td>0.0d</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>为啥需要包装类型？<br>将基本类型封装成对象，提供更多的功能，解决基础类型无法解决的问题：泛型类型参数、序列化、数据类型转换、高频区间数据缓存。<br>例如：</p>
<ul>
<li><p>泛型类型参数的问题：<code>List&lt;int&gt; list;</code> 这种定义是否无法通过编译的，需要将<code>int</code> 转成对应的包装类型 <code>Integer</code> ，才运行添加到集合中；</p>
</li>
<li><p>类型转换的问题：提供 <code>Integer.valueOf(&quot;123&quot;)</code> 将字符串转成数字的功；</p>
</li>
<li><p>高频区间数据缓存的问题：<code>Integer.java</code> 源码中 <code>valueOf(int i)</code> 的方法，提供 <code>-128~127</code>高频区间的数据缓存。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="包装类型和基本类型的互相转化"><a href="#包装类型和基本类型的互相转化" class="headerlink" title="包装类型和基本类型的互相转化"></a>包装类型和基本类型的互相转化</h2><p>JDk 5 以前没有自动拆装箱，可以通过下面的方式进行装箱和拆箱：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 装箱</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">wrapperLong</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 拆箱</span><br><span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> wrapperLong.longValue();<br></code></pre></td></tr></table></figure>

<p>拥有了自动拆装箱的代码，相对会简洁一些：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动装箱</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">wrapperLong</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-comment">// 自动拆箱</span><br><span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> wrapperLong;<br></code></pre></td></tr></table></figure>

<h2 id="简单的例子，说明一下它们的区别"><a href="#简单的例子，说明一下它们的区别" class="headerlink" title="简单的例子，说明一下它们的区别"></a>简单的例子，说明一下它们的区别</h2><p><em><strong>源代码：</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基础类型学习，如果两个数 相等，相加后返回，否则直接返回第一个参数。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0 2019-04-02 15:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimitiveTypeStudy</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 自动装箱</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">wrapperLong</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>        <span class="hljs-comment">// 自动拆箱</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> wrapperLong;<br>        add(Long.valueOf(<span class="hljs-number">1L</span>), Long.valueOf(<span class="hljs-number">1L</span>));<br>        add(Long.valueOf(<span class="hljs-number">1L</span>), <span class="hljs-number">1L</span>);<br>        add(<span class="hljs-number">1L</span>, <span class="hljs-number">1L</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试 所有数据都为 长整型 包装类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> first  长整型 包装类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> second 长整型 包装类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 长整型 包装类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">add</span><span class="hljs-params">(Long first, Long second)</span> &#123;<br>        <span class="hljs-keyword">if</span> (first.equals(second)) &#123;<br>            <span class="hljs-keyword">return</span> first + second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试 second 参数为 基本类型，其他均为 包装类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> first  长整型 包装类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> second 长整型 基本类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 长整型 包装类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Long first, <span class="hljs-type">long</span> second)</span> &#123;<br>        <span class="hljs-keyword">if</span> (first.equals(second)) &#123;<br>            <span class="hljs-keyword">return</span> first + second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试 所有数据都为 长整型 基本类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> first  长整型 基本类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> second 长整型 基本类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 长整型 包装类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span> first, <span class="hljs-type">long</span> second)</span> &#123;<br>        <span class="hljs-keyword">if</span> (first == second) &#123;<br>            <span class="hljs-keyword">return</span> first + second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>

<p><em><strong>反编译回来的代码：</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.hy.study.basictype;<br><br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimitiveTypeStudy</span><br>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>  &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">wrapperLong</span> <span class="hljs-operator">=</span> Long.valueOf(<span class="hljs-number">1L</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> wrapperLong.longValue();<br>    add(Long.valueOf(<span class="hljs-number">1L</span>), Long.valueOf(<span class="hljs-number">1L</span>));<br>    add(Long.valueOf(<span class="hljs-number">1L</span>), <span class="hljs-number">1L</span>);<br>    add(<span class="hljs-number">1L</span>, <span class="hljs-number">1L</span>);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">add</span><span class="hljs-params">(Long first, Long second)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> (first.equals(second)) &#123;<br>      <span class="hljs-keyword">return</span> Long.valueOf(first.longValue() + second.longValue());<br>    &#125;<br>    <span class="hljs-keyword">return</span> first;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Long first, <span class="hljs-type">long</span> second)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> (first.equals(Long.valueOf(second))) &#123;<br>      <span class="hljs-keyword">return</span> first.longValue() + second;<br>    &#125;<br>    <span class="hljs-keyword">return</span> first.longValue();<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span> first, <span class="hljs-type">long</span> second)</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> (first == second) &#123;<br>      <span class="hljs-keyword">return</span> first + second;<br>    &#125;<br>    <span class="hljs-keyword">return</span> first;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><em><strong>通过</strong></em><code>javap -v -p PrimitiveTypeStudy.class</code> <em><strong>命令生成，字节码内容，为了对比的效果，我在前后加入反编译后的代码：</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Classfile /Users/jaryoung/project/demo/javabasic/out/production/classes/cn/hy/study/basictype/PrimitiveTypeStudy.<span class="hljs-keyword">class</span><br>  <span class="hljs-title class_">Last</span> modified Apr <span class="hljs-number">3</span>, <span class="hljs-number">2019</span>; size <span class="hljs-number">1530</span> bytes<br>  MD5 checksum db6d2b4373555e4e52196d58a3ba87b5<br>  Compiled from <span class="hljs-string">&quot;PrimitiveTypeStudy.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.hy.study.basictype.PrimitiveTypeStudy<br>  minor version: <span class="hljs-number">0</span><br>  major version: <span class="hljs-number">52</span><br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br>   #<span class="hljs-number">1</span> = Methodref          #<span class="hljs-number">19.</span>#<span class="hljs-number">44</span>        <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">2</span> = Class              #<span class="hljs-number">45</span>            <span class="hljs-comment">// java/lang/Long</span><br>   #<span class="hljs-number">3</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">46</span>         <span class="hljs-comment">// java/lang/Long.&quot;&lt;init&gt;&quot;:(J)V</span><br>   #<span class="hljs-number">4</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">47</span>         <span class="hljs-comment">// java/lang/Long.longValue:()J</span><br>   #<span class="hljs-number">5</span> = Fieldref           #<span class="hljs-number">48.</span>#<span class="hljs-number">49</span>        <span class="hljs-comment">// java/lang/System.out:Ljava/io/PrintStream;</span><br>   #<span class="hljs-number">6</span> = Class              #<span class="hljs-number">50</span>            <span class="hljs-comment">// java/lang/StringBuilder</span><br>   #<span class="hljs-number">7</span> = Methodref          #<span class="hljs-number">6.</span>#<span class="hljs-number">44</span>         <span class="hljs-comment">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">8</span> = String             #<span class="hljs-number">51</span>            <span class="hljs-comment">//</span><br>   #<span class="hljs-number">9</span> = Methodref          #<span class="hljs-number">6.</span>#<span class="hljs-number">52</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>  #<span class="hljs-number">10</span> = Methodref          #<span class="hljs-number">6.</span>#<span class="hljs-number">53</span>         <span class="hljs-comment">// java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;</span><br>  #<span class="hljs-number">11</span> = Methodref          #<span class="hljs-number">6.</span>#<span class="hljs-number">54</span>         <span class="hljs-comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br>  #<span class="hljs-number">12</span> = Methodref          #<span class="hljs-number">55.</span>#<span class="hljs-number">56</span>        <span class="hljs-comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">13</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">57</span>         <span class="hljs-comment">// java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br>  #<span class="hljs-number">14</span> = Methodref          #<span class="hljs-number">18.</span>#<span class="hljs-number">58</span>        <span class="hljs-comment">// cn/hy/study/basictype/PrimitiveTypeStudy.add:(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;</span><br>  #<span class="hljs-number">15</span> = Methodref          #<span class="hljs-number">18.</span>#<span class="hljs-number">59</span>        <span class="hljs-comment">// cn/hy/study/basictype/PrimitiveTypeStudy.add:(Ljava/lang/Long;J)J</span><br>  #<span class="hljs-number">16</span> = Methodref          #<span class="hljs-number">18.</span>#<span class="hljs-number">60</span>        <span class="hljs-comment">// cn/hy/study/basictype/PrimitiveTypeStudy.add:(JJ)J</span><br>  #<span class="hljs-number">17</span> = Methodref          #<span class="hljs-number">2.</span>#<span class="hljs-number">61</span>         <span class="hljs-comment">// java/lang/Long.equals:(Ljava/lang/Object;)Z</span><br>  #<span class="hljs-number">18</span> = Class              #<span class="hljs-number">62</span>            <span class="hljs-comment">// cn/hy/study/basictype/PrimitiveTypeStudy</span><br>  #<span class="hljs-number">19</span> = Class              #<span class="hljs-number">63</span>            <span class="hljs-comment">// java/lang/Object</span><br>  #<span class="hljs-number">20</span> = Utf8               &lt;init&gt;<br>  #<span class="hljs-number">21</span> = Utf8               ()V<br>  #<span class="hljs-number">22</span> = Utf8               Code<br>  #<span class="hljs-number">23</span> = Utf8               LineNumberTable<br>  #<span class="hljs-number">24</span> = Utf8               LocalVariableTable<br>  #<span class="hljs-number">25</span> = Utf8               <span class="hljs-built_in">this</span><br>  #<span class="hljs-number">26</span> = Utf8               Lcn/hy/study/basictype/PrimitiveTypeStudy;<br>  #<span class="hljs-number">27</span> = Utf8               main<br>  #<span class="hljs-number">28</span> = Utf8               ([Ljava/lang/String;)V<br>  #<span class="hljs-number">29</span> = Utf8               args<br>  #<span class="hljs-number">30</span> = Utf8               [Ljava/lang/String;<br>  #<span class="hljs-number">31</span> = Utf8               wrapperLong<br>  #<span class="hljs-number">32</span> = Utf8               Ljava/lang/Long;<br>  #<span class="hljs-number">33</span> = Utf8               aLong<br>  #<span class="hljs-number">34</span> = Utf8               J<br>  #<span class="hljs-number">35</span> = Utf8               add<br>  #<span class="hljs-number">36</span> = Utf8               (Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;<br>  #<span class="hljs-number">37</span> = Utf8               first<br>  #<span class="hljs-number">38</span> = Utf8               second<br>  #<span class="hljs-number">39</span> = Utf8               StackMapTable<br>  #<span class="hljs-number">40</span> = Utf8               (Ljava/lang/Long;J)J<br>  #<span class="hljs-number">41</span> = Utf8               (JJ)J<br>  #<span class="hljs-number">42</span> = Utf8               SourceFile<br>  #<span class="hljs-number">43</span> = Utf8               PrimitiveTypeStudy.java<br>  #<span class="hljs-number">44</span> = NameAndType        #<span class="hljs-number">20</span>:#<span class="hljs-number">21</span>        <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:()V</span><br>  #<span class="hljs-number">45</span> = Utf8               java/lang/Long<br>  #<span class="hljs-number">46</span> = NameAndType        #<span class="hljs-number">20</span>:#<span class="hljs-number">64</span>        <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:(J)V</span><br>  #<span class="hljs-number">47</span> = NameAndType        #<span class="hljs-number">65</span>:#<span class="hljs-number">66</span>        <span class="hljs-comment">// longValue:()J</span><br>  #<span class="hljs-number">48</span> = Class              #<span class="hljs-number">67</span>            <span class="hljs-comment">// java/lang/System</span><br>  #<span class="hljs-number">49</span> = NameAndType        #<span class="hljs-number">68</span>:#<span class="hljs-number">69</span>        <span class="hljs-comment">// out:Ljava/io/PrintStream;</span><br>  #<span class="hljs-number">50</span> = Utf8               java/lang/StringBuilder<br>  #<span class="hljs-number">51</span> = Utf8<br>  #<span class="hljs-number">52</span> = NameAndType        #<span class="hljs-number">70</span>:#<span class="hljs-number">71</span>        <span class="hljs-comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>  #<span class="hljs-number">53</span> = NameAndType        #<span class="hljs-number">70</span>:#<span class="hljs-number">72</span>        <span class="hljs-comment">// append:(J)Ljava/lang/StringBuilder;</span><br>  #<span class="hljs-number">54</span> = NameAndType        #<span class="hljs-number">73</span>:#<span class="hljs-number">74</span>        <span class="hljs-comment">// toString:()Ljava/lang/String;</span><br>  #<span class="hljs-number">55</span> = Class              #<span class="hljs-number">75</span>            <span class="hljs-comment">// java/io/PrintStream</span><br>  #<span class="hljs-number">56</span> = NameAndType        #<span class="hljs-number">76</span>:#<span class="hljs-number">77</span>        <span class="hljs-comment">// println:(Ljava/lang/String;)V</span><br>  #<span class="hljs-number">57</span> = NameAndType        #<span class="hljs-number">78</span>:#<span class="hljs-number">79</span>        <span class="hljs-comment">// valueOf:(J)Ljava/lang/Long;</span><br>  #<span class="hljs-number">58</span> = NameAndType        #<span class="hljs-number">35</span>:#<span class="hljs-number">36</span>        <span class="hljs-comment">// add:(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;</span><br>  #<span class="hljs-number">59</span> = NameAndType        #<span class="hljs-number">35</span>:#<span class="hljs-number">40</span>        <span class="hljs-comment">// add:(Ljava/lang/Long;J)J</span><br>  #<span class="hljs-number">60</span> = NameAndType        #<span class="hljs-number">35</span>:#<span class="hljs-number">41</span>        <span class="hljs-comment">// add:(JJ)J</span><br>  #<span class="hljs-number">61</span> = NameAndType        #<span class="hljs-number">80</span>:#<span class="hljs-number">81</span>        <span class="hljs-comment">// equals:(Ljava/lang/Object;)Z</span><br>  #<span class="hljs-number">62</span> = Utf8               cn/hy/study/basictype/PrimitiveTypeStudy<br>  #<span class="hljs-number">63</span> = Utf8               java/lang/Object<br>  #<span class="hljs-number">64</span> = Utf8               (J)V<br>  #<span class="hljs-number">65</span> = Utf8               longValue<br>  #<span class="hljs-number">66</span> = Utf8               ()J<br>  #<span class="hljs-number">67</span> = Utf8               java/lang/System<br>  #<span class="hljs-number">68</span> = Utf8               out<br>  #<span class="hljs-number">69</span> = Utf8               Ljava/io/PrintStream;<br>  #<span class="hljs-number">70</span> = Utf8               append<br>  #<span class="hljs-number">71</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;<br>  #<span class="hljs-number">72</span> = Utf8               (J)Ljava/lang/StringBuilder;<br>  #<span class="hljs-number">73</span> = Utf8               toString<br>  #<span class="hljs-number">74</span> = Utf8               ()Ljava/lang/String;<br>  #<span class="hljs-number">75</span> = Utf8               java/io/PrintStream<br>  #<span class="hljs-number">76</span> = Utf8               println<br>  #<span class="hljs-number">77</span> = Utf8               (Ljava/lang/String;)V<br>  #<span class="hljs-number">78</span> = Utf8               valueOf<br>  #<span class="hljs-number">79</span> = Utf8               (J)Ljava/lang/Long;<br>  #<span class="hljs-number">80</span> = Utf8               equals<br>  #<span class="hljs-number">81</span> = Utf8               (Ljava/lang/Object;)Z<br>&#123;<br>  <span class="hljs-keyword">public</span> cn.hy.study.basictype.PrimitiveTypeStudy();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      stack=<span class="hljs-number">1</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span>                  <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">14</span>: <span class="hljs-number">0</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>       <span class="hljs-number">5</span>     <span class="hljs-number">0</span>  <span class="hljs-built_in">this</span>   Lcn/hy/study/basictype/PrimitiveTypeStudy;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public static void main(String[] args)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        Long wrapperLong = Long.valueOf(1L);</span><br><span class="hljs-comment">        long aLong = wrapperLong.longValue();</span><br><span class="hljs-comment">        add(Long.valueOf(1L), Long.valueOf(1L));</span><br><span class="hljs-comment">        add(Long.valueOf(1L), 1L);</span><br><span class="hljs-comment">        add(1L, 1L);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(java.lang.String[])</span>;<br>    descriptor: ([Ljava/lang/String;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">4</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class java/lang/Long</span><br>         <span class="hljs-number">3</span>: dup<br>         <span class="hljs-number">4</span>: lconst_1<br>         <span class="hljs-number">5</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method java/lang/Long.&quot;&lt;init&gt;&quot;:(J)V</span><br>         <span class="hljs-number">8</span>: astore_1<br>         <span class="hljs-number">9</span>: aload_1<br>        <span class="hljs-number">10</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/lang/Long.longValue:()J</span><br>        <span class="hljs-number">13</span>: lstore_2<br>        <span class="hljs-number">14</span>: getstatic     #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">17</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">6</span>                  <span class="hljs-comment">// class java/lang/StringBuilder</span><br>        <span class="hljs-number">20</span>: dup<br>        <span class="hljs-number">21</span>: invokespecial #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-number">24</span>: ldc           #<span class="hljs-number">8</span>                  <span class="hljs-comment">// String</span><br>        <span class="hljs-number">26</span>: invokevirtual #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-number">29</span>: lload_2<br>        <span class="hljs-number">30</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-number">33</span>: invokevirtual #<span class="hljs-number">11</span>                 <span class="hljs-comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br>        <span class="hljs-number">36</span>: invokevirtual #<span class="hljs-number">12</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class="hljs-number">39</span>: lconst_1<br>        <span class="hljs-number">40</span>: invokestatic  #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br>        <span class="hljs-number">43</span>: lconst_1<br>        <span class="hljs-number">44</span>: invokestatic  #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br>        <span class="hljs-number">47</span>: invokestatic  #<span class="hljs-number">14</span>                 <span class="hljs-comment">// Method add:(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;</span><br>        <span class="hljs-number">50</span>: pop<br>        <span class="hljs-number">51</span>: lconst_1<br>        <span class="hljs-number">52</span>: invokestatic  #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br>        <span class="hljs-number">55</span>: lconst_1<br>        <span class="hljs-number">56</span>: invokestatic  #<span class="hljs-number">15</span>                 <span class="hljs-comment">// Method add:(Ljava/lang/Long;J)J</span><br>        <span class="hljs-number">59</span>: pop2<br>        <span class="hljs-number">60</span>: lconst_1<br>        <span class="hljs-number">61</span>: lconst_1<br>        <span class="hljs-number">62</span>: invokestatic  #<span class="hljs-number">16</span>                 <span class="hljs-comment">// Method add:(JJ)J</span><br>        <span class="hljs-number">65</span>: pop2<br>        <span class="hljs-number">66</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">19</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">21</span>: <span class="hljs-number">9</span><br>        line <span class="hljs-number">22</span>: <span class="hljs-number">14</span><br>        line <span class="hljs-number">23</span>: <span class="hljs-number">39</span><br>        line <span class="hljs-number">24</span>: <span class="hljs-number">51</span><br>        line <span class="hljs-number">25</span>: <span class="hljs-number">60</span><br>        line <span class="hljs-number">29</span>: <span class="hljs-number">66</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">67</span>     <span class="hljs-number">0</span>  args   [Ljava/lang/String;<br>            <span class="hljs-number">9</span>      <span class="hljs-number">58</span>     <span class="hljs-number">1</span> wrapperLong   Ljava/lang/Long;<br>           <span class="hljs-number">14</span>      <span class="hljs-number">53</span>     <span class="hljs-number">2</span> aLong   J<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public static Long add(Long first, Long second)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if (first.equals(second)) &#123;</span><br><span class="hljs-comment">        return Long.valueOf(first.longValue() + second.longValue());</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return first;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.lang.Long <span class="hljs-title function_">add</span><span class="hljs-params">(java.lang.Long, java.lang.Long)</span>;<br>    descriptor: (Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">4</span>, locals=<span class="hljs-number">2</span>, args_size=<span class="hljs-number">2</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: aload_1<br>         <span class="hljs-number">2</span>: invokevirtual #<span class="hljs-number">17</span>                 <span class="hljs-comment">// Method java/lang/Long.equals:(Ljava/lang/Object;)Z</span><br>         <span class="hljs-number">5</span>: ifeq          <span class="hljs-number">21</span><br>         <span class="hljs-number">8</span>: aload_0<br>         <span class="hljs-number">9</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/lang/Long.longValue:()J</span><br>        <span class="hljs-number">12</span>: aload_1<br>        <span class="hljs-number">13</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/lang/Long.longValue:()J</span><br>        <span class="hljs-number">16</span>: ladd<br>        <span class="hljs-number">17</span>: invokestatic  #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br>        <span class="hljs-number">20</span>: areturn<br>        <span class="hljs-number">21</span>: aload_0<br>        <span class="hljs-number">22</span>: areturn<br>      LineNumberTable:<br>        line <span class="hljs-number">39</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">40</span>: <span class="hljs-number">8</span><br>        line <span class="hljs-number">42</span>: <span class="hljs-number">21</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">23</span>     <span class="hljs-number">0</span> first   Ljava/lang/Long;<br>            <span class="hljs-number">0</span>      <span class="hljs-number">23</span>     <span class="hljs-number">1</span> second   Ljava/lang/Long;<br>      StackMapTable: number_of_entries = <span class="hljs-number">1</span><br>        frame_type = <span class="hljs-number">21</span> <span class="hljs-comment">/* same */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public static long add(Long first, long second)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if (first.equals(Long.valueOf(second))) &#123;</span><br><span class="hljs-comment">        return first.longValue() + second;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return first.longValue();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">add</span><span class="hljs-params">(java.lang.Long, <span class="hljs-type">long</span>)</span>;<br>    descriptor: (Ljava/lang/Long;J)J<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">4</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">2</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: lload_1<br>         <span class="hljs-number">2</span>: invokestatic  #<span class="hljs-number">13</span>                 <span class="hljs-comment">// Method java/lang/Long.valueOf:(J)Ljava/lang/Long;</span><br>         <span class="hljs-number">5</span>: invokevirtual #<span class="hljs-number">17</span>                 <span class="hljs-comment">// Method java/lang/Long.equals:(Ljava/lang/Object;)Z</span><br>         <span class="hljs-number">8</span>: ifeq          <span class="hljs-number">18</span><br>        <span class="hljs-number">11</span>: aload_0<br>        <span class="hljs-number">12</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/lang/Long.longValue:()J</span><br>        <span class="hljs-number">15</span>: lload_1<br>        <span class="hljs-number">16</span>: ladd<br>        <span class="hljs-number">17</span>: lreturn<br>        <span class="hljs-number">18</span>: aload_0<br>        <span class="hljs-number">19</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method java/lang/Long.longValue:()J</span><br>        <span class="hljs-number">22</span>: lreturn<br>      LineNumberTable:<br>        line <span class="hljs-number">53</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">54</span>: <span class="hljs-number">11</span><br>        line <span class="hljs-number">56</span>: <span class="hljs-number">18</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">23</span>     <span class="hljs-number">0</span> first   Ljava/lang/Long;<br>            <span class="hljs-number">0</span>      <span class="hljs-number">23</span>     <span class="hljs-number">1</span> second   J<br>      StackMapTable: number_of_entries = <span class="hljs-number">1</span><br>        frame_type = <span class="hljs-number">18</span> <span class="hljs-comment">/* same */</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  public static long add(long first, long second)</span><br><span class="hljs-comment">  &#123;</span><br><span class="hljs-comment">    if (first == second) &#123;</span><br><span class="hljs-comment">      return first + second;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return first;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span>, <span class="hljs-type">long</span>)</span>;<br>    descriptor: (JJ)J<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      stack=<span class="hljs-number">4</span>, locals=<span class="hljs-number">4</span>, args_size=<span class="hljs-number">2</span><br>         <span class="hljs-number">0</span>: lload_0<br>         <span class="hljs-number">1</span>: lload_2<br>         <span class="hljs-number">2</span>: lcmp<br>         <span class="hljs-number">3</span>: ifne          <span class="hljs-number">10</span><br>         <span class="hljs-number">6</span>: lload_0<br>         <span class="hljs-number">7</span>: lload_2<br>         <span class="hljs-number">8</span>: ladd<br>         <span class="hljs-number">9</span>: lreturn<br>        <span class="hljs-number">10</span>: lload_0<br>        <span class="hljs-number">11</span>: lreturn<br>      LineNumberTable:<br>        line <span class="hljs-number">68</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">69</span>: <span class="hljs-number">6</span><br>        line <span class="hljs-number">71</span>: <span class="hljs-number">10</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class="hljs-number">0</span>      <span class="hljs-number">12</span>     <span class="hljs-number">0</span> first   J<br>            <span class="hljs-number">0</span>      <span class="hljs-number">12</span>     <span class="hljs-number">2</span> second   J<br>      StackMapTable: number_of_entries = <span class="hljs-number">1</span><br>        frame_type = <span class="hljs-number">10</span> <span class="hljs-comment">/* same */</span><br>&#125;<br>SourceFile: <span class="hljs-string">&quot;PrimitiveTypeStudy.java&quot;</span><br><br></code></pre></td></tr></table></figure>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>除了 POJO 类属性 和 RPC 方法的返回值和参数之外，其他情况建议使用基本类型。</p>
<hr>
<p>部分内容都是引用自：</p>
<blockquote>
<p>《码出高效》<br><a href="https://www.baeldung.com/java-wrapper-classes">https://www.baeldung.com/java-wrapper-classes</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>《Netty in Action》 读后感</title>
    <url>/2020/02/07/Netty-in-Action-After-Reading/</url>
    <content><![CDATA[<h2 id="开编我想说"><a href="#开编我想说" class="headerlink" title="开编我想说"></a>开编我想说</h2><blockquote>
<p>刻意练习，本着课本的例子，照着我也写一遍的原则进行练习。</p>
</blockquote>
<p>  基础知识真的太重要，很多基础知识是会影响我们阅读书的效果，甚至可能会误解书本的原意。就拿着当前阅读的书来说起，如果我们不知道计算机操作系统基础，不知Java网络编程基础，不知网络协议等，那么我们看书可能会举步维艰。所以，在看本书之前，我尝试查阅一些相关资料，以补充能够更好吸收书本知识。</p>
<p>  本文章，就是书本很多地方的内容，并未能深刻理解，一本书的内容也不可能全部呈现。例如，零拷贝，各种网络协议的理解，例如tcp，udp协议等。很多基础内容，都感觉相对薄弱，所以日后需要加强基础的部分。<br> 看完，你可能会有以下收获：<br>  Netty核心组件、重新认识字节、关于Netty单元测试、编码器和解码器、WebSocket简单的聊天室</p>
<span id="more"></span>  

<h2 id="阅读前的预习，大有裨益"><a href="#阅读前的预习，大有裨益" class="headerlink" title="阅读前的预习，大有裨益"></a>阅读前的预习，大有裨益</h2><ul>
<li>同步和异步的概念</li>
</ul>
<blockquote>
<p>同步，是一个可靠的有序操作，例如，有顺序执行操作A-&gt;操作B，如果操作A没有完成返回，操作B需要排队等候；反之，异步则相反无需等待，通常可以依靠回调或者事件的方式来进行操作的次序的问题。</p>
</blockquote>
<ul>
<li>堵塞和非堵塞</li>
</ul>
<blockquote>
<p>在进行阻塞操作时，当前线程会处于阻塞状态，无法从事其他任务，只有当条件就绪才能继续，比如 ServerSocket 新连接建立完毕，或数据读取、写入操作完成；而非阻塞则是不管 IO 操作是否结束，直接返回，相应操作在后台继续处理。</p>
</blockquote>
<ul>
<li><p>查询常见的I&#x2F;O模型：I&#x2F;O堵塞;I&#x2F;O非堵塞;I&#x2F;O复用；信号驱动I&#x2F;O；异步I&#x2F;O<br><img src="https://s2.ax1x.com/2020/02/07/1cIMQI.png" alt="1cIMQI.png"></p>
</li>
<li><p>用户空间和系统空间</p>
</li>
</ul>
<blockquote>
<p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。<a href="https://yuelng.github.io/2018/03/16/computer_science/network_coding/">摘抄自这里</a></p>
</blockquote>
<ul>
<li>Linux 操作系统中select、poll、epoll<br><a href="https://www.cnblogs.com/binarylei/p/11130079.html#select-api">详细内容可以查看</a></li>
<li>High-Performance I&#x2F;O Design Patterns<br><a href="https://www.artima.com/articles/io_design_patterns.html">详细内容可以看</a></li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Netty is an asynchronous event-driven network application framework<br>for rapid development of maintainable high performance protocol servers &amp; clients.</p>
</blockquote>
<p>   从上面我抽取了三个关键词，asynchronous、event-driven、high performance。带着三个关键信息，看能够从书中摄取到三个核心的内容。</p>
<h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><blockquote>
<p>Channel，是出入站数据的载体，或者是网络中Socket抽象代表。<br>目的：Channel为了降低直接使用Java中Socket API的复杂度。</p>
</blockquote>
<p>Channel的生命周期：register-&gt;active-&gt;inactive-&gt;unregistred</p>
<h4 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h4><blockquote>
<p>用于处理连接的生命周期的中发生的事件</p>
</blockquote>
<p>Channel、EventLoop和EventLoopGroup的关系图<br><img src="https://s2.ax1x.com/2020/02/07/1czd5n.png" alt="1czd5n.png"></p>
<p>图中可以看到EventLoopGroup其实就具有多个EventLoop的组，EventLoop会在Channel的整个生命周期处理I&#x2F;O事件。<br>三者关系如下：</p>
<ul>
<li>一个EventLoopGroup包含一个或者多个EventLoop</li>
<li>一个EventLoop一个生命周期中，只和一个线程绑定</li>
<li>EventLoop所有I&#x2F;O处理事件，将有专用的线程处理</li>
<li>一个Channel生命周期，只会注册到一个EventLoop上</li>
<li>一个EventLoop可以会分配多个Channel</li>
</ul>
<p>得益于EventLoop是一个固定的线程处理，给定的Channel上的I&#x2F;O的处理将会在同一个线程处理，避免了不必要的线程切换上下文的开销；</p>
<p>下面来深入了解一下，EventLoop：<br>先通过类图去纵览<br><img src="https://s2.ax1x.com/2020/02/07/1guZWT.png" alt="1guZWT.png"></p>
<ul>
<li>java.util.concurrent<br>AbstractExecutorService主要是实现了ExecutorService接口，ScheduledExecutorService则是继承了ExecutorService；</li>
<li>io.netty.utilconcurrent<br>AbstractEventExecutor，继承了AbstractExecutorService类，并且实现EventExecutor接口，</li>
<li>io.netty.channel<br>EventLoop，继承了OrderedEventExecutor, EventLoopGroup，只有一个：EventLoopGroup parent()方法。<br>SingleThreadEventLoop，继承SingleThreadEventExecutor，并且实现EventLoop接口；<br>重头戏来了，NioEventLoop，是继承了SingleThreadEventLoop，正如上面所说的：<code>一个EventLoop一个生命周期中，只和一个线程绑定</code></li>
</ul>
<p>EventLoop的执行逻辑：<br><img src="https://s2.ax1x.com/2020/02/07/1g3qc6.png" alt="1g3qc6.png"></p>
<h4 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h4><blockquote>
<p>pipeline，意译为管道，ChannelPipeline，一看到这个名字，我们能够猜到它的作用就是类似管道的作用。<br>目的：为了提供ChannelHandler链式容器（ChannelHandler在下一节介绍）</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2020/02/07/1gpYkj.png" alt="1gpYkj.png"></p>
<p>本节，需要了解pipeline它的头部和尾部的概念，入站从头部第一个ChannelHandler先入，出站的时候从尾端端第一个ChannelHandler先开始流出。</p>
<p>顺便提一下，Channel一旦分配为ChannelPipeline后，是永久性操作，不能被修改。<br>通过 DefaultChannelPipeline 和 AbstractChannel 源代码分析，也能得到上面的结论：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AbstractChannel<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">AbstractChannel</span><span class="hljs-params">(Channel parent)</span> &#123;<br>    ...<br>        pipeline = newChannelPipeline();<span class="hljs-comment">// 新建分配一个ChannelPipeline</span><br>    &#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">DefaultChannelPipeline<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">DefaultChannelPipeline</span><span class="hljs-params">(Channel channel)</span> &#123;<br>    ...<br>        <span class="hljs-built_in">this</span>.channel = ObjectUtil.checkNotNull(channel, <span class="hljs-string">&quot;channel&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>最后，上面的设计使得，我们 <strong>变动（增删改）</strong> ChannelPipeline上的Handler也是相当方便的。</p>
<h4 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h4><blockquote>
<p>ChannelHandler，它充当了所有处理入站和出站数据的应用程序逻辑的容器。<br>ChannelHandler生命周期：added-&gt;removed (excption)<br>通过ChannelHandler再来看出入站的概念：<br>入站，就是数据流要进行我们的服务前置的业务处理。出站，就是我们需要返回数据流时候的后置业务处理。当然我们还是需要谨记，上一节的pipeline的头部和尾端的概念，不然会容易出或者入站的handler出现位置不对的情况。</p>
</blockquote>
<ul>
<li>ChannelInboundHandler 入站处理器接口，处理入站数据和状态变化<br>列出我在练习中常用的方法：</li>
</ul>
<table>
<thead>
<tr>
<th>类　　型</th>
<th>描　　述</th>
</tr>
</thead>
<tbody><tr>
<td>channelRegistered</td>
<td>当Channel已经注册到它的EventLoop并且能够处理I&#x2F;O时被调用</td>
</tr>
<tr>
<td>channelUnregistered</td>
<td>当Channel从它的EventLoop注销并且无法处理任何I&#x2F;O时被调用</td>
</tr>
<tr>
<td>channelActive</td>
<td>当Channel处于活动状态时被调用；Channel已经连接&#x2F;绑定并且已经就绪</td>
</tr>
<tr>
<td>channelInactive</td>
<td>当Channel离开活动状态并且不再连接它的远程节点时被调用</td>
</tr>
<tr>
<td>channelReadComplete</td>
<td>当Channel上的一个读操作完成时被调用</td>
</tr>
<tr>
<td>channelRead</td>
<td>当从Channel读取数据时被调用</td>
</tr>
<tr>
<td>userEventTriggered</td>
<td>当ChannelnboundHandler.fireUserEventTriggered()方法被调用时被调用，因为一个POJO被传经了ChannelPipeline</td>
</tr>
</tbody></table>
<p>我们可以通过继承 ChannelInboundHandlerAdapter 来编写自己的入站处理器。常用的是：SimpleChannelInboundHandler，因为它给我优化了一些常用的操作，例如，资源的自动释放等</p>
<p>异常处理：<br>exceptionCaught，这个方法在 ChannelInboundHandlerAdapter 已经标记被弃用，</p>
<ul>
<li>ChannelOutboundHandler 出站处理器接口，处理出站的所有数据，并且能够拦截所有的操作。<br>列出我在练习中常用的方法：</li>
</ul>
<table>
<thead>
<tr>
<th>类　　型</th>
<th>描　　述</th>
</tr>
</thead>
<tbody><tr>
<td>bind(ChannelHandlerContext,SocketAddress,ChannelPromise)</td>
<td>当请求将Channel绑定到本地地址时被调用</td>
</tr>
<tr>
<td>connect(ChannelHandlerContext,SocketAddress,SocketAddress,ChannelPromise)当</td>
<td>请求将Channel连接到远程节点时被调用</td>
</tr>
<tr>
<td>disconnect(ChannelHandlerContext,ChannelPromise)</td>
<td>当请求将Channel从远程节点断开时被调用</td>
</tr>
<tr>
<td>close(ChannelHandlerContext,ChannelPromise)</td>
<td>当请求关闭Channel时被调用</td>
</tr>
<tr>
<td>deregister(ChannelHandlerContext,ChannelPromise)</td>
<td>当请求将Channel从它的EventLoop注销时被调用</td>
</tr>
<tr>
<td>read(ChannelHandlerContext)</td>
<td>当请求从Channel读取更多的数据时被调用</td>
</tr>
<tr>
<td>flush(ChannelHandlerContext)</td>
<td>当请求通过Channel将入队数据冲刷到远程节点时被调用</td>
</tr>
<tr>
<td>write(ChannelHandlerContext,Object,ChannelPromise)</td>
<td>当请求通过Channel将数据写到远程节点时被调用</td>
</tr>
</tbody></table>
<p>异常处理：<br>两种方式：</p>
<ol>
<li>在出站操作都会返回ChannelFuture，进行添加监听事件</li>
<li>在ChannelOutboundHandler的入参都会带有ChannelPromis，进行添加监听事件<br>方式2更加常用，因为相对方式1相关更加简单有效。</li>
</ol>
<h4 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h4><p>紧接上面，我来看一下Channel、ChannelPipeline、ChannelHandler和ChannelHandlerContext之间的关系：<br><img src="https://s2.ax1x.com/2020/02/07/123uKf.png" alt="123uKf.png"><br>当ChannelHandler添加到ChannelPipeline到时候，ChannelHandlerContext将会被创建。</p>
<p>ChannelHandler高级用法：我们可以在使用ChannelHandler可以缓存ChannelHanlderContext，然后去完成一些复杂的操作。<br>但是这里是有一个前提，就是当前ChannelHandler应该是被@Sharable注释，因为一个ChannelHandler可能属于多个ChannelPipeline。在使用@Sharable之前，最好确保当前ChannelHandler是线程安全。</p>
<h4 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h4><blockquote>
<p>Netty提供了ChannelFuture接口，其addListener()方法注册了一个ChannelFutureListener，以便在某个操作完成时（无论是否成功）得到通知。</p>
</blockquote>
<h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p><img src="https://s2.ax1x.com/2020/02/07/1gyOJ0.png" alt="1gyOJ0.png"></p>
<ul>
<li>引导客户端 和 无连接协议<br>引导流程如下：<br><img src="https://s2.ax1x.com/2020/02/07/1g6GSf.png" alt="1g6GSf.png"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoClient</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">SSL</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;ssl&quot;</span>) != <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOST</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;host&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PORT</span> <span class="hljs-operator">=</span> Integer.parseInt(System.getProperty(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-string">&quot;8023&quot;</span>));<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// Configure SSL.git</span><br>        <span class="hljs-keyword">final</span> SslContext sslCtx;<br>        <span class="hljs-keyword">if</span> (SSL) &#123;<br>            sslCtx = SslContextBuilder.forClient()<br>                    .trustManager(InsecureTrustManagerFactory.INSTANCE).build();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sslCtx = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Configure the client.</span><br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            b.group(group)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> ch.pipeline();<br>                            <span class="hljs-keyword">if</span> (sslCtx != <span class="hljs-literal">null</span>) &#123;<br>                                p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));<br>                            &#125;<br>                            p.addLast(<br>                                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomSimpleChannelInboundHandler</span>())<br>                            ;<br>                        &#125;<br>                    &#125;);<br><br>            <span class="hljs-comment">// 在connect方法调用后，Bootstrap类将会创建一个新的Channel</span><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> b.connect(HOST, PORT).sync();<br><br>            <span class="hljs-comment">// Wait until the connection is closed.</span><br>            f.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// Shut down the event loop to terminate all threads.</span><br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<ul>
<li>引导服务器</li>
</ul>
<p>引导流程如下：<br><img src="https://s2.ax1x.com/2020/02/07/1g6tOg.png" alt="1g6tOg.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchoServer</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">SSL</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;ssl&quot;</span>) != <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PORT</span> <span class="hljs-operator">=</span> Integer.parseInt(System.getProperty(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-string">&quot;8007&quot;</span>));<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECOND_HANDLER_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;second&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// Configure SSL.</span><br>        <span class="hljs-keyword">final</span> SslContext sslCtx;<br>        <span class="hljs-keyword">if</span> (SSL) &#123;<br>            <span class="hljs-type">SelfSignedCertificate</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelfSignedCertificate</span>();<br>            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sslCtx = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Configure the server.</span><br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workerGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">EchoServerHandler</span> <span class="hljs-variable">serverHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EchoServerHandler</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            b.group(bossGroup, workerGroup)<br>                    .channel(NioServerSocketChannel.class)<br>                    .option(ChannelOption.SO_BACKLOG, <span class="hljs-number">100</span>)<br>                    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO))<br>                    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> ch.pipeline();<br>                            <span class="hljs-keyword">if</span> (sslCtx != <span class="hljs-literal">null</span>) &#123;<br>                            p.addLast(sslCtx.newHandler(ch.alloc()));<br>                            p.addLast(serverHandler);<br>                        &#125;<br>                    &#125;);<br><br>            <span class="hljs-comment">// Start the server.</span><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> b.bind(PORT).sync();<br><br>            <span class="hljs-comment">// Wait until the server socket is closed.</span><br>            f.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// Shut down all event loops to terminate all threads.</span><br>            bossGroup.shutdownGracefully();<br>            workerGroup.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<ul>
<li><p>引导DatagramChannel<br>Netty提供了各种DatagramChannel的实现，它唯一的区别就是不能使用connect方法，只能调用bind方法。</p>
</li>
<li><p>如何优雅关闭客户端和服务端</p>
</li>
</ul>
<blockquote>
<p>我主要需要关闭我们创建EventLoopGroup，我们可以通过<code>shutdownGracefully</code>方法来优雅地关闭。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Future&lt;?&gt; shutdownGracefully(<span class="hljs-type">long</span> quietPeriod, <span class="hljs-type">long</span> timeout, TimeUnit unit) &#123;<br>    <span class="hljs-keyword">for</span> (EventExecutor l: children) &#123;<br>        l.shutdownGracefully(quietPeriod, timeout, unit);<br>    &#125;<br>    <span class="hljs-keyword">return</span> terminationFuture();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="重新认识字节"><a href="#重新认识字节" class="headerlink" title="重新认识字节"></a>重新认识字节</h3><blockquote>
<p>The byte is a unit of digital information that most commonly consists of eight bits. Historically, the byte was the number of bits used to encode a single character of text in a computer and for this reason it is the smallest addressable unit of memory in many computer architectures<br>记住：8 bit &#x3D; 1 byte</p>
</blockquote>
<p>为啥说重新认识了字节，因为自己在学习ByteBuf的时候犯了一些低级的错误（单元测试将呈现我的低级错误），反应出来自己的基础还是不够牢固。<br>下面这通过练习的例子，来认识一下Netty强大的字节容器：ByteBuff</p>
<blockquote>
<p>ByteBuff，实现原理有两个索引指针，一个用于读取（readerIndex），一个用于写入（writerIndex）。</p>
</blockquote>
<p>下面的例子详细说，不同ByteBuff的使用模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteBuffExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HI_BYTE_BUFF</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hi! ByteBuff.&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">heapBuff</span> <span class="hljs-operator">=</span> Unpooled.copiedBuffer(HI_BYTE_BUFF, CharsetUtil.UTF_8);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">UTF_8</span> <span class="hljs-operator">=</span> CharsetUtil.UTF_8;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 堆缓冲区</span><br>        System.out.println(<span class="hljs-string">&quot;==================heap buff==================&quot;</span>);<br>        heapByteBuff();<br>        System.out.println(<span class="hljs-string">&quot;==================direct buff==================&quot;</span>);<br>        directByteBuff();<br>        System.out.println(<span class="hljs-string">&quot;==================composite buff==================&quot;</span>);<br>        compositeByteBuff();<br>        System.out.println(<span class="hljs-string">&quot;==================read and write==================&quot;</span>);<br>        readAndWrite();<br>        System.out.println(<span class="hljs-string">&quot;==================ByteBufHolder==================&quot;</span>);<br>        byteBuffHolder();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存储在 JVM 堆空间中，这种模式被成为支撑数据（backing array）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapByteBuff</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (heapBuff.hasArray()) &#123;<br>            <span class="hljs-type">byte</span>[] array = heapBuff.array();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> heapBuff.arrayOffset() + heapBuff.readerIndex();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> heapBuff.readableBytes();<br>            <span class="hljs-type">byte</span>[] target = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>            System.arraycopy(array, offset, target, <span class="hljs-number">0</span>, length);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(target));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 直接缓冲区是另外一种ByteBuf模式。</span><br><span class="hljs-comment">     * 我们期望用于对象创建的内存分配永远都来自于堆中，</span><br><span class="hljs-comment">     * 但这并不是必须的——NIO在JDK1.4中引入的ByteBuffer类允许JVM实现通过本地调用来分配内存。</span><br><span class="hljs-comment">     * 这主要是为了避免在每次调用本地I/O操作之前（或者之后）</span><br><span class="hljs-comment">     * 将缓冲区的内容复制到一个中间缓冲区（或者从中间缓冲区把内容复制到缓冲区）。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 它的缺点主要：</span><br><span class="hljs-comment">     * 1. 分配和释放表昂贵</span><br><span class="hljs-comment">     * 2. 如果在处理预留代码的时候，可能不得不又复制一遍。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 建议：如果在知道数据将被作为数据来访问的时候，我们更加推荐使用 堆内存 。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">directByteBuff</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">directBuffer</span> <span class="hljs-operator">=</span> Unpooled.directBuffer().writeBytes(heapBuff);<br>        <span class="hljs-comment">// 检查buf是否有数组，如果不是，则说明一个直接堆缓冲区</span><br>        <span class="hljs-keyword">if</span> (!directBuffer.hasArray()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readerIndex</span> <span class="hljs-operator">=</span> directBuffer.readerIndex();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> directBuffer.readableBytes();<br>            <span class="hljs-type">byte</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>            directBuffer.getBytes(readerIndex, array);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(array));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 复合缓冲区，它提供一种聚合模式给我们使用。例如我需要组合一个协议，</span><br><span class="hljs-comment">     * 我们需要一部分装配头部信息，一部分装配主体信息。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compositeByteBuff</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CompositeByteBuf</span> <span class="hljs-variable">compositeByteBuf</span> <span class="hljs-operator">=</span> Unpooled.compositeBuffer();<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">headBuf</span> <span class="hljs-operator">=</span> Unpooled.copiedBuffer(<span class="hljs-string">&quot;Hi! &quot;</span>, CharsetUtil.UTF_8);<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">bodyBuf</span> <span class="hljs-operator">=</span> Unpooled.copiedBuffer(<span class="hljs-string">&quot;ByteBuff.&quot;</span>, CharsetUtil.UTF_8);<br>        compositeByteBuf.addComponents(headBuf, bodyBuf);<br>        System.out.println(<span class="hljs-string">&quot;compositeByteBuf.removeComponent(0) before:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (ByteBuf byteBuf : compositeByteBuf) &#123;<br>            System.out.println(byteBuf.toString(CharsetUtil.UTF_8));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;compositeByteBuf.removeComponent(0) after:&quot;</span>);<br>        compositeByteBuf.removeComponent(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (ByteBuf byteBuf : compositeByteBuf) &#123;<br>            System.out.println(byteBuf.toString(CharsetUtil.UTF_8));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主要是一些字节操作API的使用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readAndWrite</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> Unpooled.copiedBuffer(HI_BYTE_BUFF, CharsetUtil.UTF_8);<br>        System.out.println(byteBuf.toString(CharsetUtil.UTF_8));<br>        <span class="hljs-comment">// slice，分片，但是不会修改索引信息</span><br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">slice</span> <span class="hljs-operator">=</span> byteBuf.slice(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 拷贝操作，不影响原对象</span><br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> byteBuf.copy(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">assert</span> !ByteBufUtil.equals(slice, copy);<br>        System.out.println(slice.toString(CharsetUtil.UTF_8));<br>        byteBuf.setByte(<span class="hljs-number">0</span>, ((<span class="hljs-type">byte</span>) <span class="hljs-string">&#x27;J&#x27;</span>));<br>        copy.setByte(<span class="hljs-number">0</span>, ((<span class="hljs-type">byte</span>) <span class="hljs-string">&#x27;W&#x27;</span>));<br>        <span class="hljs-keyword">assert</span> byteBuf.getByte(<span class="hljs-number">0</span>) == slice.getByte(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">assert</span> copy.getByte(<span class="hljs-number">0</span>) != byteBuf.getByte(<span class="hljs-number">0</span>);<br>        System.out.println(((<span class="hljs-type">char</span>) byteBuf.getByte(<span class="hljs-number">0</span>)));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readerIndex</span> <span class="hljs-operator">=</span> byteBuf.readerIndex();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">writerIndex</span> <span class="hljs-operator">=</span> byteBuf.writerIndex();<br>        byteBuf.setByte(<span class="hljs-number">1</span>, ((<span class="hljs-type">byte</span>) <span class="hljs-string">&#x27;B&#x27;</span>));<br>        System.out.println(((<span class="hljs-type">char</span>) byteBuf.getByte(<span class="hljs-number">1</span>)));<br>        <span class="hljs-type">assert</span> <span class="hljs-variable">readerIndex</span> <span class="hljs-operator">=</span>= byteBuf.readerIndex();<br>        <span class="hljs-type">assert</span> <span class="hljs-variable">writerIndex</span> <span class="hljs-operator">=</span>= byteBuf.writerIndex();<br>        <span class="hljs-comment">// 写一个字节，将会影响writerIndex索引。</span><br>        byteBuf.writeByte(((<span class="hljs-type">byte</span>) <span class="hljs-string">&#x27;?&#x27;</span>));<br>        <span class="hljs-type">assert</span> <span class="hljs-variable">readerIndex</span> <span class="hljs-operator">=</span>= byteBuf.readerIndex();<br>        <span class="hljs-keyword">assert</span> writerIndex != byteBuf.writerIndex();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">byteBuffHolder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBufHolder</span> <span class="hljs-variable">byteBufHolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultByteBufHolder</span>(Unpooled.copiedBuffer(HI_BYTE_BUFF, UTF_8));<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> byteBufHolder.copy().content();<br>        content.setByte(<span class="hljs-number">0</span>, ((<span class="hljs-type">byte</span>) <span class="hljs-string">&#x27;W&#x27;</span>));<br>        System.out.println(<span class="hljs-string">&quot;source: &quot;</span> + ((<span class="hljs-type">char</span>) heapBuff.getByte(<span class="hljs-number">0</span>)));<br>        System.out.println(<span class="hljs-string">&quot;new: &quot;</span> + ((<span class="hljs-type">char</span>) content.getByte(<span class="hljs-number">0</span>)));<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="解码器和编码器"><a href="#解码器和编码器" class="headerlink" title="解码器和编码器"></a>解码器和编码器</h3><h4 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h4><p>总体来说，我们有两种需求：</p>
<ul>
<li>字节解码成消息，常用抽象类：ByteToMessageDecoder extends ChannelInboundHandlerAdapter</li>
<li>消息A解码成消息B，常用抽象类：MessageToMessageDecoder extends ChannelInboundHandlerAdapter<br>它们都是继承 ChannelInboundHandlerAdapter，又是熟悉的味道，这个又是得益Netty统一的设计。<br>流程图如下：<br><img src="https://s2.ax1x.com/2020/02/07/1gv0E9.png" alt="1gv0E9.png"></li>
</ul>
<h4 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h4><p>总体来说，我们有两种需求：</p>
<ul>
<li>消息编码成消息，常用抽象类：MessageToByteEncoder extends ChannelOutboundHandlerAdapter</li>
<li>消息B编码成消息A，常用抽象类：MessageToMessageEncoder extends ChannelOutboundHandlerAdapter<br>它们都是继承了ChannelOutboundHandlerAdapter。<br>流程图如下：<br><img src="https://s2.ax1x.com/2020/02/07/1gzNTJ.png" alt="1gzNTJ.png"></li>
</ul>
<h4 id="抽象的编解码类"><a href="#抽象的编解码类" class="headerlink" title="抽象的编解码类"></a>抽象的编解码类</h4><p>很多时候，编解码是一对，我们就想着为啥不能直接设置成一个类？Netty给我们，预设Codec。</p>
<ul>
<li>字节编解码成消息，ByteToMessageCodec extend ChannelDuplexHandler</li>
<li>消息编解码成消息，MessageToMessageCodec extend ChannelDuplexHandler<br>ChannelDuplexHandler extends ChannelInboundHandlerAdapter implements ChannelOutboundHandler</li>
</ul>
<h4 id="HttpObjectAggregator-源码分析"><a href="#HttpObjectAggregator-源码分析" class="headerlink" title="HttpObjectAggregator 源码分析"></a>HttpObjectAggregator 源码分析</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HttpObjectAggregator<br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageAggregator</span>&lt;HttpObject, HttpMessage, HttpContent, FullHttpMessage&gt;<br></code></pre></td></tr></table></figure>

<p>核心逻辑其实是在 MessageAggregator 中 decode 方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ChannelHandlerContext ctx, I msg, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">assert</span> aggregating;<br>        <span class="hljs-comment">// HttpObjectAggregator.isStartMessage:</span><br>        <span class="hljs-comment">// return msg instanceof HttpMessage;</span><br>        <span class="hljs-keyword">if</span> (isStartMessage(msg)) &#123;<br>            handlingOversizedMessage = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (currentMessage != <span class="hljs-literal">null</span>) &#123;<br>                currentMessage.release();<br>                currentMessage = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageAggregationException</span>();<br>            &#125;<br><br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">S</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (S) msg;<br><br>            <span class="hljs-comment">// Send the continue response if necessary (e.g. &#x27;Expect: 100-continue&#x27; header)</span><br>            <span class="hljs-comment">// Check before content length. Failing an expectation may result in a different response being sent.</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">continueResponse</span> <span class="hljs-operator">=</span> newContinueResponse(m, maxContentLength, ctx.pipeline());<br>            <span class="hljs-keyword">if</span> (continueResponse != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// Cache the write listener for reuse.</span><br>                <span class="hljs-comment">// 缓存起来监听器方便重用，监听器作用：如果调用不成功，则调用fireExceptionCaught方法，抛出异常</span><br>                <span class="hljs-type">ChannelFutureListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> continueResponseWriteListener;<br>                <span class="hljs-keyword">if</span> (listener == <span class="hljs-literal">null</span>) &#123;<br>                    continueResponseWriteListener = listener = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelFutureListener</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationComplete</span><span class="hljs-params">(ChannelFuture future)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-keyword">if</span> (!future.isSuccess()) &#123;<br>                                ctx.fireExceptionCaught(future.cause());<br>                            &#125;<br>                        &#125;<br>                    &#125;;<br>                &#125;<br><br>                <span class="hljs-comment">// Make sure to call this before writing, otherwise reference counts may be invalid.</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">closeAfterWrite</span> <span class="hljs-operator">=</span> closeAfterContinueResponse(continueResponse);<br>                handlingOversizedMessage = ignoreContentAfterContinueResponse(continueResponse);<br><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> ctx.writeAndFlush(continueResponse).addListener(listener);<br><br>                <span class="hljs-keyword">if</span> (closeAfterWrite) &#123;<br>                    future.addListener(ChannelFutureListener.CLOSE);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (handlingOversizedMessage) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isContentLengthInvalid(m, maxContentLength)) &#123;<br>                <span class="hljs-comment">// if content length is set, preemptively close if it&#x27;s too large</span><br>                invokeHandleOversizedMessage(ctx, m);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (m <span class="hljs-keyword">instanceof</span> DecoderResultProvider &amp;&amp; !((DecoderResultProvider) m).decoderResult().isSuccess()) &#123;<br>                O aggregated;<br>                <span class="hljs-keyword">if</span> (m <span class="hljs-keyword">instanceof</span> ByteBufHolder) &#123;<br>                    <span class="hljs-comment">// retain方法：将引用增加+1（Netty中，如果引用值为0，则会被回收），以防止被回收</span><br>                    <span class="hljs-comment">// 开始聚合操作由子类实现对应的操作</span><br>                    aggregated = beginAggregation(m, ((ByteBufHolder) m).content().retain());<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    aggregated = beginAggregation(m, EMPTY_BUFFER);<br>                &#125;<br>                <span class="hljs-comment">// 完成聚合操作，finishAggregation0 中调用了 finishAggregation,其中finishAggregation由子类实现。</span><br>                <span class="hljs-comment">// HttpObjectAggregator中实现了，增加了rfc2616 14.13 Content-Length 判断，如果没有响应体头部那样设置 &#x27;Content-Length&#x27;，则根据 aggregated.content().readableBytes() 设置一个值</span><br>                finishAggregation0(aggregated);<br>                out.add(aggregated);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// A streamed message - initialize the cumulative buffer, and wait for incoming chunks.</span><br>            <span class="hljs-type">CompositeByteBuf</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> ctx.alloc().compositeBuffer(maxCumulationBufferComponents);<br>            <span class="hljs-keyword">if</span> (m <span class="hljs-keyword">instanceof</span> ByteBufHolder) &#123;<br>                appendPartialContent(content, ((ByteBufHolder) m).content());<br>            &#125;<br>            currentMessage = beginAggregation(m, content);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isContentMessage(msg)) &#123;<br>            <span class="hljs-keyword">if</span> (currentMessage == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// it is possible that a TooLongFrameException was already thrown but we can still discard data</span><br>                <span class="hljs-comment">// until the begging of the next request/response.</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Merge the received chunk into the content of the current message.</span><br>            <span class="hljs-type">CompositeByteBuf</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> (CompositeByteBuf) currentMessage.content();<br><br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">C</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (C) msg;<br>            <span class="hljs-comment">// Handle oversized message.</span><br>            <span class="hljs-keyword">if</span> (content.readableBytes() &gt; maxContentLength - m.content().readableBytes()) &#123;<br>                <span class="hljs-comment">// By convention, full message type extends first message type.</span><br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                <span class="hljs-type">S</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (S) currentMessage;<br>                invokeHandleOversizedMessage(ctx, s);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Append the content of the chunk.</span><br>            appendPartialContent(content, m.content());<br><br>            <span class="hljs-comment">// Give the subtypes a chance to merge additional information such as trailing headers.</span><br>            aggregate(currentMessage, m);<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> last;<br>            <span class="hljs-comment">// 主要判断 是否为 最后的消息了，如果是最后的消息，将进行添加输出列表out中</span><br>            <span class="hljs-keyword">if</span> (m <span class="hljs-keyword">instanceof</span> DecoderResultProvider) &#123;<br>                <span class="hljs-type">DecoderResult</span> <span class="hljs-variable">decoderResult</span> <span class="hljs-operator">=</span> ((DecoderResultProvider) m).decoderResult();<br>                <span class="hljs-keyword">if</span> (!decoderResult.isSuccess()) &#123;<br>                    <span class="hljs-keyword">if</span> (currentMessage <span class="hljs-keyword">instanceof</span> DecoderResultProvider) &#123;<br>                        ((DecoderResultProvider) currentMessage).setDecoderResult(<br>                                DecoderResult.failure(decoderResult.cause()));<br>                    &#125;<br>                    last = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    last = isLastContentMessage(m);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                last = isLastContentMessage(m);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (last) &#123;<br>                finishAggregation0(currentMessage);<br><br>                <span class="hljs-comment">// All done</span><br>                out.add(currentMessage);<br>                currentMessage = <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageAggregationException</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<h3 id="不可被忽略的单元测试"><a href="#不可被忽略的单元测试" class="headerlink" title="不可被忽略的单元测试"></a>不可被忽略的单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AbsIntegerEncoder 测试类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-02 21:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsIntegerEncoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToMessageEncoder</span>&lt;ByteBuf&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf msg, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-comment">// 这里就是我犯下的低级错误，当时没有想明白，为啥是4呢？</span><br>            <span class="hljs-comment">// 如果我们知道int是占4个字节，就很容易理解了。</span><br>            <span class="hljs-comment">// 也是从这里，让我反思。</span><br>        <span class="hljs-keyword">while</span> (msg.readableBytes() &gt;= <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Math.abs(msg.readInt());<br>            out.add(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsIntegerEncoderTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAbsIntegerEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            byteBuf.writeInt(i * -<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AbsIntegerEncoder</span>());<br>        Assert.assertTrue(channel.writeOutbound(byteBuf));<br>        Assert.assertTrue(channel.finish());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Assert.assertEquals(i, ((<span class="hljs-type">int</span>) channel.readOutbound()));<br>        &#125;<br>        Assert.assertNull(channel.readOutbound());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义待测试待 解码器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-02 20:56</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedLengthFrameDecoder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageDecoder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> frameLength;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FixedLengthFrameDecoder</span><span class="hljs-params">(<span class="hljs-type">int</span> frameLength)</span> &#123;<br>        <span class="hljs-keyword">if</span> (frameLength &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;frameLength must be a positive integer: &quot;</span> + frameLength);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.frameLength = frameLength;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">while</span> (in.readableBytes() &gt;= frameLength) &#123;<br>            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> in.readBytes(frameLength);<br>            out.add(buf);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrameChunkDecoderTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFrameChunkDecoderException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> Unpooled.buffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            byteBuf.writeByte(i);<br>        &#125;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> byteBuf.duplicate();<br>        <span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FrameChunkDecoder</span>(<span class="hljs-number">3</span>));<br>        Assert.assertTrue(channel.writeInbound(input.readBytes(<span class="hljs-number">2</span>)));<br>        <span class="hljs-keyword">try</span> &#123;<br>            channel.writeInbound(input.readBytes(<span class="hljs-number">4</span>));<br>            Assert.fail();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Assert.assertTrue(e <span class="hljs-keyword">instanceof</span> TooLongFrameException);<br>        &#125;<br>        Assert.assertTrue(channel.writeInbound(input.readBytes(<span class="hljs-number">3</span>)));<br><br>        Assert.assertTrue(channel.finish());<br><br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.readInbound();<br>        Assert.assertEquals(byteBuf.readSlice(<span class="hljs-number">2</span>), read);<br>        read.release();<br><br>        read = channel.readInbound();<br>        Assert.assertEquals(byteBuf.skipBytes(<span class="hljs-number">4</span>).readSlice(<span class="hljs-number">3</span>), read);<br>        read.release();<br><br>        Assert.assertNull(channel.readInbound());<br>        byteBuf.release();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="使用WebSocket"><a href="#使用WebSocket" class="headerlink" title="使用WebSocket"></a>使用WebSocket</h3><blockquote>
<p>WebSocket ，WebSocket协议是完全重新设计的协议，旨在为Web上的双向数据传输问题提供一个切实可行的解决方案，使得客户端和服务器之间可以在任意时刻传输消息，因此，这也就要求它们异步地处理消息回执。</p>
</blockquote>
<p>使用WebSocket实现一个简单的聊天室，总体架构图如下：<br><img src="https://s2.ax1x.com/2020/02/07/12ZsXj.png" alt="12ZsXj.png"><br>服务器的流程图如下：<br><img src="https://s2.ax1x.com/2020/02/07/12Z6ns.png" alt="12Z6ns.png"></p>
<p>大概代码结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs code">src<br>├─main<br>    ├─java<br>        ├─handler<br>            ├─HttpRequestHandler<br>            ├─TextWebSocketFrameHandler<br>        ├─initializer<br>            ├─ChatServerInitializer<br>            ├─SecureChatServerInitializer<br>        ├─server<br>            ├─ChatServer<br>            ├─SecureChatServer<br>    ├─resource<br>    ├─index.html<br>├─test<br>├─pom.xml<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.netty.channel.*;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.*;<br><span class="hljs-keyword">import</span> io.netty.handler.ssl.SslHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.stream.ChunkedNioFile;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><span class="hljs-keyword">import</span> java.net.URISyntaxException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HttpRequestHandler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-05 15:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpRequestHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;FullHttpRequest&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String wsUri;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> File INDEX;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> HttpRequestHandler.class.getProtectionDomain().getCodeSource().getLocation();<br>        String path;<br>        <span class="hljs-keyword">try</span> &#123;<br>            path = location.toURI() + <span class="hljs-string">&quot;index.html&quot;</span>;<br>            path = !path.contains(<span class="hljs-string">&quot;file:&quot;</span>) ? path : path.substring(<span class="hljs-number">5</span>);<br>            INDEX = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>            <span class="hljs-keyword">if</span> (!INDEX.exists()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;path :&quot;</span> + path + <span class="hljs-string">&quot; not found&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException | FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpRequestHandler</span><span class="hljs-params">(String wsUri)</span> &#123;<br>        <span class="hljs-built_in">this</span>.wsUri = wsUri;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, FullHttpRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (wsUri.equalsIgnoreCase(request.uri())) &#123;<br>            ctx.fireChannelRead(request.retain());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (HttpUtil.is100ContinueExpected(request)) &#123;<br>                send100Continue(ctx);<br>            &#125;<br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(INDEX, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHttpResponse</span>(request.protocolVersion(), HttpResponseStatus.OK);<br>            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">keepAlive</span> <span class="hljs-operator">=</span> HttpUtil.isKeepAlive(request);<br>            <span class="hljs-keyword">if</span> (keepAlive) &#123;<br>                response.headers().set(HttpHeaderNames.CONTENT_LENGTH, file.length());<br>                response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);<br>            &#125;<br>            ctx.write(response);<br>            <span class="hljs-keyword">if</span> (ctx.pipeline().get(SslHandler.class) == <span class="hljs-literal">null</span>) &#123;<br>                ctx.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultFileRegion</span>(file.getChannel(), <span class="hljs-number">0</span>, file.length()));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ctx.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChunkedNioFile</span>(file.getChannel()));<br>            &#125;<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);<br>            <span class="hljs-keyword">if</span> (!keepAlive) &#123;<br>                future.addListener(ChannelFutureListener.CLOSE);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send100Continue</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> &#123;<br>        <span class="hljs-type">FullHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultFullHttpResponse</span>(HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE);<br>        ctx.writeAndFlush(response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionCaught</span><span class="hljs-params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        cause.printStackTrace();<br>        ctx.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandlerContext;<br><span class="hljs-keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;<br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TextWebSocketFrameHandler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-05 15:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextWebSocketFrameHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;TextWebSocketFrame&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ChannelGroup group;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextWebSocketFrameHandler</span><span class="hljs-params">(ChannelGroup group)</span> &#123;<br>        <span class="hljs-built_in">this</span>.group = group;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userEventTriggered</span><span class="hljs-params">(ChannelHandlerContext ctx, Object evt)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (evt <span class="hljs-keyword">instanceof</span> WebSocketServerProtocolHandler.HandshakeComplete) &#123;<br>            ctx.pipeline().remove(HttpRequestHandler.class);<br>            group.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextWebSocketFrame</span>(<span class="hljs-string">&quot;Client &quot;</span> + ctx.channel() + <span class="hljs-string">&quot; joined&quot;</span>));<br>            group.add(ctx.channel());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">super</span>.userEventTriggered(ctx, evt);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        group.writeAndFlush(msg.retain());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelPipeline;<br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.example.ws.handler.HttpRequestHandler;<br><span class="hljs-keyword">import</span> io.netty.example.ws.handler.TextWebSocketFrameHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.logging.LogLevel;<br><span class="hljs-keyword">import</span> io.netty.handler.logging.LoggingHandler;<br><span class="hljs-keyword">import</span> io.netty.handler.stream.ChunkedWriteHandler;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ChatServerInitializer</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-05 16:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServerInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ChannelGroup group;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatServerInitializer</span><span class="hljs-params">(ChannelGroup group)</span> &#123;<br>        <span class="hljs-built_in">this</span>.group = group;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ch.pipeline();<br>        pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpServerCodec</span>())<br>                .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChunkedWriteHandler</span>())<br>                .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObjectAggregator</span>(<span class="hljs-number">64</span> * <span class="hljs-number">1024</span>))<br>                .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpRequestHandler</span>(<span class="hljs-string">&quot;/ws&quot;</span>))<br>                .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServerProtocolHandler</span>(<span class="hljs-string">&quot;/ws&quot;</span>))<br>                .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextWebSocketFrameHandler</span>(group))<br>                .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.INFO))<br>        ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.handler.ssl.SslContext;<br><span class="hljs-keyword">import</span> io.netty.handler.ssl.SslHandler;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLEngine;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SecureChatServerInitializer</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-05 21:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureChatServerInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChatServerInitializer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SslContext sslContext;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecureChatServerInitializer</span><span class="hljs-params">(ChannelGroup channelGroup, SslContext sslContext)</span> &#123;<br>        <span class="hljs-built_in">super</span>(channelGroup);<br>        <span class="hljs-built_in">this</span>.sslContext = sslContext;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>.initChannel(ch);<br>        <span class="hljs-type">SSLEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> sslContext.newHandler(ch.alloc()).engine();<br>        engine.setUseClientMode(<span class="hljs-literal">false</span>);<br>        ch.pipeline().addFirst(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SslHandler</span>(engine));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> io.netty.bootstrap.ServerBootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelFuture;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.EventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.group.DefaultChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;<br><span class="hljs-keyword">import</span> io.netty.example.ws.initializer.ChatServerInitializer;<br><span class="hljs-keyword">import</span> io.netty.util.concurrent.ImmediateEventExecutor;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ChatServer</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-05 16:29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelGroup</span> <span class="hljs-variable">channelGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultChannelGroup</span>(ImmediateEventExecutor.INSTANCE);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">bossGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">workGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">private</span> Channel channel;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_PORT</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;port&quot;</span>, <span class="hljs-string">&quot;9999&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(ChatServer.class);<br><br>    <span class="hljs-keyword">protected</span> ChannelFuture <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(SERVER_PORT);<br>        <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>        serverBootstrap.group(bossGroup, workGroup)<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(createInitializer(channelGroup));<br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(port));<br>        future.syncUninterruptibly();<br>        channel = future.channel();<br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>::destroy));<br>        Objects.requireNonNull(future).channel().closeFuture().syncUninterruptibly();<br>        <span class="hljs-keyword">if</span> (future.isSuccess()) &#123;<br>            logger.info(<span class="hljs-string">&quot;Chat Server start, port: &#123;&#125;&quot;</span>, port);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;Chat Server start failed, port: &#123;&#125;&quot;</span>, port);<br>        &#125;<br>        <span class="hljs-keyword">return</span> future;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> ChannelInitializer&lt;Channel&gt; <span class="hljs-title function_">createInitializer</span><span class="hljs-params">(ChannelGroup channelGroup)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatServerInitializer</span>(channelGroup);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) &#123;<br>            channel.close();<br>        &#125;<br>        channelGroup.close();<br>        bossGroup.shutdownGracefully();<br>        workGroup.shutdownGracefully();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatServer</span>().start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.netty.channel.Channel;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.group.ChannelGroup;<br><span class="hljs-keyword">import</span> io.netty.example.ws.initializer.SecureChatServerInitializer;<br><span class="hljs-keyword">import</span> io.netty.handler.ssl.SslContext;<br><span class="hljs-keyword">import</span> io.netty.handler.ssl.SslContextBuilder;<br><span class="hljs-keyword">import</span> io.netty.handler.ssl.util.SelfSignedCertificate;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLException;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SecureChatServer</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> jaryoung.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020-02-05 21:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecureChatServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChatServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SslContext sslContext;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecureChatServer</span><span class="hljs-params">(SslContext sslContext)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sslContext = sslContext;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> ChannelInitializer&lt;Channel&gt; <span class="hljs-title function_">createInitializer</span><span class="hljs-params">(ChannelGroup channelGroup)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureChatServerInitializer</span>(channelGroup, sslContext);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SelfSignedCertificate</span> <span class="hljs-variable">certificate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelfSignedCertificate</span>();<br>            <span class="hljs-type">SslContext</span> <span class="hljs-variable">sslContext</span> <span class="hljs-operator">=</span> SslContextBuilder.forServer(certificate.certificate(), certificate.privateKey()).build();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureChatServer</span>(sslContext).start();<br>        &#125; <span class="hljs-keyword">catch</span> (SSLException | CertificateException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="最后聊聊"><a href="#最后聊聊" class="headerlink" title="最后聊聊"></a>最后聊聊</h2><p>连续差不多两周的学习，通过看书+练习的操作，让自己能够将书上的知识，真的运用起来，并且进一步加深理解。<br>刻意练习真的太重要，如果光看不练，就是纸上谈兵。</p>
]]></content>
      <categories>
        <category>Read</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Study English One Day</title>
    <url>/2020/01/02/Study-English-One-Day/</url>
    <content><![CDATA[<h2 id="2020年立个flat-刻意学习和练习英语"><a href="#2020年立个flat-刻意学习和练习英语" class="headerlink" title="2020年立个flat 刻意学习和练习英语"></a>2020年立个flat 刻意学习和练习英语</h2><blockquote>
<p>跟着《程序员的英语》学起英语来。</p>
</blockquote>
<h2 id="五个基本基本句式"><a href="#五个基本基本句式" class="headerlink" title="五个基本基本句式"></a>五个基本基本句式</h2><h3 id="句式1为【主语-动词（vi）】，是基本句式"><a href="#句式1为【主语-动词（vi）】，是基本句式" class="headerlink" title="句式1为【主语 + 动词（vi）】，是基本句式"></a>句式1为【主语 + 动词（vi）】，是基本句式</h3><blockquote>
<p>vi，不及物动词，不能直接跟宾语，需要一些介词跟着，例如，to，of，at等</p>
</blockquote>
<span id="more"></span>

<p>He made toward the center station.<br>他（He，主语） 向中央车站 走过去（toward，动词）。</p>
<h3 id="句式2为【主语-动词-补语】"><a href="#句式2为【主语-动词-补语】" class="headerlink" title="句式2为【主语 + 动词 + 补语】"></a>句式2为【主语 + 动词 + 补语】</h3><blockquote>
<p>补语，对主语的补充说明</p>
</blockquote>
<p>He will make a good programer.<br>他（He，主语） 将要成为（make，动词） 一名优秀的程序员（programer，补语，对主语他的补充说明）。</p>
<h3 id="句式3为【主语-动词（vt）-宾语】句式2和句式3的区分方式是，如果一般动词可以用be动词代替，则属于句式2，否则是句式3"><a href="#句式3为【主语-动词（vt）-宾语】句式2和句式3的区分方式是，如果一般动词可以用be动词代替，则属于句式2，否则是句式3" class="headerlink" title="句式3为【主语 + 动词（vt） + 宾语】句式2和句式3的区分方式是，如果一般动词可以用be动词代替，则属于句式2，否则是句式3"></a>句式3为【主语 + 动词（vt） + 宾语】句式2和句式3的区分方式是，如果一般动词可以用be动词代替，则属于句式2，否则是句式3</h3><blockquote>
<p>vt 及物动词，能够直接宾语</p>
</blockquote>
<p>Make hay while the sun shines.<br>晒（make，动词） 干草（hay，名词） 需要好太阳（sun，主语）。（寓意，看好时机干活）</p>
<h3 id="句式4为【主语-动词-宾语（间接宾语）-宾语（直接宾语）】"><a href="#句式4为【主语-动词-宾语（间接宾语）-宾语（直接宾语）】" class="headerlink" title="句式4为【主语 + 动词 + 宾语（间接宾语） + 宾语（直接宾语）】"></a>句式4为【主语 + 动词 + 宾语（间接宾语） + 宾语（直接宾语）】</h3><p>He made me the simple dudoku app.<br>他（He，主语） 给我（me，间接宾语） 做（made，动词）了 一个简单的数独app（直接宾语）。</p>
<h3 id="句式5为【主语-动词-宾语-补语】，宾语和补语是可以同时出的。宾补，可以是不定式to、现在分词、过去分词等"><a href="#句式5为【主语-动词-宾语-补语】，宾语和补语是可以同时出的。宾补，可以是不定式to、现在分词、过去分词等" class="headerlink" title="句式5为【主语 + 动词 + 宾语 + 补语】，宾语和补语是可以同时出的。宾补，可以是不定式to、现在分词、过去分词等"></a>句式5为【主语 + 动词 + 宾语 + 补语】，宾语和补语是可以同时出的。宾补，可以是不定式to、现在分词、过去分词等</h3><p>He made her happy.<br>他（He，主语）使（made，动词）她（her，宾语）幸福（happy，补语）</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>String of Java</title>
    <url>/2019/08/25/String-of-Java/</url>
    <content><![CDATA[<h2 id="String-概括"><a href="#String-概括" class="headerlink" title="String 概括"></a>String 概括</h2><blockquote>
<p>string 名次，意思可以翻译为：线，弦，细绳；一串，一行等</p>
</blockquote>
<p>再来看看String的类图，String的value是不是感觉很应景呢？一个个字符，串起来变成我们熟悉的字符串。<br><a href="https://imgchr.com/i/mgkwsH"><img src="https://s2.ax1x.com/2019/08/25/mgkwsH.md.png" alt="mgkwsH.md.png"></a><br>这里有两个关键的field：value和hash。</p>
<span id="more"></span>

<h2 id="String-三连击"><a href="#String-三连击" class="headerlink" title="String 三连击"></a>String 三连击</h2><h3 id="String变量到底存储在哪里？（JDK8"><a href="#String变量到底存储在哪里？（JDK8" class="headerlink" title="String变量到底存储在哪里？（JDK8)"></a>String变量到底存储在哪里？（JDK8)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>通过命令 <code> javap -v StringDemo.class</code> 对编译后的文件进行编码，会看到以下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.hy.study.string.StringDemo<br>  minor version: <span class="hljs-number">0</span><br>  major version: <span class="hljs-number">52</span><br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br>   #<span class="hljs-number">1</span> = Methodref          #<span class="hljs-number">4.</span>#<span class="hljs-number">20</span>         <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   #<span class="hljs-number">2</span> = String             #<span class="hljs-number">16</span>            <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure>

<p>可以看到，<code>hello</code> 这个字符串被存在了常量池（Constant pool）中，那么常量池又会存在哪里呢？</p>
<p>通过下面代码，我们来看看jdk 1.8 的常量池是存在哪一块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-keyword">for</span> (; ; ) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> hello + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt();<br>    hello = tmp;<br>    list.add(tmp.intern());<br>&#125;<br></code></pre></td></tr></table></figure>
<p>jvm参数添加：<code>-Xmx2m -XX:+PrintGCDetails</code> 之后，运行不到一会儿，估计就会有下面的提醒了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.8</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space<br>	at java.util.Arrays.copyOf(Arrays.java:<span class="hljs-number">3332</span>)<br>	at ...<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.7</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space<br>	at java.util.Arrays.copyOf(Arrays.java:<span class="hljs-number">2367</span>)<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.6</span><br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.OutOfMemoryError: PermGen space<br>	at java.lang.String.intern(Native Method)<br></code></pre></td></tr></table></figure>

<p>堆的内存分布：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.8</span><br>Heap<br> PSYoungGen      total 1024K, used 17K [...)<br>  eden space 512K, <span class="hljs-number">3</span>% used [...)<br>  from space 512K, <span class="hljs-number">0</span>% used [...)<br>  to   space 512K, <span class="hljs-number">0</span>% used [...)<br> ParOldGen       total 512K, used 401K [...)<br>  object space 512K, <span class="hljs-number">78</span>% used [...)<br> Metaspace       used 2728K, capacity 4486K, committed 4864K, reserved 1056768K<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">space</span>    used 291K, capacity 386K, committed 512K, reserved 1048576K<br><br><span class="hljs-number">1.7</span><br>Heap<br> PSYoungGen      total 2048K, used 22K [...)<br>  eden space 1024K, <span class="hljs-number">2</span>% used [...)<br>  from space 1024K, <span class="hljs-number">0</span>% used [...)<br>  to   space 1024K, <span class="hljs-number">0</span>% used [...)<br> ParOldGen       total 4096K, used 267K [...)<br>  object space 4096K, <span class="hljs-number">6</span>% used [...)<br> PSPermGen       total 21504K, used 2652K [...)<br>  object space 21504K, <span class="hljs-number">12</span>% used [...)<br><br><span class="hljs-number">1.6</span><br>Heap<br> par <span class="hljs-keyword">new</span> <span class="hljs-title class_">generation</span>   total 1152K, used 41K [...)<br>  eden space 1024K,   <span class="hljs-number">4</span>% used [...)<br>  from space 128K,   <span class="hljs-number">0</span>% used [...)<br>  to   space 128K,   <span class="hljs-number">0</span>% used [...)<br> concurrent mark-sweep generation total 5312K, used 279K [...)<br> concurrent-mark-sweep perm gen total 83968K, used 4693K [...) <br></code></pre></td></tr></table></figure>
<p>我们知道jvm的内存结构，分为，堆、栈、方法区。从上面，我可以看到jdk 1.8 中字符串常量池存在于jvm的堆内存中。<br>综上所诉，可以看到</p>
<blockquote>
<p>注：PermGen space 全程 Permanent Generation space 永久的产生的空间，也就是常说的永久代，在1.8以后已经被Meta space所代替。</p>
</blockquote>
<h3 id="String哪个方法最重要？"><a href="#String哪个方法最重要？" class="headerlink" title="String哪个方法最重要？"></a>String哪个方法最重要？</h3><p>从问题一我们可以知道，字符串是保存到常量池中，但是常量池中保存到字符串是如何快速返回字符串给调用方呢？如果让我来设计，我会将它放在哈希表中，通过合理设计hash函数，使得字符串合理分布在哈希表中，使得我们能迅速获取已经存在常量池中的字符串。<br>下面是String的hashCode方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Cache the hash code for the string */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hash; <span class="hljs-comment">// Default to 0</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hash;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> &amp;&amp; value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span> val[] = value;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>            h = <span class="hljs-number">31</span> * h + val[i];<br>        &#125;<br>        hash = h;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这里最难理解就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; value.length; i++) &#123;<br>    h = <span class="hljs-number">31</span> * h + val[i];<br>&#125;<br>--&gt; s[<span class="hljs-number">0</span>]*<span class="hljs-number">31</span>^(n-<span class="hljs-number">1</span>) + s[<span class="hljs-number">1</span>]*<span class="hljs-number">31</span>^(n-<span class="hljs-number">2</span>) + ... + s[n-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>

<p>这里为啥是<code>31 * h</code><br>根据资料查阅，加上自己的一些理解，我觉得比较合理的解释：</p>
<ul>
<li><p><code>31 * h == (h &lt;&lt; 5) - h</code>，VM优化成位运算，使得计算hash code 性能更好</p>
</li>
<li><p>31 是一个不大不小的奇质数，也可以使得 <code>hashCode</code> 尽可能均匀分布。</p>
</li>
</ul>
<p>除了以上，我们还可以发现一个有趣的地方 <code>if (h == 0 &amp;&amp; value.length &gt; 0)</code> ，这里用到了<em>闪存散列代码（caching the hash code）</em>，无需二次计算 <code>hash code</code>，是一个比较典型空间换时间的应用，它之所以行之有效，其实有一个大前提就是String是final&#x2F;immutable。</p>
<blockquote>
<p>哈希表，搜索的平均时间复杂度为：O(1)，最坏的时间复杂度：O(n)。<br>质数（Prime number），又称素数，指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数（也可定义为只有1与该数本身两个正因数的数）。</p>
</blockquote>
<h3 id="String哪个方法体逻辑最难懂，分享出来。"><a href="#String哪个方法体逻辑最难懂，分享出来。" class="headerlink" title="String哪个方法体逻辑最难懂，分享出来。"></a>String哪个方法体逻辑最难懂，分享出来。</h3><p>个人觉得 <code>split</code> 方法是在String中相对比较难懂。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">/* fastpath if the regex is a</span><br><span class="hljs-comment">         (1)one-char String and this character is not one of the </span><br><span class="hljs-comment">            RegEx&#x27;s meta characters &quot;.$|()[&#123;^?*+\\&quot;, or</span><br><span class="hljs-comment">         (2)two-char String and the first char is the backslash and</span><br><span class="hljs-comment">            the second is not the ascii digit or ascii letter.</span><br><span class="hljs-comment">         */</span><br><span class="hljs-keyword">if</span> (((regex.value.length == <span class="hljs-number">1</span> &amp;&amp;<br>             <span class="hljs-string">&quot;.$|()[&#123;^?*+\\&quot;</span>.indexOf(ch = regex.charAt(<span class="hljs-number">0</span>)) == -<span class="hljs-number">1</span>) ||<br>             (regex.length() == <span class="hljs-number">2</span> &amp;&amp;<br>              regex.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;\\&#x27;</span> &amp;&amp;<br>              (((ch = regex.charAt(<span class="hljs-number">1</span>))-<span class="hljs-string">&#x27;0&#x27;</span>)|(<span class="hljs-string">&#x27;9&#x27;</span>-ch)) &lt; <span class="hljs-number">0</span> &amp;&amp;<br>              ((ch-<span class="hljs-string">&#x27;a&#x27;</span>)|(<span class="hljs-string">&#x27;z&#x27;</span>-ch)) &lt; <span class="hljs-number">0</span> &amp;&amp;<br>              ((ch-<span class="hljs-string">&#x27;A&#x27;</span>)|(<span class="hljs-string">&#x27;Z&#x27;</span>-ch)) &lt; <span class="hljs-number">0</span>)) &amp;&amp;<br>            (ch &lt; Character.MIN_HIGH_SURROGATE ||<br>             ch &gt; Character.MAX_LOW_SURROGATE))<br>        &#123;<br></code></pre></td></tr></table></figure>
<p>这个if语句想判断 <code>regex</code> 是否为 <code>fastpath</code> 而不是正则表达式，否则直接跑下面的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> Pattern.compile(regex).split(<span class="hljs-built_in">this</span>, limit);<br></code></pre></td></tr></table></figure>
<p>所以用这个API的时候，我们最好不要使用 <code>&quot;.$|()[&#123;^?*+\\&quot;</code> 中的字符来进行分割，如果实在要用 需要通过 <code>\\</code> 来转义。举个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;A,b|中,c&quot;</span>;<br><span class="hljs-keyword">for</span> (String word :<br>        s.split(<span class="hljs-string">&quot;\\|&quot;</span>)) &#123;<br>    System.out.println(word);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">A,b<br>中,c<br></code></pre></td></tr></table></figure>
<p>分析完，感觉最困难的<code>       return Pattern.compile(regex).split(this, limit);</code> 并没有分析到，下次如果有深入了解正则表达式的想法可以死磕一波。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.infoq.cn/article/2018/08/java-stringhashcode-plenty">Java 中的 String.hashCode() 方法可能有问题？</a></li>
<li><a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier">why-does-javas-hashcode-in-string-use-31-as-a-multiplier</a></li>
<li><a href="https://segmentfault.com/a/1190000010799123">科普：为什么 String hashCode 方法选择数字31作为乘子</a></li>
<li>Effective Java</li>
<li>数据结构与算法分析 Java语言描述</li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Vagrant 默认是用root账户登陆</title>
    <url>/2021/08/28/Vagrant-default-use-root-login/</url>
    <content><![CDATA[<blockquote>
<p>本文不讨论，通过账号密码登陆的登陆的方式，因为我所在版本【Vagrant 2.2.9】，就算通过config-ssh-insert_key&#x3D;false，也无法通过免<strong>输入</strong>密码的方式登陆</p>
</blockquote>
<span id="more"></span>


<h1 id="vagrant账户登陆的苦恼"><a href="#vagrant账户登陆的苦恼" class="headerlink" title="vagrant账户登陆的苦恼"></a>vagrant账户登陆的苦恼</h1><p>每次通过 <code>vagrant ssh</code>  命令登陆之后，默认使用的<code>vagrant</code>的账户，有时候我需要操作一些命令需要 <code>root</code> 的用户权限才可以操作，</p>
<p>很自然我们就会想道通过<code>suod -i</code> 切换到的root账号上，再来执行对应的命令操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vagrant ssh<br><br>yum install xxx<br><span class="hljs-comment"># 提醒没有权限</span><br><br>sudo -i<br><br>yum install xxx<br><span class="hljs-comment"># 安装成功</span><br></code></pre></td></tr></table></figure>

<h1 id="也许版本有坑？"><a href="#也许版本有坑？" class="headerlink" title="也许版本有坑？"></a>也许版本有坑？</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Mac OS 11.4<br>vagrant --version<br>Vagrant 2.2.9<br></code></pre></td></tr></table></figure>

<p>网上一顿搜索，找到很多帖子，但是很多人都是说明自己的使用的哪个版本的<br>所以很多帖子，都可能有点过期，反正找了一大圈，没有找到合适的解决方案；<br>建议查看本文的时候，看看你们的版本是否已经高于我的版本，如果高于或者低于2.x这个版本的可能本文就不太适用，大家另辟蹊径吧。</p>
<h1 id="完美解决"><a href="#完美解决" class="headerlink" title="完美解决"></a>完美解决</h1><h2 id="第一步，将本地公钥文件同步到虚拟机"><a href="#第一步，将本地公钥文件同步到虚拟机" class="headerlink" title="第一步，将本地公钥文件同步到虚拟机"></a>第一步，将本地公钥文件同步到虚拟机</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br>ssh-rsa AAAAB3NzaC1y....<br><br><span class="hljs-comment"># 如果没有到公私钥匙到话，就通过 ssh-keygen 生成一对吧。</span><br></code></pre></td></tr></table></figure>

<h2 id="第二步，登陆虚拟机"><a href="#第二步，登陆虚拟机" class="headerlink" title="第二步，登陆虚拟机"></a>第二步，登陆虚拟机</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vagrant ssh<br>sudo -i<br><br>[root@localhost ~]<span class="hljs-comment"># 需要注意看到，已经变成root@xxx才算切换成功喔。</span><br><br><span class="hljs-built_in">cd</span> /etc/ssh/<br><br>vi sshd_config<br><br><span class="hljs-comment">#PermitRootLogin yes</span><br>修改成<br>PermitRootLogin <span class="hljs-built_in">yes</span> <span class="hljs-comment"># 代表允许root用户登陆</span><br><br><span class="hljs-built_in">mkdir</span> /root/.ssh<br><span class="hljs-built_in">chmod</span> -R go= ~/.ssh<br><span class="hljs-built_in">chown</span> -R root:root ~/.ssh<br><span class="hljs-built_in">cd</span> /root/.ssh<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;ssh-rsa AAAAB3NzaC1y....你对公钥&#x27;</span> &gt;&gt; authorized_keys<br></code></pre></td></tr></table></figure>

<h2 id="第四步，验证公钥登陆是否生效"><a href="#第四步，验证公钥登陆是否生效" class="headerlink" title="第四步，验证公钥登陆是否生效"></a>第四步，验证公钥登陆是否生效</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh root@127.0.0.1 -p22230 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null<br><br>[root@localhost ~]<span class="hljs-comment">#</span><br><br>如果看到这里，基本可以说明我们已经修改成功了<br></code></pre></td></tr></table></figure>

<h2 id="第五步，修改vagrant配置文件"><a href="#第五步，修改vagrant配置文件" class="headerlink" title="第五步，修改vagrant配置文件"></a>第五步，修改vagrant配置文件</h2><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">config.ssh.username</span> = <span class="hljs-string">&#x27;root&#x27;</span><br><span class="hljs-attr">config.ssh.private_key_path</span> = <span class="hljs-string">&#x27;~/.ssh/id_rsa&#x27;</span><br></code></pre></td></tr></table></figure>

<h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vagrant reload centos7<br><br><span class="hljs-comment"># 如果没有意外，重启一下服务，将默认通过root对账户进行登陆了。</span><br>vagrant ssh<br><br><span class="hljs-comment"># 当然通过其他的ssh客户端也是可以直接登陆上去</span><br><span class="hljs-comment"># 如果有下面的日志，也不要惊慌，稍等一会儿看看，是否最终能够登陆成</span><br>    centos7: Warning: Connection reset. Retrying...<br>    centos7: Warning: Remote connection disconnect. Retrying...<br></code></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtwnze31rej60xb0u078b02.jpg" alt="Vagrant%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8root%E7%99%BB%E9%99%86%2004f5ec4a47414212bd73d14b1b5fa1a2/Untitled.png"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtwnzf2p1yj612804gaaq02.jpg" alt="Vagrant%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8root%E7%99%BB%E9%99%86%2004f5ec4a47414212bd73d14b1b5fa1a2/Untitled%201.png"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtwnzelc7mj60z609o74w02.jpg" alt="Vagrant%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8root%E7%99%BB%E9%99%86%2004f5ec4a47414212bd73d14b1b5fa1a2/Untitled%202.png"></p>
<h1 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h1><p>有时候，找问题的时候，可以发散一下思维，不要老钻牛角尖，往往得不偿失。</p>
<p>例如，这一次，我找问题的思路一开始是这样子的。</p>
<p>1，一直觉得是vagrant的问题，一直搜索vagrant相关的内容</p>
<p>2，后来发现，我虚拟机使用Linux的厂商是centos7，能不能直接通过centos来解决，最后才找到正确之路</p>
<p>3，如果一直在纠结在vagrant的问题，最后可能一天都没有找到对应的解决思路</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-centos7">How To Set Up SSH Keys on CentOS 7 | DigitalOcean</a></p>
<p><a href="https://www.vagrantup.com/docs/vagrantfile/ssh_settings">config.ssh - Vagrantfile | Vagrant by HashiCorp</a></p>
]]></content>
      <tags>
        <tag>Visual box</tag>
        <tag>Vagrant</tag>
        <tag>Linux</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器 (Vim)（转载）</title>
    <url>/2022/02/19/editors-vim/</url>
    <content><![CDATA[<h1 id="题外话："><a href="#题外话：" class="headerlink" title="题外话："></a>题外话：</h1><blockquote>
<p>发现一篇非常适合小白的Vim教程，跟着来学，一天就可以上手啦。坚持练习20个小时，基本可以跟老的编辑工具效率差不多，如果能够坚持下来，所有的IDE都适用Vim插件，或者使用Vim进行开发，就有不一样的感觉。<br>例如，当前文章的编写，我就是完成在VS Code的使用Vim的插件，编写的文章。</p>
</blockquote>
<p><strong>记得练习一定要做喔，不好偷懒，一起加油吧。</strong></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写作和写代码其实是两项非常不同的活动。当我们编程的时候，会经常在文件间进行切换、阅读、浏览和修改代码，而不是连续编写一大段的文字。因此代码编辑器和文本编辑器是很不同的两种工具（例如微软的 Word 与 Visual Studio Code）</p>
<p>作为程序员，我们大部分时间都花在代码编辑上，所以花点时间掌握某个适合自己的编辑器是非常值得的。通常学习使用一个新的编辑器包含以下步骤：</p>
<ul>
<li>阅读教程（比如这节课以及我们为您提供的资源）</li>
<li>坚持使用它来完成你所有的编辑工作（即使一开始这会让你的工作效率降低）</li>
<li>随时查阅：如果某个操作看起来像是有更方便的实现方法，一般情况下真的会有。</li>
</ul>
<p>如果您能够遵循上述步骤，并且坚持使用新的编辑器完成您所有的文本编辑任务，那么学习一个复杂的代码编辑器的过程一般是这样的：头两个小时，您会学习到编辑器的基本操作，例如打开和编辑文件、保存与退出、浏览缓冲区。当学习时间累计达到20个小时之后，您使用新编辑器的效率应该已经和使用老编辑器一样快。在此之后，其益处开始显现：有了足够的知识和肌肉记忆后，使用新编辑器将大大节省你的时间。而现代文本编辑器都是些复杂且强大的工具，永远有新东西可学：学的越多，效率越高。</p>
<h1 id="该学哪个编辑器？"><a href="#该学哪个编辑器？" class="headerlink" title="该学哪个编辑器？"></a>该学哪个编辑器？</h1><p>程序员们对自己正在使用的文本编辑器通常有着 <a href="https://en.wikipedia.org/wiki/Editor_war">非常强的执念</a>。</p>
<p>现在最流行的编辑器是什么？<a href="https://insights.stackoverflow.com/survey/2019/#development-environments-and-tools">Stack Overflow的调查</a>(这个调查可能并不如我们想象的那样客观，因为Stack Overflow 的用户并不能代表所有程序员)显示，<a href="https://code.visualstudio.com/">Visual Studio Code</a>是目前最流行的代码编辑器。而<a href="https://www.vim.org/">Vim</a> 则是最流行的基于命令行的编辑器。</p>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>这门课的所有教员都使用Vim作为编辑器。Vim有着悠久历史；它始于1976年的Vi编辑器，到现在还在 不断开发中。Vim有很多聪明的设计思想，所以很多其他工具也支持Vim模式（比如，140万人安装了 <a href="https://github.com/VSCodeVim/Vim">Vim emulation for VS code</a>）。即使你最后使用 其他编辑器，Vim也值得学习。</p>
<p>由于不可能在50分钟内教授Vim的所有功能，我们会专注于解释Vim的设计哲学，教你基础知识， 并展示一部分高级功能，然后给你掌握这个工具所需要的资源。</p>
<h1 id="Vim的哲学"><a href="#Vim的哲学" class="headerlink" title="Vim的哲学"></a>Vim的哲学</h1><p>在编程的时候，你会把大量时间花在阅读&#x2F;编辑而不是在写代码上。所以，Vim 是一个_多模态_编辑 器：它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名） 是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用 上下左右键因为那样需要太多的手指移动。</p>
<p>这样的设计哲学使得 Vim 成为了一个能跟上你思维速度的编辑器。</p>
<h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><p>Vim的设计以大多数时间都花在阅读、浏览和进行少量编辑改动为基础，因此它具有多种操作模式：</p>
<ul>
<li><em>正常模式</em>：在文件中四处移动光标进行修改</li>
<li><em>插入模式</em>：插入文本</li>
<li><em>替换模式</em>：替换文本</li>
<li><em>可视化（一般，行，块）模式</em>：选中文本块</li>
<li><em>命令模式</em>：用于执行命令</li>
</ul>
<p>在不同的操作模式下，键盘敲击的含义也不同。比如，<code>x</code> 在插入模式会插入字母<code>x</code>，但是在正常模式 会删除当前光标所在的字母，在可视模式下则会删除选中文块。</p>
<p>在默认设置下，Vim会在左下角显示当前的模式。 Vim启动时的默认模式是正常模式。通常你会把大部分 时间花在正常模式和插入模式。</p>
<p>你可以按下 <code>&lt;ESC&gt;</code> （退出键） 从任何其他模式返回正常模式。 在正常模式，键入 <code>i</code> 进入插入 模式， <code>R</code> 进入替换模式， <code>v</code> 进入可视（一般）模式， <code>V</code> 进入可视（行）模式， <code>&lt;C-v&gt;</code> （Ctrl-V, 有时也写作 <code>^V</code>）进入可视（块）模式， <code>:</code> 进入命令模式。</p>
<p>因为你会在使用 Vim 时大量使用 <code>&lt;ESC&gt;</code> 键，所以可以考虑把大小写锁定键重定义成 <code>&lt;ESC&gt;</code> 键 （<a href="https://vim.fandom.com/wiki/Map_caps_lock_to_escape_in_macOS">MacOS 教程</a> ）。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h2><p>在正常模式，键入 <code>i</code> 进入插入模式。现在 Vim 跟很多其他的编辑器一样，直到你键入<code>&lt;ESC&gt;</code> 返回正常模式。 你只需要掌握这一点和上面介绍的所有基础知识就可以使用 Vim 来编辑文件了 （虽然如果你一直停留在插入模式内不一定高效）。</p>
<h2 id="缓存，-标签页，-窗口"><a href="#缓存，-标签页，-窗口" class="headerlink" title="缓存， 标签页， 窗口"></a>缓存， 标签页， 窗口</h2><p>Vim 会维护一系列打开的文件，称为“缓存”。一个 Vim 会话包含一系列标签页，每个标签页包含 一系列窗口（分隔面板）。每个窗口显示一个缓存。跟网页浏览器等其他你熟悉的程序不一样的是， 缓存和窗口不是一一对应的关系；窗口只是视角。一个缓存可以在_多个_窗口打开，甚至在同一 个标签页内的多个窗口打开。这个功能其实很好用，比如在查看同一个文件的不同部分的时候。</p>
<p>Vim 默认打开一个标签页，这个标签也包含一个窗口。</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>在正常模式下键入 <code>:</code> 进入命令行模式。 在键入 <code>:</code> 后，你的光标会立即跳到屏幕下方的命令行。 这个模式有很多功能，包括打开，保存，关闭文件，以及 <a href="https://twitter.com/iamdevloper/status/435555976687923200">退出 Vim</a>。</p>
<ul>
<li><p><code>:q</code> 退出（关闭窗口）</p>
</li>
<li><p><code>:w</code> 保存（写）</p>
</li>
<li><p><code>:wq</code> 保存然后退出</p>
</li>
<li><p><code>:e &#123;文件名&#125;</code> 打开要编辑的文件</p>
</li>
<li><p><code>:ls</code> 显示打开的缓存</p>
</li>
<li><p><code>:help &#123;标题&#125;</code><br>打开帮助文档</p>
<ul>
<li><code>:help :w</code> 打开 <code>:w</code> 命令的帮助文档</li>
<li><code>:help w</code> 打开 <code>w</code> 移动的帮助文档</li>
</ul>
</li>
</ul>
<h1 id="Vim-的接口其实是一种编程语言"><a href="#Vim-的接口其实是一种编程语言" class="headerlink" title="Vim 的接口其实是一种编程语言"></a>Vim 的接口其实是一种编程语言</h1><p>Vim 最重要的设计思想是 Vim 的界面本身是一个程序语言。键入操作 （以及他们的助记名） 本身是命令， 这些命令可以组合使用。 这使得移动和编辑更加高效，特别是一旦形成肌肉记忆。</p>
<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>多数时候你会在正常模式下，使用移动命令在缓存中导航。在 Vim 里面移动也被称为 “名词”， 因为它们指向文字块。</p>
<ul>
<li><p>基本移动: <code>hjkl</code> （左， 下， 上， 右）</p>
</li>
<li><p>词： <code>w</code> （下一个词）， <code>b</code> （词初）， <code>e</code> （词尾）</p>
</li>
<li><p>行： <code>0</code> （行初）， <code>^</code> （第一个非空格字符）， <code>$</code> （行尾）</p>
</li>
<li><p>屏幕： <code>H</code> （屏幕首行）， <code>M</code> （屏幕中间）， <code>L</code> （屏幕底部）</p>
</li>
<li><p>翻页： <code>Ctrl-u</code> （上翻）， <code>Ctrl-d</code> （下翻）</p>
</li>
<li><p>文件： <code>gg</code> （文件头）， <code>G</code> （文件尾）</p>
</li>
<li><p>行数： <code>:&#123;行数&#125;&lt;CR&gt;</code> 或者 <code>&#123;行数&#125;G</code> ({行数}为行数)</p>
</li>
<li><p>杂项： <code>%</code> （找到配对，比如括号或者 &#x2F;* *&#x2F; 之类的注释对）</p>
</li>
<li><p>查找：<br><code>f&#123;字符&#125;</code>，  <code>t&#123;字符&#125;</code>  ，  <code>F&#123;字符&#125;</code>  ，<code>T&#123;字符&#125;</code></p>
<ul>
<li>查找&#x2F;到 向前&#x2F;向后 在本行的{字符}</li>
<li><code>,</code> &#x2F; <code>;</code> 用于导航匹配</li>
</ul>
</li>
<li><p>搜索: <code>/&#123;正则表达式&#125;</code>, <code>n</code> &#x2F; <code>N</code> 用于导航匹配</p>
</li>
</ul>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>可视化模式:</p>
<ul>
<li>可视化：<code>v</code></li>
<li>可视化行： <code>V</code></li>
<li>可视化块：<code>Ctrl+v</code></li>
</ul>
<p>可以用移动命令来选中。</p>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>所有你需要用鼠标做的事， 你现在都可以用键盘：采用编辑命令和移动命令的组合来完成。 这就是 Vim 的界面开始看起来像一个程序语言的时候。Vim 的编辑命令也被称为 “动词”， 因为动词可以施动于名词。</p>
<ul>
<li><p><code>i</code></p>
<p>进入插入模式</p>
<ul>
<li>但是对于操纵&#x2F;编辑文本，不单想用退格键完成</li>
</ul>
</li>
<li><p><code>O</code> &#x2F; <code>o</code> 在之上&#x2F;之下插入行</p>
</li>
<li><p><code>&#123;移动命令&#125; </code></p>
<p>删除 {移动命令}</p>
<ul>
<li>例如， <code>dw</code> 删除词, <code>d$</code> 删除到行尾, <code>d0</code> 删除到行头。</li>
</ul>
</li>
<li><p><code>c&#123;移动命令&#125;</code></p>
<p>改变 {移动命令}</p>
<ul>
<li>例如， <code>cw</code> 改变词</li>
<li>比如 <code>d&#123;移动命令&#125;</code> 再 <code>i</code></li>
</ul>
</li>
<li><p><code>x</code> 删除字符（等同于 <code>dl</code>）</p>
</li>
<li><p><code>s</code> 替换字符（等同于 <code>xi</code>）</p>
</li>
<li><p>可视化模式 + 操作</p>
<ul>
<li>选中文字, <code>d</code> 删除 或者 <code>c</code> 改变</li>
</ul>
</li>
<li><p><code>u</code> 撤销, <code>&lt;C-r&gt;</code> 重做</p>
</li>
<li><p><code>y</code> 复制 &#x2F; “yank” （其他一些命令比如 <code>d</code> 也会复制）</p>
</li>
<li><p><code>p</code> 粘贴</p>
</li>
<li><p>更多值得学习的: 比如 <code>~</code> 改变字符的大小写</p>
</li>
</ul>
<h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><p>你可以用一个计数来结合“名词”和“动词”，这会执行指定操作若干次。</p>
<ul>
<li><code>3w</code> 向前移动三个词</li>
<li><code>5j</code> 向下移动5行</li>
<li><code>7dw</code> 删除7个词</li>
</ul>
<h2 id="修饰语"><a href="#修饰语" class="headerlink" title="修饰语"></a>修饰语</h2><p>你可以用修饰语改变“名词”的意义。修饰语有 <code>i</code>，表示“内部”或者“在内“，和 <code>a</code>， 表示”周围“。</p>
<ul>
<li><code>ci(</code> 改变当前括号内的内容</li>
<li><code>ci[</code> 改变当前方括号内的内容</li>
<li><code>da&#39;</code> 删除一个单引号字符串， 包括周围的单引号</li>
</ul>
<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p>这里是一个有问题的 <a href="https://en.wikipedia.org/wiki/Fizz_buzz">fizz buzz</a> 实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fizz_buzz</span>(<span class="hljs-params">limit</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(limit):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fizz&#x27;</span>)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;fizz&#x27;</span>)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> i % <span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    fizz_buzz(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure>

<p>我们会修复以下问题：</p>
<ul>
<li>主函数没有被调用</li>
<li>从 0 而不是 1 开始</li>
<li>在 15 的整数倍的时候在不用行打印 “fizz” 和 “buzz”</li>
<li>在 5 的整数倍的时候打印 “fizz”</li>
<li>采用硬编码的参数 10 而不是从命令控制行读取参数</li>
<li>主函数没有被调用<ul>
<li><code>G</code> 文件尾</li>
<li><code>o</code> 向下打开一个新行</li>
<li>输入 “if <strong>name</strong> …”</li>
</ul>
</li>
<li>从 0 而不是 1 开始<ul>
<li>搜索 <code>/range</code></li>
<li><code>ww</code> 向前移动两个词</li>
<li><code>i</code> 插入文字， “1, “</li>
<li><code>ea</code> 在 limit 后插入， “+1”</li>
</ul>
</li>
<li>在新的一行 “fizzbuzz”<ul>
<li><code>jj$i</code> 插入文字到行尾</li>
<li>加入 “, end&#x3D;’’”</li>
<li><code>jj.</code> 重复第二个打印</li>
<li><code>jjo</code> 在 if 打开一行</li>
<li>加入 “else: print()”</li>
</ul>
</li>
<li>fizz fizz<ul>
<li><code>ci&#39;</code> 变到 fizz</li>
</ul>
</li>
<li>命令控制行参数<ul>
<li><code>ggO</code> 向上打开</li>
<li>“import sys”</li>
<li><code>/10</code></li>
<li><code>ci(</code> to “int(sys.argv[1])”</li>
</ul>
</li>
</ul>
<p>展示详情请观看课程视频。比较上面用 Vim 的操作和你可能使用其他程序的操作。 值得一提的是 Vim 需要很少的键盘操作，允许你编辑的速度跟上你思维的速度。</p>
<h1 id="自定义-Vim"><a href="#自定义-Vim" class="headerlink" title="自定义 Vim"></a>自定义 Vim</h1><p>Vim 由一个位于 <code>~/.vimrc</code> 的文本配置文件（包含 Vim 脚本命令）。 你可能会启用很多基本 设置。</p>
<p>我们提供一个文档详细的基本设置，你可以用它当作你的初始设置。我们推荐使用这个设置因为 它修复了一些 Vim 默认设置奇怪行为。 <strong>在<a href="https://missing-semester-cn.github.io/2020/files/vimrc">这儿</a> 下载我们的设置，然后将它保存成 <code>~/.vimrc</code>.</strong></p>
<p>Vim 能够被重度自定义，花时间探索自定义选项是值得的。你可以参考其他人的在GitHub 上共享的设置文件，比如，你的授课人的 Vim 设置 (<a href="https://github.com/anishathalye/dotfiles/blob/master/vimrc">Anish</a>,<a href="https://github.com/jonhoo/configs/blob/master/editor/.config/nvim/init.vim">Jon</a> (uses <a href="https://neovim.io/">neovim</a>), <a href="https://github.com/JJGO/dotfiles/blob/master/vim/.vimrc">Jose</a>)。 有很多好的博客文章也聊到了这个话题。尽量不要复制粘贴别人的整个设置文件， 而是阅读和理解它，然后采用对你有用的部分。</p>
<h1 id="扩展-Vim"><a href="#扩展-Vim" class="headerlink" title="扩展 Vim"></a>扩展 Vim</h1><p>Vim 有很多扩展插件。跟很多互联网上已经过时的建议相反，你_不_需要在 Vim 使用一个插件 管理器（从 Vim 8.0 开始）。你可以使用内置的插件管理系统。只需要创建一个 <code>~/.vim/pack/vendor/start/</code> 的文件夹，然后把插件放到这里（比如通过 <code>git clone</code>）。</p>
<p>以下是一些我们最爱的插件：</p>
<ul>
<li><a href="https://github.com/ctrlpvim/ctrlp.vim">ctrlp.vim</a>: 模糊文件查找</li>
<li><a href="https://github.com/mileszs/ack.vim">ack.vim</a>: 代码搜索</li>
<li><a href="https://github.com/scrooloose/nerdtree">nerdtree</a>: 文件浏览器</li>
<li><a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a>: 魔术操作</li>
</ul>
<p>我们尽量避免在这里提供一份冗长的插件列表。你可以查看讲师们的开源的配置文件 (<a href="https://github.com/anishathalye/dotfiles">Anish</a>, <a href="https://github.com/jonhoo/configs">Jon</a>, <a href="https://github.com/JJGO/dotfiles">Jose</a>) 来看看我们使用的其他插件。 浏览 <a href="https://vimawesome.com/">Vim Awesome</a> 来了解一些很棒的插件。 这个话题也有很多博客文章：搜索 “best Vim plugins”。</p>
<h1 id="其他程序的-Vim-模式"><a href="#其他程序的-Vim-模式" class="headerlink" title="其他程序的 Vim 模式"></a>其他程序的 Vim 模式</h1><p>很多工具提供了 Vim 模式。这些 Vim 模式的质量参差不齐；取决于具体工具， 有的提供了 很多酷炫的 Vim 功能，但是大多数对基本功能支持的很好。</p>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>如果你是一个 Bash 用户，用 <code>set -o vi</code>。如果你用 Zsh：<code>bindkey -v</code>。Fish 用 <code>fish_vi_key_bindings</code>。另外，不管利用什么 shell，你可以<code>export EDITOR=vim</code>。 这是一个用来决定当一个程序需要启动编辑时启动哪个的环境变量。 例如，<code>git</code> 会使用这个编辑器来编辑 commit 信息。</p>
<h2 id="Readline"><a href="#Readline" class="headerlink" title="Readline"></a>Readline</h2><p>很多程序使用 <a href="https://tiswww.case.edu/php/chet/readline/rltop.html">GNU Readline</a> 库来作为 它们的命令控制行界面。Readline 也支持基本的 Vim 模式， 可以通过在 <code>~/.inputrc</code> 添加如下行开启：</p>
<p><code>set editing-mode vi</code></p>
<p>比如，在这个设置下，Python REPL 会支持 Vim 快捷键。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>甚至有 Vim 的网页浏览快捷键 <a href="http://vim.wikia.com/wiki/Vim_key_bindings_for_web_browsers">browsers</a>, 受欢迎的有 用于 Google Chrome 的 <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en">Vimium</a> 和用于 Firefox 的 <a href="https://github.com/tridactyl/tridactyl">Tridactyl</a>。 你甚至可以在 <a href="https://github.com/lambdalisue/jupyter-vim-binding">Jupyter notebooks</a> 中用 Vim 快捷键。 <a href="https://reversed.top/2016-08-13/big-list-of-vim-like-software">这个列表</a> 中列举了支持类 vim 键位绑定的软件。</p>
<h1 id="Vim-进阶"><a href="#Vim-进阶" class="headerlink" title="Vim 进阶"></a>Vim 进阶</h1><p>这里我们提供了一些展示这个编辑器能力的例子。我们无法把所有的这样的事情都教给你，但是你 可以在使用中学习。一个好的对策是: 当你在使用你的编辑器的时候感觉 “一定有更好的方法来做这个”， 那么很可能真的有：上网搜寻一下。</p>
<h2 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h2><p><code>:s</code> （替换）命令（<a href="http://vim.wikia.com/wiki/Search_and_replace">文档</a>）。</p>
<ul>
<li><p><code>%s/foo/bar/g</code></p>
<ul>
<li>在整个文件中将 foo 全局替换成 bar</li>
</ul>
</li>
<li><p><code>%s/\[.*\](\(.*\))/\1/g</code></p>
<ul>
<li>将有命名的 Markdown 链接替换成简单 URLs</li>
</ul>
</li>
</ul>
<h2 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h2><ul>
<li>用 <code>:sp</code> &#x2F; <code>:vsp</code> 来分割窗口</li>
<li>同一个缓存可以在多个窗口中显示。</li>
</ul>
<h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><ul>
<li><p><code>q&#123;字符&#125;</code> 来开始在寄存器<code>&#123;字符&#125;</code>中录制宏</p>
</li>
<li><p><code>q</code>停止录制</p>
</li>
<li><p><code>@&#123;字符&#125;</code> 重放宏</p>
</li>
<li><p>宏的执行遇错误会停止</p>
</li>
<li><p><code>&#123;计数&#125;@&#123;字符&#125;</code>执行一个宏{计数}次</p>
</li>
<li><p>宏可以递归</p>
<ul>
<li>首先用<code>q&#123;字符&#125;q</code>清除宏</li>
<li>录制该宏，用 <code>@&#123;字符&#125;</code> 来递归调用该宏 （在录制完成之前不会有任何操作）</li>
</ul>
</li>
<li><p>例子：将 xml 转成 json (</p>
<p>file</p>
<p>)</p>
<ul>
<li><p>一个有 “name” &#x2F; “email” 键对象的数组</p>
</li>
<li><p>用一个 Python 程序？</p>
</li>
<li><p>用 sed &#x2F; 正则表达式</p>
<ul>
<li><code>g/people/d</code></li>
<li><code>%s/&lt;person&gt;/&#123;/g</code></li>
<li><code>%s/&lt;name&gt;\(.*\)&lt;\/name&gt;/&quot;name&quot;: &quot;\1&quot;,/g</code></li>
<li>…</li>
</ul>
</li>
<li><p>Vim 命令 &#x2F; 宏</p>
<ul>
<li><p><code>Gdd</code>, <code>ggdd</code> 删除第一行和最后一行</p>
</li>
<li><p>格式化最后一个元素的宏 （寄存器<code>e</code>）</p>
<ul>
<li>跳转到有 <code>&lt;name&gt;</code> 的行</li>
<li><code>qe^r&quot;f&gt;s&quot;: &quot;&lt;ESC&gt;f&lt;C&quot;&lt;ESC&gt;q</code></li>
</ul>
</li>
<li><p>格式化一个</p>
<p>的宏</p>
<ul>
<li>跳转到有 <code>&lt;person&gt;</code> 的行</li>
<li><code>qpS&#123;&lt;ESC&gt;j@eA,&lt;ESC&gt;j@ejS&#125;,&lt;ESC&gt;q</code></li>
</ul>
</li>
<li><p>格式化一个</p>
<p>标签然后转到另外一个的宏</p>
<ul>
<li>跳转到有 <code>&lt;person&gt;</code> 的行</li>
<li><code>qq@pjq</code></li>
</ul>
</li>
<li><p>执行宏到文件尾</p>
<ul>
<li><code>999@q</code></li>
</ul>
</li>
<li><p>手动移除最后的 <code>,</code> 然后加上 <code>[</code> 和 <code>]</code> 分隔符</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h1><ul>
<li><code>vimtutor</code> 是一个 Vim 安装时自带的教程</li>
<li><a href="https://vim-adventures.com/">Vim Adventures</a> 是一个学习使用 Vim 的游戏</li>
<li><a href="http://vim.wikia.com/wiki/Vim_Tips_Wiki">Vim Tips Wiki</a></li>
<li><a href="https://vimways.org/2019/">Vim Advent Calendar</a> 有很多 Vim 小技巧</li>
<li><a href="http://www.vimgolf.com/">Vim Golf</a> 是用 Vim 的用户界面作为程序语言的 <a href="https://en.wikipedia.org/wiki/Code_golf">code golf</a></li>
<li><a href="https://vi.stackexchange.com/">Vi&#x2F;Vim Stack Exchange</a></li>
<li><a href="http://vimcasts.org/">Vim Screencasts</a></li>
<li><a href="https://pragprog.com/titles/dnvim2/">Practical Vim</a>（书籍）</li>
</ul>
<h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><p><a href="https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//editors-solution">习题解答</a></p>
<ol>
<li><p>完成 <code>vimtutor</code>。 备注：它在一个 <a href="https://en.wikipedia.org/wiki/VT100">80x24</a>（80 列，24 行） 终端窗口看起来效果最好。</p>
</li>
<li><p>下载我们提供的 <a href="https://missing-semester-cn.github.io/2020/files/vimrc">vimrc</a>，然后把它保存到 <code>~/.vimrc</code>。 通读这个注释详细的文件 （用 Vim!）， 然后观察 Vim 在这个新的设置下看起来和使用起来有哪些细微的区别。</p>
</li>
<li><p>安装和配置一个插件：</p>
<p>ctrlp.vim</p>
<ol>
<li>用 <code>mkdir -p ~/.vim/pack/vendor/start</code> 创建插件文件夹</li>
<li>下载这个插件： <code>cd ~/.vim/pack/vendor/start; git clone https://github.com/ctrlpvim/ctrlp.vim</code></li>
<li>阅读这个插件的 <a href="https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md">文档</a>。 尝试用 CtrlP 来在一个工程文件夹里定位一个文件， 打开 Vim, 然后用 Vim 命令控制行开始 <code>:CtrlP</code>.</li>
<li>自定义 CtrlP： 添加 <a href="https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md#basic-options">configuration</a> 到你的 <code>~/.vimrc</code> 来用按 Ctrl-P 打开 CtrlP</li>
</ol>
</li>
<li><p>练习使用 Vim, 在你自己的机器上重做 <a href="https://missing-semester-cn.github.io/2020/editors/#demo">演示</a>。</p>
</li>
<li><p>下个月用 Vim 完成_所有的_文件编辑。每当不够高效的时候，或者你感觉 “一定有一个更好的方式”时， 尝试求助搜索引擎，很有可能有一个更好的方式。如果你遇到难题，可以来我们的答疑时间或者给我们发邮件。</p>
</li>
<li><p>在其他工具中设置 Vim 快捷键 （见上面的操作指南）。</p>
</li>
<li><p>进一步自定义你的 <code>~/.vimrc</code> 和安装更多插件。</p>
</li>
<li><p>（高阶）用 Vim 宏将 XML 转换到 JSON (<a href="https://missing-semester-cn.github.io/2020/files/example-data.xml">例子文件</a>)。 尝试着先完全自己做，但是在你卡住的时候可以查看上面<a href="https://missing-semester-cn.github.io/2020/editors/#macros">宏</a> 章节。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CS必学工具</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>Vim</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Gulp优化Hexo静态资源</title>
    <url>/2022/02/04/gulp-optimization-hexo-statict-resources/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于网上使用gulp给hexo进行压缩优化的文章，找到一些方案，但是时间太久，相应的gulp工具也升级一些版本，导致跟教程有差别，我本地无法正确运用指令，今天踩坑一天，故下来以便日后有同样问题的小伙伴，提供借鉴的思路。</p>
<p>优化插件对比：</p>
<ul>
<li><a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>，使用hexo 6.0兼容不是特别好，功能是差不多，都提供相应的优化，上手比较快。<ul>
<li>如果本地能使用该插件，推荐使用 <code>hexo-all-minifier</code>。</li>
<li>如果出现本地依赖无法关联下载，可以考虑删除当前目录的<code>node_modules</code>，然后重新下载依赖包。（本人怀疑，如果本地总是安装或者卸载插件，可能会引起npm某些bug导致）</li>
</ul>
</li>
<li>Gulp，本身不是给优化使用，但是它提供优化的功能罢了，学习成本高，但是不受hexo版本的影响，可以长期使用。</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Gulp简介"><a href="#Gulp简介" class="headerlink" title="Gulp简介"></a>Gulp简介</h2><blockquote>
<p>用自动化构建工具增强你的工作流程！(A toolkit to automate &amp; enhance your workflow)</p>
</blockquote>
<p>更多的信息可以看看<a href="https://gulpjs.com/">官网</a>或者<a href="https://www.gulpjs.com.cn/">中文官网</a>。</p>
<h2 id="安装和配置Gulp"><a href="#安装和配置Gulp" class="headerlink" title="安装和配置Gulp"></a>安装和配置Gulp</h2><blockquote>
<p> 参考<a href="https://gulpjs.com/docs/en/getting-started/quick-start">官网快速开始</a>吧。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install --global gulp-cli<br><br>npm install gulp --save<br>npm install gulp-babel babel-preset-env babel-preset-mobx --save<br><span class="hljs-meta"></span><br><span class="hljs-meta"># </span><span class="language-bash">如果下面这样子显示，说明是安装成功：</span><br>gulp -v<br>CLI version: 2.3.0<br>Local version: 4.0.2<br></code></pre></td></tr></table></figure>



<h2 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h2><blockquote>
<p>注意，如果用淘宝源，直接使用cnpm下载依赖会快不少</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install -D @babel/core @babel/preset-react @babel/preset-env --save<br>npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save<br>npm install -d gulp-imagemin@7.1.0 imagemin@7.0.0 imagemin-optipng@7.0.0 imagemin-mozjpeg@8.0.0 imagemin-svgo@7.0.0 imagemin-gifsicle@7.0.0 gifsicle@5.0.0 --save-dev<br></code></pre></td></tr></table></figure>



<h2 id="编写-gulpfile-js-文件"><a href="#编写-gulpfile-js-文件" class="headerlink" title="编写 gulpfile.js 文件"></a>编写 gulpfile.js 文件</h2><blockquote>
<p>仅提供参考</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Plugins模块获取</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-minify-css&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><span class="hljs-keyword">var</span> imageminOptipng = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;imagemin-optipng&#x27;</span>);<br><span class="hljs-keyword">var</span> imageminSvgo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;imagemin-svgo&#x27;</span>);<br><span class="hljs-keyword">var</span> imageminMozjpeg = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;imagemin-mozjpeg&#x27;</span>);<br><span class="hljs-keyword">var</span> imageminGifsicle = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;imagemin-gifsicle&#x27;</span>);<br><br><span class="hljs-comment">//压缩css</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">minifycss</span>())<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">//压缩html</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlclean</span>())<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlmin</span>(&#123;<br>            <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br><br><span class="hljs-comment">//压缩js 不压缩min.js</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.js&#x27;</span>, <span class="hljs-string">&#x27;!./public/**/*.min.js&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">uglify</span>())<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩 public/images 目录内图片(Version&gt;3)</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">done</span>) &#123;<br>    gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/images/**/*.*&#x27;</span>, <span class="hljs-string">&#x27;./public/img/**/*.*&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>([<br>             <span class="hljs-title function_">imageminGifsicle</span>(&#123; <span class="hljs-attr">interlaced</span>: <span class="hljs-literal">true</span> &#125;),<br>            <span class="hljs-title function_">imageminMozjpeg</span>(&#123; <span class="hljs-attr">progressive</span>: <span class="hljs-literal">true</span> &#125;),<br>            <span class="hljs-title function_">imageminOptipng</span>(&#123; <span class="hljs-attr">optimizationLevel</span>: <span class="hljs-number">5</span> &#125;),<br>            <span class="hljs-title function_">imageminSvgo</span>(&#123;<br>                <span class="hljs-attr">plugins</span>: [<br>                    &#123; <span class="hljs-attr">removeViewBox</span>: <span class="hljs-literal">true</span> &#125;,<br>                    &#123; <span class="hljs-attr">cleanupIDs</span>: <span class="hljs-literal">false</span> &#125;<br>                ]<br>            &#125;)<br>        ]))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public/images&#x27;</span>, <span class="hljs-string">&#x27;./public/img&#x27;</span>));<br>    <span class="hljs-title function_">done</span>();<br>&#125;);<br><br><span class="hljs-comment">// 开始任务 </span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;default&#x27;</span>, gulp.<span class="hljs-title function_">parallel</span>(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-string">&#x27;minify-js&#x27;</span>,<span class="hljs-string">&#x27;minify-images&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// Do something after a, b, and c are finished.        </span><br>&#125;));<br></code></pre></td></tr></table></figure>



<h2 id="package-json参考"><a href="#package-json参考" class="headerlink" title="package.json参考"></a>package.json参考</h2><blockquote>
<p> 自定义scripts，通过    <code>npm run build</code> &#x3D;&gt;进行构建，<code>npm run dev</code>&#x3D;&gt;本地环境构建并启动服务，<code>npm run deploy </code>&#x3D;&gt;构建并部署;</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">	<span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo-site&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deploy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo deploy&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.17.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.16.11&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.16.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.7.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-es2015&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.24.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;babel-preset-mobx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bulma-stylus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.8.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-clean-css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-htmlclean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.7.22&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-htmlmin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-minify-css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.2.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-uglify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-baidu-url-submit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.0.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-component-inferno&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-deployer-git&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-archive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-feed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-searchdb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.4.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-generator-tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-lazyload&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.3.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-leancloud-counter-security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-pagination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-ejs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-inferno&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.1.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-pug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-renderer-stylus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-service-worker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hexo-wordcount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^6.0.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@babel/core&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.17.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.16.11&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@babel/preset-react&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.16.7&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-htmlclean&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.7.22&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-htmlmin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-minify-css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.2.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gulp-uglify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imagemin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imagemin-gifsicle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gifsicle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imagemin-mozjpeg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imagemin-optipng&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imagemin-svgo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>



<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><blockquote>
<p>如果执行<code>gulp</code>命令有下面的输出，证明已经成功，可以是public目录下面看看成功了喔。</p>
</blockquote>
<figure class="highlight prolog"><table><tr><td class="code"><pre><code class="hljs prolog"><br><span class="hljs-symbol">INFO</span>  <span class="hljs-symbol">Total</span> precache size is about <span class="hljs-number">38.7</span> kB for <span class="hljs-number">3</span> resources.<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Using</span> gulpfile ~/project/myblog/gulpfile.js<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Starting</span> <span class="hljs-string">&#x27;default&#x27;</span>...<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Starting</span> <span class="hljs-string">&#x27;minify-images&#x27;</span>...<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Starting</span> <span class="hljs-string">&#x27;&lt;anonymous&gt;&#x27;</span>...<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Finished</span> <span class="hljs-string">&#x27;minify-images&#x27;</span> after <span class="hljs-number">11</span> ms<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Finished</span> <span class="hljs-string">&#x27;&lt;anonymous&gt;&#x27;</span> after <span class="hljs-number">13</span> ms<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">34</span>] <span class="hljs-symbol">Finished</span> <span class="hljs-string">&#x27;default&#x27;</span> after <span class="hljs-number">15</span> ms<br>[<span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">42</span>] gulp-imagemin: <span class="hljs-symbol">Minified</span> <span class="hljs-number">11</span> images (saved <span class="hljs-number">177</span> kB - <span class="hljs-number">35.3</span><span class="hljs-comment">%)</span><br></code></pre></td></tr></table></figure>



<h1 id="问题与解决思路"><a href="#问题与解决思路" class="headerlink" title="问题与解决思路"></a>问题与解决思路</h1><ol>
<li>(node:60240) UnhandledPromiseRejectionWarning: Error: spawn &#x2F;Users&#x2F;jaryoung&#x2F;project&#x2F;myblog&#x2F;node_modules&#x2F;<a href="mailto:&#95;&#103;&#105;&#x66;&#x73;&#105;&#x63;&#108;&#x65;&#x40;&#x35;&#x2e;&#50;&#x2e;&#49;">&#95;&#103;&#105;&#x66;&#x73;&#105;&#x63;&#108;&#x65;&#x40;&#x35;&#x2e;&#50;&#x2e;&#49;</a>@gifsicle&#x2F;vendor&#x2F;gifsicle ENOENT<br>解决思路，不一定正确，根据自己实际情况来处理。<ul>
<li><code>gulp-imagemin</code>，由于8.0.0出现一个比较诡异的问题，所以需要将<code>gulp-imagemin</code>降级到<code>7.1.0</code>版本</li>
<li>但是降级到<code>7.1.0</code>会出现有一些依赖找不到的情况，只能一个个来找进行安装（如果有更好的办法，也希望有小伙伴跟我说一下）</li>
<li><a href="https://github.com/sindresorhus/gulp-imagemin/blob/v7.1.0/package.json">版本依赖情况</a>，根据github来进行一个个版本jar依赖的下载。最终整理为：<code>npm install -d gulp-imagemin@7.1.0 imagemin@7.0.0 imagemin-optipng@7.0.0 imagemin-mozjpeg@8.0.0 imagemin-svgo@7.0.0 imagemin-gifsicle@7.0.0 gifsicle@5.0.0 --save-dev</code> ，也就是上面步骤给出来的命令</li>
</ul>
</li>
<li>Error: Cannot find module ‘gifsicle’<br>Require stack:<br>解决思路：<code>imagemin-gifsicle@7.0.0</code>，根据它的版本依赖知道为<code>gifsicle@5.0.0 </code>,进行<code>npm install gifsicle@5.0.0 --save-dev</code>问题就可以解决。</li>
<li>imagemin.jpegtran is not a function<br>解决思路：Had the same problem. The issue is you’re still calling <code>imagemin.jpegtran</code> in your config, which was replaced by <code>imagemin.mozjpeg</code> in <a href="https://github.com/sindresorhus/gulp-imagemin/releases/tag/v7.0.0">v7.0.0</a>. <a href="https://github.com/sindresorhus/gulp-imagemin/issues/340">原链接</a></li>
<li><strong>划重点：</strong>如果cnpm依赖不会自动下载，可以考虑删除当前项目的<code>node_modules</code>重新运用<code>cnpm -i</code>试试看，其实上面1、2、3点都可以通过这个无脑操作来解决</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.fadai.cc/posts/97bf547e/">Hexo优化:使用gulp压缩静态资源</a></li>
<li><a href="https://www.voidking.com/dev-hexo-gulp/">Hexo使用Gulp压缩静态资源</a></li>
<li><a href="https://giters.com/sindresorhus/gulp-imagemin/issues/365">https://giters.com/sindresorhus/gulp-imagemin/issues/365</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>你喜欢技术吗？</title>
    <url>/2019/07/13/%E4%BD%A0%E5%96%9C%E6%AC%A2%E6%8A%80%E6%9C%AF%E5%90%97/</url>
    <content><![CDATA[<h2 id="技术的本身是什么？"><a href="#技术的本身是什么？" class="headerlink" title="技术的本身是什么？"></a>技术的本身是什么？</h2><p>我从维基百科找了一个差不多定义</p>
<blockquote>
<p>技术可以指人类对机器、硬件或人造器皿的运用，但它也可以包含更广的架构，如系统、组织方法学和技巧。 </p>
</blockquote>
<span id="more"></span>

<h2 id="我的成长印记"><a href="#我的成长印记" class="headerlink" title="我的成长印记"></a>我的成长印记</h2><h3 id="那一年春节"><a href="#那一年春节" class="headerlink" title="那一年春节"></a>那一年春节</h3><p>那一年春节（约2005年），我哥苦苦哀求老爸买下叔叔自己组装的电脑的情景。现在回想起来，我的技术成长的印记最初应该是从那时候开始。叔叔送我们一本厚厚的关于计算机的书，里面介绍了计算机的基本组成，一些常用的问题的处理等等。我从小不太喜欢看书，我竟然为了计算机把书啃完了。当我掌握了修电脑的技能后，村里如果谁家的电脑有问题了，就叫我去帮忙看看，但是也试过删除人家整个硬盘的资料，然后花了一个晚上慢慢找回数据。</p>
<h3 id="数码产品"><a href="#数码产品" class="headerlink" title="数码产品"></a>数码产品</h3><p>高中那三年，抱着智能手机过来的，从最初的塞班爱好者，到Windows Mobile 手机，再到后来的安卓和iOS，都是让我如痴如醉，那时候安卓刚刚出来的时候，强行将自己的Windows mobile 手机刷成安卓系统，后来热的不行，冬天的时候刚刚可以当成暖手宝。安卓就是刷机，刷成瘾，帮雷总测试miui，到后来拿到全国第一批的小米1，然后转手卖掉，赚了几百块钱，也是美滋滋。</p>
<h3 id="大学学渣"><a href="#大学学渣" class="headerlink" title="大学学渣"></a>大学学渣</h3><p>高考过后，填写志愿所有的学校报都是软件工程，当时想法很单纯，就是想学习计算机软件相关的东西。暑假的时候买一本c语言相关的书籍，提前自学了。大一，经过媳妇（那时候还没有在一起哈哈）给我恶补的离散数学和高数还好没有挂科。大二，学完c++，还有数据结构等课程，现在想起来好像都还给老师了，最近也在恶补这个方面的东西。大三，基本开始Java 和安卓这些课程了。大四，基本不再上课，很多同学开始实习了，最后我也坐不住了，趁着暑假的时候，我也进去第一家公司去实习了，就这样子踏上了不归路了。</p>
<p>几大学最后悔的事情，就是没有参加过一次编程比赛，如果有还在读书的小伙伴，记得一定不要让自己后悔了。</p>
<h3 id="从代码的搬运工，真正的搬砖"><a href="#从代码的搬运工，真正的搬砖" class="headerlink" title="从代码的搬运工，真正的搬砖"></a>从代码的搬运工，真正的搬砖</h3><p>从开始，工作只是为了完成上级交给的任务。很少思考，这个需求的真实内在需求。但是，慢慢会发现，工作其实不是想象中那么简单的。很多时候，需求你的理解是这样子，产品的理解是那样子，很容易出现xy问题。所以，<strong>沟通理解</strong> 十分重要，一定要准确表达自己的意思，也要力求理解别人说的，至少在百分之五十左右，不然会严重的问题。例如，做完了需求，产品说这个不是他想要的，这个就很操蛋了。可能说偏了，但是沟通好了，肯定是有助于提高我们的技术。2017年的时候，我的上级在指导我的时候，由于我的表达和理解不到位，差点吵起来了，但是坐下来，好好想一下，才知道上级的真正表达的意思。如果我们的沟通理解能力越强，技术的提升会更加快。</p>
<h2 id="技术给你的成就感是什么？"><a href="#技术给你的成就感是什么？" class="headerlink" title="技术给你的成就感是什么？"></a>技术给你的成就感是什么？</h2><p>计算机给我的成就感，就是能帮助到别人我就很开心，当然不小心格式化了别人的硬盘我也会很不开心。软件开发，给我成就感，从最初的一次次任务的完成就很满足，到现在的方案是否为最优才会有成就感。一个产品经理跟我说，只有有价值的东西，才有可能会存在。现在，会思考自己做的东西是否有价值，如果觉得是无价值的东西，有时候会感觉成就感很低。</p>
<p>最后，我觉得技术，不单单是指软件开发本身，更多说的是思维的模式，只有不断思考，我们的技术才会越来越来好。</p>
<p><strong>看山是山，看山不是山，看山还是山。</strong></p>
<p>少吃零食，多看书，多看报，多思考，多睡觉。如果尽信书不如无书，所以每个人都需要有自己的思考能力。<br>做人嘛，最紧要就系开心😄！！！全世界晚安！！！</p>
]]></content>
      <tags>
        <tag>Something</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Docker（针对开发人员）</title>
    <url>/2019/03/31/%E5%88%9D%E8%AF%86Docker/</url>
    <content><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以解决，“在我的机器上可正常工作的啊！！！”的问题</p>
<h2 id="容器又是什么东西？"><a href="#容器又是什么东西？" class="headerlink" title="容器又是什么东西？"></a>容器又是什么东西？</h2><p>容器是一种标准化的软件单元。<br>容器镜像是轻量的、可执行的独立软件包，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。<br><img src="https://s2.ax1x.com/2019/03/30/ADavjK.png" alt="ADavjK.png"></p>
<blockquote>
<p>图片出自：<a href="https://www.docker-cn.com/what-container">https://www.docker-cn.com/what-container</a></p>
</blockquote>
<span id="more"></span>

<h3 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h3><blockquote>
<p>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</p>
</blockquote>
<h4 id="容器和虚拟机对比"><a href="#容器和虚拟机对比" class="headerlink" title="容器和虚拟机对比"></a>容器和虚拟机对比</h4><table>
<thead>
<tr>
<th><strong>容器</strong></th>
<th><strong>虚拟机</strong></th>
</tr>
</thead>
<tbody><tr>
<td>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行。与虚拟机相比，容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动。</td>
<td>虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因</td>
</tr>
<tr>
<td><a href="https://imgchr.com/i/ADwWLT"><img src="https://s2.ax1x.com/2019/03/30/ADwWLT.md.png" alt="ADwWLT.md.png"></a>图片出自：<a href="https://www.docker-cn.com/what-container">https://www.docker-cn.com/what-container</a></td>
<td><a href="https://imgchr.com/i/ADwRyV"><img src="https://s2.ax1x.com/2019/03/30/ADwRyV.md.png" alt="ADwRyV.md.png"></a> 图片出自：<a href="https://www.docker-cn.com/what-container">https://www.docker-cn.com/what-container</a></td>
</tr>
</tbody></table>
<h4 id="容器和虚拟机共用"><a href="#容器和虚拟机共用" class="headerlink" title="容器和虚拟机共用"></a>容器和虚拟机共用</h4><blockquote>
<p>将容器和虚拟机配合使用，为应用的部署和管理提供极大的灵活性。</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/03/30/ADdmDS.png" alt="ADdmDS.png"></p>
<blockquote>
<p>图片出自：<a href="https://www.docker-cn.com/what-container">https://www.docker-cn.com/what-container</a></p>
</blockquote>
<h2 id="获取docker（针对Mac-用户）"><a href="#获取docker（针对Mac-用户）" class="headerlink" title="获取docker（针对Mac 用户）"></a>获取docker（针对Mac 用户）</h2><ol>
<li>建议注册一个账户</li>
<li>然后通过官网链接下载桌面版的Docker，<a href="https://www.docker.com/products/docker-desktop">官网超链接</a>，如果想快一点可以试试看这个<a href="https://download.docker.com/mac/stable/Docker.dmg">链接</a> 。(默认最新稳定版)</li>
</ol>
<p><a href="https://imgchr.com/i/AD0J7F"><img src="https://s2.ax1x.com/2019/03/30/AD0J7F.md.png" alt="AD0J7F.md.png"></a><br>3. 下载完，安装好，配置一下Docker 中国官方镜像加速源 <code>http://registry.docker-cn.com</code>，当然你也是可以选择其他的加速源例如阿里，网易等等。配置完，记得点击<strong>Apply&amp;Restart</strong>。<br><img src="https://s2.ax1x.com/2019/03/30/AD0zuV.png" alt="AD0zuV.png"><br>4. 打开Terminal ，输入一下命令 <code>docker info</code><br><img src="https://s2.ax1x.com/2019/03/30/ADBWaF.png" alt="ADBWaF.png"></p>
<p>安装工具，到此结束了，是不是想说So easy？其实就是如此轻松，马上可以享受到Docker带来的快感吧！</p>
<h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2><p>我习惯上来先查一下，help（不想看，直接跳过哈，下面会开始讲，我目前经常使用的一些命令。）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker help<br>Usage: docker [OPTIONS] COMMAND<br><br>A self-sufficient runtime for containers<br><br>Options:<br>      --config string      Location of client config files (default &quot;/Users/jaryoung/.docker&quot;)<br>  -D, --debug              Enable debug mode<br>  -H, --host list          Daemon socket(s) to connect to<br>  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)<br>      --tls                Use TLS; implied by --tlsverify<br>      --tlscacert string   Trust certs signed only by this CA (default &quot;/Users/jaryoung/.docker/ca.pem&quot;)<br>      --tlscert string     Path to TLS certificate file (default &quot;/Users/jaryoung/.docker/cert.pem&quot;)<br>      --tlskey string      Path to TLS key file (default &quot;/Users/jaryoung/.docker/key.pem&quot;)<br>      --tlsverify          Use TLS and verify the remote<br>  -v, --version            Print version information and quit<br><br>Management Commands:<br>  builder     Manage builds<br>  config      Manage Docker configs<br>  container   Manage containers<br>  image       Manage images<br>  network     Manage networks<br>  node        Manage Swarm nodes<br>  plugin      Manage plugins<br>  secret      Manage Docker secrets<br>  service     Manage services<br>  stack       Manage Docker stacks<br>  swarm       Manage Swarm<br>  system      Manage Docker<br>  trust       Manage trust on Docker images<br>  volume      Manage volumes<br><br>Commands:<br>  attach      Attach local standard input, output, and error streams to a running container<br>  build       Build an image from a Dockerfile<br>  commit      Create a new image from a container&#x27;s changes<br>  cp          Copy files/folders between a container and the local filesystem<br>  create      Create a new container<br>  diff        Inspect changes to files or directories on a container&#x27;s filesystem<br>  events      Get real time events from the server<br>  exec        Run a command in a running container<br>  export      Export a container&#x27;s filesystem as a tar archive<br>  history     Show the history of an image<br>  images      List images<br>  import      Import the contents from a tarball to create a filesystem image<br>  info        Display system-wide information<br>  inspect     Return low-level information on Docker objects<br>  kill        Kill one or more running containers<br>  load        Load an image from a tar archive or STDIN<br>  login       Log in to a Docker registry<br>  logout      Log out from a Docker registry<br>  logs        Fetch the logs of a container<br>  pause       Pause all processes within one or more containers<br>  port        List port mappings or a specific mapping for the container<br>  ps          List containers<br>  pull        Pull an image or a repository from a registry<br>  push        Push an image or a repository to a registry<br>  rename      Rename a container<br>  restart     Restart one or more containers<br>  rm          Remove one or more containers<br>  rmi         Remove one or more images<br>  run         Run a command in a new container<br>  save        Save one or more images to a tar archive (streamed to STDOUT by default)<br>  search      Search the Docker Hub for images<br>  start       Start one or more stopped containers<br>  stats       Display a live stream of container(s) resource usage statistics<br>  stop        Stop one or more running containers<br>  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE<br>  top         Display the running processes of a container<br>  unpause     Unpause all processes within one or more containers<br>  update      Update configuration of one or more containers<br>  version     Show the Docker version information<br>  wait        Block until one or more containers stop, then print their exit codes<br><br>Run &#x27;docker COMMAND --help&#x27; for more information on a command.<br><br><br></code></pre></td></tr></table></figure>

<h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker search --help<br><br>Usage: docker search [OPTIONS] TERM<br><br>Search the Docker Hub for images，为了在Docker Hub上面搜 **资源**（你们都懂得）<br><br>Options:<br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Pretty-print search using a Go template<br>      --limit int       Max number of search results (default 25)<br>      --no-trunc        Don&#x27;t truncate output<br></code></pre></td></tr></table></figure>

<p>例如，我需要搜索一下上面有哪些mysql镜像，我们可以看到下面到信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker search mysql<br>NAME（名称）                                           DESCRIPTION（描述）                             STARS（多少次好评） OFFICIAL（官方）    AUTOMATED（自动化）<br>mysql                                                  MySQL is a widely used, open-source relation…   7964                [OK]<br>mariadb                                                MariaDB is a community-developed fork of MyS…   2665                [OK]<br>mysql/mysql-server                                     Optimized MySQL Server Docker images. Create…   598                                     [OK]<br>...<br></code></pre></td></tr></table></figure>

<h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull --help<br><br>Usage: docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br><br>Pull an image or a repository from a registry<br><br>Options:<br>  -a, --all-tags                Download all tagged images in the repository<br>      --disable-content-trust   Skip image verification (default true)<br></code></pre></td></tr></table></figure>

<p>例如，我们可以通过 <code>docker pull mysql</code> , 来下载最新版的mysql镜像。如果需要带上TAG，例如 <code>docker pull mysql:5.7</code></p>
<h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --help<br><br>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><br>Run a command in a new container<br><br>Options(删除了一部分，详细的情况，可以自己查询):<br>      --add-host list                  Add a custom host-to-IP mapping (host:ip)<br>  -d, --detach                         Run container in background and print container ID<br>      --detach-keys string             Override the key sequence for detaching a container<br>      --device list                    Add a host device to the container<br>      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list<br>      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])<br>      --device-read-iops list          Limit read rate (IO per second) from a device (default [])<br>      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])<br>      --device-write-iops list         Limit write rate (IO per second) to a device (default [])<br>      --disable-content-trust          Skip image verification (default true)<br>      --dns list                       Set custom DNS servers<br>      --dns-option list                Set DNS options<br>      --dns-search list                Set custom DNS search domains<br>      --entrypoint string              Overwrite the default ENTRYPOINT of the image<br>  -e, --env list                       Set environment variables<br>      --env-file list                  Read in a file of environment variables<br>      --expose list                    Expose a port or a range of ports<br>      --group-add list                 Add additional groups to join<br>      --health-cmd string              Command to run to check health<br>      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)<br>      --health-retries int             Consecutive failures needed to report unhealthy<br>      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)<br>      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)<br>      --help                           Print usage<br>  -h, --hostname string                Container host name<br>      --init                           Run an init inside the container that forwards signals and reaps processes<br>  -p, --publish list                   Publish a container&#x27;s port(s) to the host<br>  -P, --publish-all                    Publish all exposed ports to random ports<br>      --read-only                      Mount the container&#x27;s root filesystem as read only<br>      --restart string                 Restart policy to apply when a container exits (default &quot;no&quot;)<br>      --rm                             Automatically remove the container when it exits<br>      --runtime string                 Runtime to use for this container<br>      --security-opt list              Security Options<br>      --shm-size bytes                 Size of /dev/shm<br>      --sig-proxy                      Proxy received signals to the process (default true)<br>      --stop-signal string             Signal to stop a container (default &quot;SIGTERM&quot;)<br>      --stop-timeout int               Timeout (in seconds) to stop a container<br>      --storage-opt list               Storage driver options for the container<br>      --sysctl map                     Sysctl options (default map[])<br>      --tmpfs list                     Mount a tmpfs directory<br>  -t, --tty                            Allocate a pseudo-TTY<br>      --ulimit ulimit                  Ulimit options (default [])<br>  ...<br>  -v, --volume list                    Bind mount a volume<br>      --volume-driver string           Optional volume driver for the container<br>      --volumes-from list              Mount volumes from the specified container(s)<br>  -w, --workdir string                 Working directory inside the container<br></code></pre></td></tr></table></figure>

<h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 3306:3306 --name mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.43<br></code></pre></td></tr></table></figure>

<ul>
<li>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。</li>
<li>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。</li>
<li>-v $PWD&#x2F;logs:&#x2F;logs：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。</li>
<li>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql ：将主机当前目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。</li>
<li>-e MYSQL_ROOT_PASSWORD&#x3D;123456：初始化 root 用户的密码。</li>
</ul>
<hr>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 6379:6379 -v $PWD/data:/data --name redis  -d redis redis-server --appendonly yes<br></code></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li>-p 6379:6379 : 将容器的6379端口映射到主机的6379端口</li>
<li>-v $PWD&#x2F;data:&#x2F;data : 将主机中当前目录下的data挂载到容器的&#x2F;data</li>
<li>redis-server –appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置</li>
</ul>
<hr>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>首先，我需要创建一下，文件夹,用于主宿机之间做映射使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p &#123;conf.d,html,logs&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 80:80 -p 84:84 -p 82:82 --name nginx -v $PWD/www:/www -v $PWD/html:/usr/share/nginx/html -v $PWD/logs:/www/logs -v $PWD/conf.d:/etc/nginx/conf.d -d nginx<br></code></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li>-p 80:80：主机80到容器80，-p 84:84，同理（主机 -&gt; 宿机）</li>
<li>–name mynginx：将容器命名为nginx</li>
<li>-v $PWD&#x2F;www:&#x2F;www：将主机中当前目录下的www挂载到容器的&#x2F;www</li>
<li>-v $PWD&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d：将主机中当前目录下的conf.d挂载到容器的&#x2F;etc&#x2F;nginx&#x2F;conf.d 不能挂载文件，只能挂载文件夹<blockquote>
<p>注意如果提醒你，是否不应该将一个文件夹挂载到文件下面，我需要自己手动创建一个nginx.conf配置文件，并放置到主机的映射配置文件夹中（$PWD&#x2F;conf），重新执行即可。如果出现了没有访问你配置的静态资源，很可能是访问到默认的配置（conf.d&#x2F;default.conf）,可以选择删除它，也可以选择覆盖&#x2F;etc&#x2F;nginx&#x2F;nginx.conf，但是前提需要备份原来的nginx.conf或者在原nginx.conf上做修改会更加适合。</p>
</blockquote>
</li>
<li>-v $PWD&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html，讲主机中当前的目录下的文件夹挂载到容器中<blockquote>
<p>这里映射不正确，很有可能导致访问403     拒绝访问的情况，如果你的html不是资源访问的跟路径，请配置正确的根路径，例如，资源是放在html&#x2F;hello的文件中，需要配置到$PWD&#x2F;html&#x2F;hello，而不是$PWD&#x2F;html。</p>
</blockquote>
</li>
<li>-v $PWD&#x2F;logs:&#x2F;wwwlogs：将主机中当前目录下的logs挂载到容器的&#x2F;wwwlogs</li>
</ul>
<h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps --help<br><br>Usage: docker ps [OPTIONS]<br><br>List containers<br><br>Options:<br>  -a, --all             Show all containers (default shows just running)<br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Pretty-print containers using a Go template<br>  -n, --last int        Show n last created containers (includes all states) (default -1)<br>  -l, --latest          Show the latest created container (includes all states)<br>      --no-trunc        Don&#x27;t truncate output<br>  -q, --quiet           Only display numeric IDs<br>  -s, --size            Display total file sizes<br></code></pre></td></tr></table></figure>

<p>例如，我们可以运行 <code>docker ps -a</code> ,查询一下我们容器中启动的镜像的情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                   PORTS               NAMES<br>4b9f565ae5ad        nginx               &quot;nginx -g &#x27;daemon of…&quot;   8 hours ago         Up 4 minutes                0.0.0.0:84-&gt;80/tcp       nginx<br>46519e512d58        redis               &quot;docker-entrypoint.s…&quot;   10 hours ago        Up 5 minutes                0.0.0.0:6379-&gt;6379/tcp   redis<br>293c9831f58a        mysql:5.6.43        &quot;docker-entrypoint.s…&quot;   10 hours ago        Up 4 minutes                0.0.0.0:3306-&gt;3306/tcp   mysql<br></code></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li>-a Show all containers (default shows just running)，会显示所有存在的，默认是之后显示当前容器启动的镜像。</li>
</ul>
<h3 id="docker-stop"><a href="#docker-stop" class="headerlink" title="docker stop"></a>docker stop</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker stop --help<br><br>Usage: docker stop [OPTIONS] CONTAINER [CONTAINER...]<br><br>Stop one or more running containers<br><br>Options:<br>  -t, --time int   Seconds to wait for stop before killing it (default 10)<br></code></pre></td></tr></table></figure>

<h3 id="docker-start"><a href="#docker-start" class="headerlink" title="docker start"></a>docker start</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker start --help<br><br>Usage: docker start [OPTIONS] CONTAINER [CONTAINER...]<br><br>Start one or more stopped containers，可以启动一个或者多个容器<br><br>Options:<br>  -a, --attach               Attach STDOUT/STDERR and forward signals<br>      --detach-keys string   Override the key sequence for detaching a container<br>  -i, --interactive          Attach container&#x27;s STDIN<br></code></pre></td></tr></table></figure>

<p>例如，我们可以通过 <code>docker start nginx mysql</code> ，同时启动两个容器</p>
<h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec --help<br><br>Usage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]<br><br>Run a command in a running container<br><br>Options:<br>  -d, --detach               Detached mode: run command in the background<br>      --detach-keys string   Override the key sequence for detaching a container<br>  -e, --env list             Set environment variables<br>  -i, --interactive          Keep STDIN open even if not attached<br>      --privileged           Give extended privileges to the command<br>  -t, --tty                  Allocate a pseudo-TTY<br>  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])<br>  -w, --workdir string       Working directory inside the container<br></code></pre></td></tr></table></figure>

<p>例如，我们可以通过命令快速进入到redis-cli，<code>docker exec -it redis redis-cli</code><br>，输入<code>exit</code> 就可以推出</p>
<hr>
<p>很多内容都是引用自：</p>
<blockquote>
<p><a href="http://www.runoob.com/docker/docker-tutorial.html">http://www.runoob.com/docker/docker-tutorial.html</a><br><a href="https://www.docker-cn.com/">https://www.docker-cn.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>重新认识maven</title>
    <url>/2021/08/01/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ol>
<li>能够快速熟悉公司项目的maven配置，并且能够配置自己的maven配置</li>
<li>配置maven，不用再copy，能够做到应用自如</li>
<li>开源项目的maven配置文件，不在迷茫</li>
<li>能够搭建自己的maven私服，用maven进行企业级的规范工程管理</li>
</ol>
<span id="more"></span>

<h1 id="maven背景"><a href="#maven背景" class="headerlink" title="maven背景"></a>maven背景</h1><p>自己依赖的jar，都需要自己copy到lib文件夹中。</p>
<ol>
<li>大型项目依赖的jar，非常多</li>
<li>缺少依赖，自己寻找依赖的对应的jar</li>
<li>依赖冲突，依赖版本可能不一样</li>
<li>单体应用，拆分成多个模块的，每个模块都是一个工程，最后还得将所有的工程合并，编译起来通过统一的入口进行启动。</li>
</ol>
<h2 id="流程痛苦"><a href="#流程痛苦" class="headerlink" title="流程痛苦"></a>流程痛苦</h2><p>自己一顿操作在本地跑起来，然后进行集成测试，然后编译代码，然后手动打包，然后将war\jar部署到服务器，QA测试，出现了bug之后，我们又得本地跑，集成测试，手工打包，编译部署，一直到测试通过</p>
<p>最后，将通过测试的jar或者war，部署到上线生产环境。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>效率低下，程序员维护各种jar非常痛苦。</p>
<h1 id="maven如何解决依赖和构建自动化的问题"><a href="#maven如何解决依赖和构建自动化的问题" class="headerlink" title="maven如何解决依赖和构建自动化的问题"></a>maven如何解决依赖和构建自动化的问题</h1><ol>
<li>上班，先写代码，然后编写单元测试，接着一个maven test 的命令，maven就自动将项目中单元测试自动哦跑起来，还能自动出来一个完整的单元测试的覆盖率的报告，已经单元测试运行错误的一份报告</li>
<li>如果一个系统有多工程，maven会将多个模块工程集成起来，无需手动集成</li>
<li>对应依赖，完成自动化，简单配置一下依赖，maven会自动下载依赖的版本，所有依赖下载、版本调解、版本升级等繁琐的事情都交给maven自动完成</li>
<li>编译+打包+发布，自动化</li>
<li>maven对工程进行统一的编译、打包，发布，</li>
</ol>
<p>总而言之，用了maven之后，在依赖管理、构建管理、模块化拆分管理，全部自动化完成</p>
<h2 id="maven的历史"><a href="#maven的历史" class="headerlink" title="maven的历史"></a>maven的历史</h2><ol>
<li>make<br>最原始的工具，不能跨品台</li>
<li>ant<br>配置烦杂</li>
<li>maven<br>目前还是最有影响力的工具之一</li>
<li>gradle<br>不再依赖xml进行配置，基于DSL语言进行构建</li>
</ol>
<p>未来，预计还是maven和gradle共存的年代</p>
<h1 id="安装maven（Windows-or-Mac）"><a href="#安装maven（Windows-or-Mac）" class="headerlink" title="安装maven（Windows or Mac）"></a>安装maven（Windows or Mac）</h1><ol>
<li>install Jdk environment（java -version   —》1.8）</li>
<li>download maven zip</li>
<li>set path M2_HOME or MAVEN_OPTS -Xms128 -Xmx512m</li>
<li>set setting.xml</li>
<li>mvn help:system will auto download some requirement</li>
</ol>
<h1 id="maven基本使用"><a href="#maven基本使用" class="headerlink" title="maven基本使用"></a>maven基本使用</h1><h2 id="maven快速构建一个工程"><a href="#maven快速构建一个工程" class="headerlink" title="maven快速构建一个工程"></a>maven快速构建一个工程</h2><p>mvn archetype:generate -DgroupId&#x3D;com.jaryoung.demo -DartifactId&#x3D;first-demo -DarchetypeArtiactId&#x3D;maven-archetype-quickstart -DinteractiveMode&#x3D;false</p>
<h2 id="maven的目录约定"><a href="#maven的目录约定" class="headerlink" title="maven的目录约定"></a>maven的目录约定</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">源码：<br>/src/main/java<br>单元测试:<br><span class="hljs-regexp">/src/m</span>ain/java<br>核心maven配置文件<br>pom.<span class="hljs-property">xml</span><br></code></pre></td></tr></table></figure>

<h2 id="pom-xml之初认识"><a href="#pom-xml之初认识" class="headerlink" title="pom.xml之初认识"></a>pom.xml之初认识</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml 中顶层的元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- pom本身的版本号，一般很少改变 --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目所在的组织 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目中唯一标识 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>first-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目的打包类型 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目的版本号 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目的展示的名称 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>first-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目的文档下载url --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 项目的描述 --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> my first demo<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- pom 配置文件的配置项 --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 依赖配置 --&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h2 id="maven对项目进行打包"><a href="#maven对项目进行打包" class="headerlink" title="maven对项目进行打包"></a>maven对项目进行打包</h2><p>源代码和单元测试写好之后，可以通过maven进行自动化的单元测试和编译 、打包。</p>
<p><code>mvn clean package</code>，会先清空target目录下所有的内容，然后对工程进行构建，构建出来一个可以执行的jar包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">xxx@xx-Pro  ~/project/demo/first-demo  mvn clean package<br>[INFO] Scanning <span class="hljs-keyword">for</span> projects...<br>[INFO]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Building first-demo 1.0-SNAPSHOT<br>[INFO] ------------------------------------------------------------------------<br>[INFO]<br>[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ first-demo ---<br>[INFO] Deleting /Users/jaryoung/project/demo/first-demo/target<br>[INFO]<br>[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ first-demo ---<br>[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!<br>[INFO] skip non existing resourceDirectory /Users/jaryoung/project/demo/first-demo/src/main/resources<br>[INFO]<br>[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ first-demo ---<br>[INFO] Changes detected - recompiling the module!<br>[WARNING] File encoding has not been <span class="hljs-built_in">set</span>, using platform encoding UTF-8, i.e. build is platform dependent!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to /Users/jaryoung/project/demo/first-demo/target/classes<br>[INFO]<br>[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ first-demo ---<br>[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!<br>[INFO] skip non existing resourceDirectory /Users/jaryoung/project/demo/first-demo/src/test/resources<br>[INFO]<br>[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ first-demo ---<br>[INFO] Changes detected - recompiling the module!<br>[WARNING] File encoding has not been <span class="hljs-built_in">set</span>, using platform encoding UTF-8, i.e. build is platform dependent!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to /Users/jaryoung/project/demo/first-demo/target/test-classes<br>[INFO]<br>[INFO] --- maven-surefire-plugin:2.12.4:<span class="hljs-built_in">test</span> (default-test) @ first-demo ---<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-booter/2.12.4/surefire-booter-2.12.4.pom<br>[INFO] Surefire report directory: /Users/jaryoung/project/demo/first-demo/target/surefire-reports<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit3/2.12.4/surefire-junit3-2.12.4.pom<br>Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit3/2.12.4/surefire-junit3-2.12.4.pom (0 B at 0 B/s)<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom<br>Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom (0 B at 0 B/s)<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit3/2.12.4/surefire-junit3-2.12.4.jar<br>Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit3/2.12.4/surefire-junit3-2.12.4.jar (0 B at 0 B/s)<br><br>-------------------------------------------------------<br> T E S T S<br>-------------------------------------------------------<br>Running com.jaryoung.demo.AppTest<br>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec<br><br>Results :<br><br>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0<br><br>[INFO]<br>[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ first-demo ---<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.pom<br>[INFO] Building jar: /Users/jaryoung/project/demo/first-demo/target/first-demo-1.0-SNAPSHOT.jar<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time: 4.617 s<br>[INFO] Finished at: 2021-02-17T16:15:08+08:00<br>[INFO] Final Memory: 16M/60M<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure>

<h2 id="执行jar包"><a href="#执行jar包" class="headerlink" title="执行jar包"></a>执行jar包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">java -<span class="hljs-built_in">cp</span> target/first-demo-1.0-SNAPSHOT.jar com.jaryoung.demo.App<br></code></pre></td></tr></table></figure>

<h1 id="maven架构"><a href="#maven架构" class="headerlink" title="maven架构"></a>maven架构</h1><h2 id="maven鸟瞰图"><a href="#maven鸟瞰图" class="headerlink" title="maven鸟瞰图"></a>maven鸟瞰图</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o3afzqwj314o0ng0u8.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled.png"></p>
<h1 id="maven重要的知识点"><a href="#maven重要的知识点" class="headerlink" title="maven重要的知识点"></a>maven重要的知识点</h1><h2 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 项目所在的组织 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 项目中唯一标识 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>first-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 项目的打包类型 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 项目的版本号 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 定义某个工程的附属项目 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure>

<p>坐标的作用，上面的五个坐标就代表了特定版本的代码，就是特定代码版本的jar包，可以上传到maven的仓库，能够提供给别人下载使用。</p>
<p>总结：</p>
<ol>
<li>坐标的元素（五个g a p v c）</li>
<li>每个坐标的意义</li>
<li>五个坐标的作用</li>
</ol>
<h1 id="依赖标签重认识"><a href="#依赖标签重认识" class="headerlink" title="依赖标签重认识"></a>依赖标签重认识</h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>		<span class="hljs-comment">&lt;!-- 三要素 groupId、artifactId、version --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>		<span class="hljs-comment">&lt;!-- 项目类型，比较少用 --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><br>		<span class="hljs-comment">&lt;!-- 依赖范围 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><br>		// maven有三套classpath<br>		// 1. 编译源码 2. 单元测试 3.项目运行<br>		// 编译、测试、运行 三个不同的阶段会有不同的类型<br>		// compile：默认，对于编译、测试、运行的classpath都是有效<br>		// test：测试的classpath有效<br>		// provided：编译和测试的classpath有效<br>		// runtime：测试和运行的classpath有效<br><br>		maven的传递性依赖，会自动递归解析所有的依赖，然后下载到本地仓库。<br>		<br>		我们的项目依赖了junit，junit依赖A，A又依赖了B<br>		<br>		如果我们的junit的依赖范围是test，junit对A的依赖范围是compile（默认），<br>		我们项目对A的依赖范围也是test<br>		<br>		如果我们依赖A，范围为compile（默认），A又依赖B范围：test，那么我们是不会依赖它。<br><br>		第一列为，一级依赖，第一行为，二级依赖<br>				      compile	test	provided	runtime<br>		compile	  compile			            runtime<br>		test	    test			              test<br>		provided	provided		  provided	provided<br>		runtime	  runtime			            runtime<br>		有可能依赖是不会传递的，就是可能有些多层级的依赖，是不会成为项目的依赖。<br>		<br>		依赖调解（就近原则）<br>		A-&gt;B-&gt;C-&gt;Y(1.0)，A-&gt;D-&gt;Y(2.0)，就近原则，会选择Y(2.0)<br>		A-&gt;B-&gt;Y(1.0)，A-&gt;D-&gt;Y(2.0)，A声明那个就用那个<br>		<br>		<span class="hljs-comment">&lt;!-- 可选依赖 --&gt;</span><br>		// 如果为true，不会向上传递，否则会先上传递<br>		<span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h1 id="解决依赖冲突"><a href="#解决依赖冲突" class="headerlink" title="解决依赖冲突"></a>解决依赖冲突</h1><p>例子：</p>
<p>A → B → Y(1.0)</p>
<p>A → B → C → Y(2.0)</p>
<p>Y （2.0） 某个接口增加一个方法，所以调用的时候，就会有找不到方法。</p>
<p>解决办法：</p>
<p>使用新版本，一般来说开源项目是会有向后兼容性的。</p>
<p>分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mvn dependency:tree<br><br>INFO] Scanning <span class="hljs-keyword">for</span> projects...<br>[INFO]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Building oa-org 1.0-SNAPSHOT<br>[INFO] ------------------------------------------------------------------------<br>[INFO]<br>[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ oa-org ---<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom<br>....<br>[INFO] com.jaryoung:oa-org:jar:1.0-SNAPSHOT<br>[INFO] +- org.springframework:spring-core:jar:3.2.18.RELEASE:compile<br>[INFO] |  \- commons-logging:commons-logging:jar:1.1.3:compile<br>[INFO] +- org.springframework:spring-webmvc:jar:3.2.18.RELEASE:compile<br>[INFO] |  +- org.springframework:spring-beans:jar:3.2.18.RELEASE:compile<br>[INFO] |  \- org.springframework:spring-expression:jar:3.2.18.RELEASE:compile<br>[INFO] +- org.springframework:spring-context:jar:3.2.18.RELEASE:compile<br>[INFO] +- org.springframework:spring-context-support:jar:3.2.15.RELEASE:compile<br>[INFO] +- org.springframework:spring-aop:jar:3.2.18.RELEASE:compile<br>[INFO] |  \- aopalliance:aopalliance:jar:1.0:compile<br>[INFO] +- org.springframework:spring-aspects:jar:3.2.15.RELEASE:compile<br>[INFO] |  \- org.aspectj:aspectjweaver:jar:1.7.4:compile<br>[INFO] +- org.springframework:spring-tx:jar:3.2.18.RELEASE:compile<br>[INFO] +- org.springframework:spring-jdbc:jar:3.2.18.RELEASE:compile<br>[INFO] +- org.springframework:spring-web:jar:3.2.18.RELEASE:compile<br>[INFO] +- junit:junit:jar:4.12:<span class="hljs-built_in">test</span><br>[INFO] |  \- org.hamcrest:hamcrest-core:jar:1.3:<span class="hljs-built_in">test</span><br>[INFO] +- org.springframework:spring-test:jar:3.2.16.RELEASE:<span class="hljs-built_in">test</span><br>[INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.25:compile<br>[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.25:compile<br>[INFO] |  \- log4j:log4j:jar:1.2.17:compile<br>[INFO] +- org.mybatis:mybatis:jar:3.2.3:compile<br>[INFO] +- org.mybatis:mybatis-spring:jar:1.2.0:compile<br>[INFO] \- mysql:mysql-connector-java:jar:5.1.29:compile<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time: 26.348 s<br>[INFO] Finished at: 2021-02-19T09:02:57+08:00<br>[INFO] Final Memory: 16M/189M<br>[INFO] ------------------------------------------------------------------------<br><br></code></pre></td></tr></table></figure>

<p>排除旧版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Y<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Y<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h1><p>目的，为了消除重复jar包，以前没有maven的时候，各个项目都要有自己的lib目录存放各种依赖jar包。</p>
<ol>
<li>本地仓库</li>
<li>云端仓库<ol>
<li>官方中央仓库</li>
<li>内网私服</li>
<li>阿里云镜像</li>
<li>…</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o34mj37j61gm0kqwg702.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%201.png"></p>
<h2 id="maven的生命周期以及执行原理"><a href="#maven的生命周期以及执行原理" class="headerlink" title="maven的生命周期以及执行原理"></a>maven的生命周期以及执行原理</h2><p><a href="http://maven.apache.org/plugins/index.html">Maven - Available Plugins</a></p>
<p>生命周期的图</p>
<p>mvn命令相关的</p>
<p><code>mvn clean package</code></p>
<p><code>mvn clean install</code></p>
<p><code>mvn clean deploy</code></p>
<p>独立的生命周期（phase）</p>
<ol>
<li>clean<ol>
<li>pre-clean</li>
<li>clean</li>
<li>post-clean</li>
</ol>
</li>
<li>default<ol>
<li>validate</li>
<li>initialize</li>
<li>generate-sources</li>
<li>process-sources</li>
<li>process-resources</li>
<li>compile</li>
<li>process-classes</li>
<li>generate-test-sources</li>
<li>generate-test-resources</li>
<li>process-test-resources</li>
<li>test-compile</li>
<li>process-test-classes</li>
<li>test</li>
<li>prepare-package</li>
<li>package</li>
<li>pre-integration-test</li>
<li>integration-test</li>
<li>post-integration-test</li>
<li>verify</li>
<li>install</li>
<li>deploy</li>
</ol>
</li>
<li>site(部署文档)<ol>
<li>pre-site</li>
<li>site</li>
<li>post-site</li>
<li>site-deploy</li>
</ol>
</li>
</ol>
<p>phrase和plugin的绑定</p>
<p><code>process-resources -》 resources:resources</code></p>
<p><code>compile -》 compile:compile</code></p>
<p><code>process-test-resources -》 resources:testResources</code></p>
<p><code>test-compile -》compiler:testCompile</code></p>
<p><code>test -》surefire:test</code></p>
<p><code>package  -》jar:jar or war:war</code></p>
<p><code>install  -》install:install</code></p>
<p><code>deploy  -》deploy:deploy</code></p>
<p><code>site  -》site:site</code></p>
<p><code>clean -》clean:clean</code></p>
<p>命令行和phrase的关系</p>
<p><code>mvn clean package</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o49w0xxj30qz0hy755.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%202.png"></p>
<p>clean，代表是clean 生命周期的中clean phase。</p>
<p>会执行，clean 所有的 操作，也就是上面clean 的1 - 3 步。</p>
<p>package，代表是会执行default中package phase之前所有的操作，当然也包含当前packagephase的操作</p>
<p><code>mvn dependency:tree</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o3628syj30k004h0sr.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%203.png"></p>
<p><code>mvn deploy:deploy-file</code></p>
<p>直接执行，不会执行任何 default上面的生命周期的内容，会直接执行插件的中的goal。例如 ，mvn dependency:tree，直接执行dependency插件中的tree的goal。</p>
<h2 id="plugin配置"><a href="#plugin配置" class="headerlink" title="plugin配置"></a>plugin配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>							<span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>source jar<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>verify<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                          <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar-no-fork<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                      <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="maven企业级实战"><a href="#maven企业级实战" class="headerlink" title="maven企业级实战"></a>maven企业级实战</h1><h2 id="从0到1搭建一个私服仓库"><a href="#从0到1搭建一个私服仓库" class="headerlink" title="从0到1搭建一个私服仓库"></a>从0到1搭建一个私服仓库</h2><p>架构图</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o48gzjwj31cs0u041m.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%204.png"></p>
<ol>
<li><p>下载 neuxs repository</p>
<p><code>docker pull sonatype/nexus3:latest</code></p>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">-v 挂载volume到意思<br><span class="hljs-variable">$PWD</span> 代表到是当前到目录<br>docker run -d -p 8090:8081 --name nexus -v <span class="hljs-variable">$PWD</span>/nexus-data:/nexus-data sonatype/nexus3<br></code></pre></td></tr></table></figure>
</li>
<li><p>修改maven-central代理仓库中的remote storage <code>https://repo1.maven.org/maven2/</code> 修改成：<code>https://maven.aliyun.com/repository/central</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o38waxjj31p30u0wip.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%205.png"></p>
</li>
<li><p>maven-snapshot和maven-releases宿主仓库已有，无需修改</p>
</li>
<li><p>3rd-party仓库，需要手动创建，并且配置到maven-public group中</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o4f3qakj31nm0s8adu.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%206.png"></p>
<p>选择 maven2(hosted)，宿主类型</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o4b8ap4j31h40u0jun.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%207.png"></p>
<p>输入3rd-party，然后创建。</p>
<p>设置maven-public</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o467si1j326r0u0n22.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%208.png"></p>
<p>添加组内，保存，大功告成</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o3dx6ihj31n00u041q.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%209.png"></p>
</li>
<li><p>本地强制配置走私服</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><br>   <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>		<span class="hljs-comment">&lt;!--配置专用账号 --&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>nx-deployment<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>nx-deployment123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>nx-deployment<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>nx-deployment123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-3rd-party<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>nx-deployment<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>nx-deployment123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>neuxs<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>neuxs<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>neuxs<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>          <br>          <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus Plugin Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">activeProfiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>neuxs<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activeProfiles</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>权限管理，例如配置一个可以上传的jar的账号,nx-deployment</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o3c7dasj61jn0u0n0702.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%2010.png"></p>
</li>
<li><p>使用专用的账号，上传</p>
<p>pom文件添加，需要跟setting文件中的 servers 配置server的id一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>					  <span class="hljs-comment">&lt;!-- 需要跟setting文件中的 servers 配置server的id一致 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Releases<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mvn clean deploy<br>[WARNING] <br>[WARNING] Some problems were encountered <span class="hljs-keyword">while</span> building the effective settings<br>[WARNING] Unrecognised tag: <span class="hljs-string">&#x27;pluginRepositories&#x27;</span> (position: START_TAG seen ...&lt;/profile&gt;\n    &lt;pluginRepositories&gt;... @252:25)  @ /Users/jaryoung/.m2/settings.xml, line 252, column 25<br>[WARNING] <br>[INFO] Scanning <span class="hljs-keyword">for</span> projects...<br>[INFO] <br>[INFO] ------------------------------------------------------------------------<br>[INFO] Building oa-org 1.0-SNAPSHOT<br>[INFO] ------------------------------------------------------------------------<br>[INFO] <br>[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ oa-org ---<br>[INFO] Deleting /Users/jaryoung/project/study/maven/oa-org/target<br>[INFO] <br>[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ oa-org ---<br>[WARNING] File encoding has not been <span class="hljs-built_in">set</span>, using platform encoding UTF-8, i.e. build is platform dependent!<br>[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!<br>[INFO] Copying 5 resources<br>[INFO] Copying 5 resources<br>[INFO] <br>[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ oa-org ---<br>[INFO] Changes detected - recompiling the module!<br>[WARNING] File encoding has not been <span class="hljs-built_in">set</span>, using platform encoding UTF-8, i.e. build is platform dependent!<br>[INFO] Compiling 5 <span class="hljs-built_in">source</span> files to /Users/jaryoung/project/study/maven/oa-org/target/classes<br>[INFO] <br>[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ oa-org ---<br>[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!<br>[INFO] skip non existing resourceDirectory /Users/jaryoung/project/study/maven/oa-org/src/test/resources<br>[INFO] <br>[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ oa-org ---<br>[INFO] Changes detected - recompiling the module!<br>[WARNING] File encoding has not been <span class="hljs-built_in">set</span>, using platform encoding UTF-8, i.e. build is platform dependent!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to /Users/jaryoung/project/study/maven/oa-org/target/test-classes<br>[INFO] <br>[INFO] --- maven-surefire-plugin:2.12.4:<span class="hljs-built_in">test</span> (default-test) @ oa-org ---<br>[INFO] Surefire report directory: /Users/jaryoung/project/study/maven/oa-org/target/surefire-reports<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom<br>Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom (0 B at 0 B/s)<br>Downloading from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar<br>Downloaded from nexus-aliyun: http://maven.aliyun.com/nexus/content/groups/public/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar (0 B at 0 B/s)<br><br>-------------------------------------------------------<br> T E S T S<br>-------------------------------------------------------<br>Running com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest<br>log4j:ERROR Could not find value <span class="hljs-keyword">for</span> key log4j.appender.Stdout<br>log4j:ERROR Could not instantiate appender named <span class="hljs-string">&quot;Stdout&quot;</span>.<br>2021-02-20 00:38:22,869 [main] DEBUG [org.springframework.test.context.junit4.SpringJUnit4ClassRunner] - SpringJUnit4ClassRunner constructor called with [class com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest].<br>2021-02-20 00:38:22,914 [main] DEBUG [org.springframework.test.context.support.AbstractDelegatingSmartContextLoader] - Delegating to GenericXmlContextLoader to process context configuration [ContextConfigurationAttributes@60addb54 declaringClass = <span class="hljs-string">&#x27;com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest&#x27;</span>, classes = <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>, locations = <span class="hljs-string">&#x27;&#123;classpath*:application-org.xml&#125;&#x27;</span>, inheritLocations = <span class="hljs-literal">true</span>, initializers = <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>, inheritInitializers = <span class="hljs-literal">true</span>, name = [null], contextLoaderClass = <span class="hljs-string">&#x27;org.springframework.test.context.ContextLoader&#x27;</span>].<br>2021-02-20 00:38:22,915 [main] DEBUG [org.springframework.test.context.ContextLoaderUtils] - Could not find an <span class="hljs-string">&#x27;annotation declaring class&#x27;</span> <span class="hljs-keyword">for</span> annotation <span class="hljs-built_in">type</span> [org.springframework.test.context.ActiveProfiles] and class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br>2021-02-20 00:38:22,917 [main] DEBUG [org.springframework.test.context.TestContextManager] - @TestExecutionListeners is not present <span class="hljs-keyword">for</span> class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]: using defaults.<br>2021-02-20 00:38:22,919 [main] INFO  [org.springframework.test.context.TestContextManager] - Could not instantiate TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener]. Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext]<br>2021-02-20 00:38:22,929 [main] DEBUG [org.springframework.test.annotation.ProfileValueUtils] - Retrieved @ProfileValueSourceConfiguration [null] <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span> class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br>2021-02-20 00:38:22,929 [main] DEBUG [org.springframework.test.annotation.ProfileValueUtils] - Retrieved ProfileValueSource <span class="hljs-built_in">type</span> [class org.springframework.test.annotation.SystemProfileValueSource] <span class="hljs-keyword">for</span> class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br>2021-02-20 00:38:22,930 [main] DEBUG [org.springframework.test.annotation.ProfileValueUtils] - Retrieved @ProfileValueSourceConfiguration [null] <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span> class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br>2021-02-20 00:38:22,930 [main] DEBUG [org.springframework.test.annotation.ProfileValueUtils] - Retrieved ProfileValueSource <span class="hljs-built_in">type</span> [class org.springframework.test.annotation.SystemProfileValueSource] <span class="hljs-keyword">for</span> class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br>2021-02-20 00:38:22,932 [main] DEBUG [org.springframework.test.annotation.ProfileValueUtils] - Retrieved @ProfileValueSourceConfiguration [null] <span class="hljs-keyword">for</span> <span class="hljs-built_in">test</span> class [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br>2021-02-20 0est.context.support.DirtiesContextTestExecutionListener] - After <span class="hljs-built_in">test</span> class: context [[TestContext@50c87b21 testClass = EmployeeServiceImplTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@1810399e testClass = EmployeeServiceImplTest, locations = <span class="hljs-string">&#x27;&#123;classpath*:application-org.xml&#125;&#x27;</span>, classes = <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>, contextInitializerClasses = <span class="hljs-string">&#x27;[]&#x27;</span>, activeProfiles = <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>, contextLoader = <span class="hljs-string">&#x27;org.springframework.test.context.support.DelegatingSmartContextLoader&#x27;</span>, parent = [null]]]], dirtiesContext [<span class="hljs-literal">false</span>].<br>Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.191 sec<br>2021-02-20 00:38:23,962 [Thread-0] INFO  [org.springframework.context.support.GenericApplicationContext] - Closing org.springframework.context.support.GenericApplicationContext@26be92ad: startup <span class="hljs-built_in">date</span> [Sat Feb 20 00:38:23 CST 2021]; root of context hierarchy<br>2021-02-20 00:38:23,962 [Thread-0] DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span><br>2021-02-20 00:38:23,962 [Thread-0] DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Returning cached instance of singleton bean <span class="hljs-string">&#x27;lifecycleProcessor&#x27;</span><br>2021-02-20 00:38:23,962 [Thread-0] INFO  [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Destroying singletons <span class="hljs-keyword">in</span> org.springframework.beans.factory.support.DefaultListableBeanFactory@80ec1f8: defining beans [propertyConfigurer,dataSource,sqlSessionFactory,org.mybatis.spring.mapper.MapperScannerConfigurer<span class="hljs-comment">#0,employeeService,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor,employeeDao]; root of factory hierarchy</span><br>2021-02-20 00:38:23,962 [Thread-0] DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Retrieved dependent beans <span class="hljs-keyword">for</span> bean <span class="hljs-string">&#x27;employeeService&#x27;</span>: [com.jaryoung.oa.org.service.impl.EmployeeServiceImplTest]<br><br>Results :<br><br>Tests run: 2, Failures: 0, Errors: 0, Skipped: 0<br><br>[INFO] <br>[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ oa-org ---<br>[INFO] Building jar: /Users/jaryoung/project/study/maven/oa-org/target/oa-org-1.0-SNAPSHOT.jar<br>[INFO] <br>[INFO] --- maven-install-plugin:2.4:install (default-install) @ oa-org ---<br>[INFO] Installing /Users/jaryoung/project/study/maven/oa-org/target/oa-org-1.0-SNAPSHOT.jar to /Users/jaryoung/.m2/repository/com/jaryoung/oa-org/1.0-SNAPSHOT/oa-org-1.0-SNAPSHOT.jar<br>[INFO] Installing /Users/jaryoung/project/study/maven/oa-org/pom.xml to /Users/jaryoung/.m2/repository/com/jaryoung/oa-org/1.0-SNAPSHOT/oa-org-1.0-SNAPSHOT.pom<br>[INFO] <br>[INFO] --- maven-deploy-plugin:2.7:deploy (default-deploy) @ oa-org ---<br>Downloading from nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/maven-metadata.xml<br>Downloaded from nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/maven-metadata.xml (762 B at 28 kB/s)<br>Uploading to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/oa-org-1.0-20210219.163824-5.jar<br>Uploaded to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/oa-org-1.0-20210219.163824-5.jar (13 kB at 155 kB/s)<br>Uploading to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/oa-org-1.0-20210219.163824-5.pom<br>Uploaded to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/oa-org-1.0-20210219.163824-5.pom (4.9 kB at 68 kB/s)<br>Downloading from nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/maven-metadata.xml<br>Downloaded from nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/maven-metadata.xml (276 B at 13 kB/s)<br>Uploading to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/maven-metadata.xml<br>Uploaded to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/1.0-SNAPSHOT/maven-metadata.xml (762 B at 12 kB/s)<br>Uploading to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/maven-metadata.xml<br>Uploaded to nexus-snapshots: http://localhost:8090/repository/maven-snapshots/com/jaryoung/oa-org/maven-metadata.xml (276 B at 4.6 kB/s)<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time: 5.095 s<br>[INFO] Finished at: 2021-02-20T00:38:24+08:00<br>[INFO] Final Memory: 23M/190M<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure>
</li>
<li><p>上传到3rd-party仓库<br><code>mvn deploy:deploy-file -DgroupId=com.stbz -DartifactId=stbz -Dversion=1.0 -Dpackaging=jar -Dfile=$PWD/target/stbz-1.0.jar -Durl=http://localhost:8090/repository/3rd-party/ -DrepositoryId=nexus-3rd-party</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">~/project/study/maven/stbz mvn deploy:deploy-file -DgroupId=com.stbz -DartifactId=stbz -Dversion=1.0 -Dpackaging=jar -Dfile=<span class="hljs-variable">$PWD</span>/target/stbz-1.0.jar -Durl=http://localhost:8090/repository/3rd-party/ -DrepositoryId=nexus-3rd-party<br>[WARNING] <br>[WARNING] Some problems were encountered <span class="hljs-keyword">while</span> building the effective settings<br>[WARNING] Unrecognised tag: <span class="hljs-string">&#x27;pluginRepositories&#x27;</span> (position: START_TAG seen ...&lt;/profile&gt;\n    &lt;pluginRepositories&gt;... @257:25)  @ /Users/jaryoung/.m2/settings.xml, line 257, column 25<br>[WARNING] <br>[INFO] Scanning <span class="hljs-keyword">for</span> projects...<br>[INFO] <br>[INFO] ------------------------------------------------------------------------<br>[INFO] Building stbz 1.0<br>[INFO] ------------------------------------------------------------------------<br>[INFO] <br>[INFO] --- maven-deploy-plugin:2.8.2:deploy-file (default-cli) @ stbz ---<br>Uploading to nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/1.0/stbz-1.0.jar<br>Uploaded to nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/1.0/stbz-1.0.jar (403 kB at 829 kB/s)<br>Uploading to nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/1.0/stbz-1.0.pom<br>Uploaded to nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/1.0/stbz-1.0.pom (383 B at 1.5 kB/s)<br>Downloading from nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/maven-metadata.xml<br>Uploading to nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/maven-metadata.xml<br>Uploaded to nexus-3rd-party: http://localhost:8090/repository/3rd-party/com/stbz/stbz/maven-metadata.xml (288 B at 1.7 kB/s)<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time: 1.728 s<br>[INFO] Finished at: 2021-02-21T13:48:37+08:00<br>[INFO] Final Memory: 10M/204M<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure>
</li>
<li><p>配置task,创建日常任务的task</p>
</li>
</ol>
<p>仓库类型</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o3g6vogj32l80sw443.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%2011.png"></p>
<ol>
<li>group：仓库组，虚拟的仓库组。中央仓库：maven1或者maven2</li>
<li>hosted：宿主仓库，内部发布使用</li>
<li>proxy：代理仓库，代理各种其他的仓库的。</li>
</ol>
<p>maven-central：maven中央仓库代理仓库</p>
<p>maven-releases：宿主仓库，用于部署公司内部的发布的release版本项目</p>
<p>maven-snapshots：宿主仓库，用于部署公司内部的发布的snapshot版本项目</p>
<p>3rd party：宿主仓库，用于部署三方的项目</p>
<p>maven public：仓库组，所有release仓库都在这个仓库组</p>
<h2 id="OA需求分析"><a href="#OA需求分析" class="headerlink" title="OA需求分析"></a>OA需求分析</h2><ol>
<li>组织模块<br>包含部门和员工，curd</li>
<li>权限模块<br>员工、角色、权限</li>
<li>审批模块<br>员工、申请、审批</li>
</ol>
<h2 id="从0到1搭建一个spring-mvc-mybatis到项目"><a href="#从0到1搭建一个spring-mvc-mybatis到项目" class="headerlink" title="从0到1搭建一个spring + mvc + mybatis到项目"></a>从0到1搭建一个spring + mvc + mybatis到项目</h2><ol>
<li>创建maven项目</li>
<li>编写pom依赖</li>
<li>配置Spring 、mybatis、日志配置</li>
<li>自动生成curd操作和相关到类</li>
<li>编写单元测试</li>
</ol>
<h2 id="开发权限管理模块"><a href="#开发权限管理模块" class="headerlink" title="开发权限管理模块"></a>开发权限管理模块</h2><p>idea esay code 自动生成代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">authorization</span>`<br>(<br>    `id`          <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `employee_id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>    `role_id`     <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>);<br></code></pre></td></tr></table></figure>

<h2 id="开发流程审批模块"><a href="#开发流程审批模块" class="headerlink" title="开发流程审批模块"></a>开发流程审批模块</h2><p>idea esay code 自动生成代</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `application`<br>(<br>    `id`          <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `employee_id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>    `days`        <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>);<br></code></pre></td></tr></table></figure>

<h2 id="基于聚合功能实现多模块统一构建"><a href="#基于聚合功能实现多模块统一构建" class="headerlink" title="基于聚合功能实现多模块统一构建"></a>基于聚合功能实现多模块统一构建</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>oa parent pom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-org<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-auth<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-flow<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="基于继承功能将所有模块的依赖版本强制统一"><a href="#基于继承功能将所有模块的依赖版本强制统一" class="headerlink" title="基于继承功能将所有模块的依赖版本强制统一"></a>基于继承功能将所有模块的依赖版本强制统一</h2><p>解决父子pom版本统一的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>oa parent pom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-org<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-auth<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-flow<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">springframework.release.version</span>&gt;</span>5.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">springframework.release.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jackson.version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- spring依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springframework.release.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springframework.release.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 文件上传 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="依赖集中约束版本号"><a href="#依赖集中约束版本号" class="headerlink" title="依赖集中约束版本号"></a>依赖集中约束版本号</h2><p>解决版本依赖统一的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>oa parent pom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-org<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-auth<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>oa-flow<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">springframework.release.version</span>&gt;</span>5.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">springframework.release.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- spring依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springframework.release.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springframework.release.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="基于import-pom强制约束依赖方的版本号"><a href="#基于import-pom强制约束依赖方的版本号" class="headerlink" title="基于import pom强制约束依赖方的版本号"></a>基于import pom强制约束依赖方的版本号</h2><p>组件强制要求依赖方需要使用合理版本依赖，以防止组件在被依赖之后，无法使用的情况。</p>
<ol>
<li><p>新建 oa-common的项目，pom文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>新建bom文件，也就是一个特殊maven项目，只有pom文件的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.bom<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-commons-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>在 dependencyManagement 通过 import方式导入到项目中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-org<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>oa-org<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.bom<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>oa-commons-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>								<span class="hljs-comment">&lt;!-- oa-common-bom 组件的依赖，作为引入组件 oa-common，--&gt;</span><br>								<span class="hljs-comment">&lt;!--	引用的开源或者其他项目的版本依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="开发OA系统的web服务"><a href="#开发OA系统的web服务" class="headerlink" title="开发OA系统的web服务"></a>开发OA系统的web服务</h2><p>目录结构</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o46mqauj3084053a9y.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%2012.png"></p>
<blockquote>
<p>java<br>resources<br>—application-web.xml<br>—spring-servlet.xml<br>webapp<br>—WEB-INF<br>—web.xml</p>
</blockquote>
<p>application-web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:application-org.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:application-auth.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:application-flow.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 扫描controller（controller层注入） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.jaryoung.oa.web.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启动注解支持 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 静态资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/WEB-INF/js/&quot;</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/WEB-INF/css/&quot;</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/css/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/WEB-INF/image/&quot;</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/image/**&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  	<span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <br>  	<span class="hljs-comment">&lt;!-- Spring配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:application-web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>	<br>    <span class="hljs-comment">&lt;!-- Spring MVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    	<span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="基于surefire插件运行单元测试以及输出覆盖率报告"><a href="#基于surefire插件运行单元测试以及输出覆盖率报告" class="headerlink" title="基于surefire插件运行单元测试以及输出覆盖率报告"></a>基于surefire插件运行单元测试以及输出覆盖率报告</h2><p>surefire 会 跟 Junit 单元测试测试很好的结合</p>
<p>可选项</p>
<ol>
<li><p>跳过所有单元测试-不推荐</p>
</li>
<li><p>跳过某些单元测试-不推荐</p>
</li>
<li><p>测试报告</p>
<ol>
<li><p>单元测试覆盖率，代表单元测试是否会覆盖到代码的行数，或者方法的覆盖率</p>
</li>
<li><p>引用cobertura插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cobertura-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>执行<code>mvn cobertura:cobertura</code> 命令</p>
</li>
<li><p>查看<code>target/site/index.html</code>报告</p>
</li>
</ol>
</li>
</ol>
<h2 id="基于jetty插件在本地启动web服务进行功能测试"><a href="#基于jetty插件在本地启动web服务进行功能测试" class="headerlink" title="基于jetty插件在本地启动web服务进行功能测试"></a>基于jetty插件在本地启动web服务进行功能测试</h2><ol>
<li><p>项目配置jetty本地启动</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.4.37.v20210219<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scanIntervalSeconds</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">scanIntervalSeconds</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置setting文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- pluginGroup</span><br><span class="hljs-comment">     | Specifies a further group identifier to use for plugin lookup.</span><br><span class="hljs-comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroup</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>在oa-web项目下执行<code>mvn jetty:run</code></p>
</li>
</ol>
<h2 id="基于cargo对web服务进行自动化部署"><a href="#基于cargo对web服务进行自动化部署" class="headerlink" title="基于cargo对web服务进行自动化部署"></a>基于cargo对web服务进行自动化部署</h2><ol>
<li><p>第一步docker安装tomcat镜像</p>
</li>
<li><p>启动 tomcat 镜像，<code>docker run -d --name tomcat -p 8888:8080</code></p>
</li>
<li><p>复制配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> [contain <span class="hljs-built_in">id</span>]:/usr/local/tomcat/webapps.dist .<br><span class="hljs-built_in">mv</span> webapps.dist webapps<br>docker <span class="hljs-built_in">cp</span> [contain <span class="hljs-built_in">id</span>]:/usr/local/tomcat/conf .<br>docker <span class="hljs-built_in">cp</span> [contain <span class="hljs-built_in">id</span>]:/usr/local/tomcat/logs .<br></code></pre></td></tr></table></figure>
</li>
<li><p>以挂载的方式启动tomcat<br><code>docker run -d --name tomcat -p 8888:8080 -v $PWD/conf/:/usr/local/tomcat/conf -v $PWD/webapps/:/usr/local/tomcat/webapps -v $PWD/logs/:/usr/local/tomcat/logs tomcat:latest</code></p>
</li>
<li><p>修改配置<code>tomcat-users.xml</code> 和 <code>webapps/manager/META-INF/context.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">tomcat-users.xml<br>	<span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;tomcat&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-script&quot;</span>/&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;tomcat,manager-gui,manager-script&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">webapps/manager/META-INF/context.xml  <br><span class="hljs-comment">&lt;!-- 注释掉访问地址限制 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">antiResourceLocking</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">privileged</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span><br><span class="hljs-comment">         allow=&quot;\d+\.\d+\.\d&quot; /&gt; --&gt;</span>        <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">sessionAttributeValueClassNameFilter</span>=<span class="hljs-string">&quot;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><code>mvn clean package</code>，打成war</p>
</li>
<li><p><code>mvn clean verify org.codehaus.cargo:cargo-maven3-plugin:deploy</code>，使用cargo插件部署</p>
</li>
<li><p>访问接口</p>
</li>
</ol>
<h2 id="基于资源过滤-profile功能自动适配各个发布环境"><a href="#基于资源过滤-profile功能自动适配各个发布环境" class="headerlink" title="基于资源过滤+profile功能自动适配各个发布环境"></a>基于资源过滤+profile功能自动适配各个发布环境</h2><ol>
<li><p>配置pom文件夹增加 profiles配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://localhost:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://test:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://prod:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><code>mvn package -Pdev</code>，看看打出来jar配置是否正确</p>
</li>
<li><p><code>mvn package -Ptest -DskipTests=true</code>，同上</p>
</li>
<li><p>配置 cargo 多环境配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">						<span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.cargo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cargo-maven3-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">container</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">containerId</span>&gt;</span>tomcat9x<span class="hljs-tag">&lt;/<span class="hljs-name">containerId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>remote<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">container</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">cargo.hostname</span>&gt;</span>$&#123;cargo.hostname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.hostname</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">cargo.servlet.port</span>&gt;</span>$&#123;cargo.servlet.port&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.servlet.port</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span>$&#123;cargo.tomcat.manager.url&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.username</span>&gt;</span>$&#123;cargo.remote.username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.username</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.password</span>&gt;</span>$&#123;cargo.remote.password&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.password</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">deployer</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>remote<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">deployer</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">deployables</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">deployable</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>$&#123;project.groupId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>$&#123;project.packaging&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">deployable</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">deployables</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://localhost:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.hostname</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.hostname</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.servlet.port</span>&gt;</span>8888<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.servlet.port</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span>http://localhost:8888/manager<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://test:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.hostname</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.hostname</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.servlet.port</span>&gt;</span>8888<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.servlet.port</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span>http://test:8888/manager<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.username</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.password</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://prod:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.hostname</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.hostname</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.servlet.port</span>&gt;</span>8888<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.servlet.port</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span>http://prod:8888/manager<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.tomcat.manager.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.username</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">cargo.remote.password</span>&gt;</span>prod<span class="hljs-tag">&lt;/<span class="hljs-name">cargo.remote.password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><code>mvn clean verify org.codehaus.cargo:cargo-maven3-plugin:deploy -Pdev -DskipTests=true</code></p>
</li>
<li><p><code>mvn clean verify org.codehaus.cargo:cargo-maven3-plugin:deploy -Ptest -DskipTests=true</code></p>
</li>
<li><p>进行资源文件的多环境配置</p>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o336ox4j30g409mt8r.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%2013.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">公共资源配置，非profiles.build.resources中resrouce的配置					<br>					<span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/profiles/$&#123;env&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>/**<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>profiles的配置<br>				<span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.driverClassName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://localhost:3306/oa<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.username</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.username</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.password</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">env</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">env</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>上面主要是增加一个propertie → <code>&lt;env&gt;dev&lt;/env&gt;</code></p>
<h2 id="版本管理和版本控制的区别"><a href="#版本管理和版本控制的区别" class="headerlink" title="版本管理和版本控制的区别"></a>版本管理和版本控制的区别</h2><p>maven的版本管理的目的，是管理好maven的对应的版本。<br>git目的是做好版本控制，也就是给我们能鼓回滚某一个commit的时刻。</p>
<h2 id="互联网公司最佳实践之如何进行版本管理"><a href="#互联网公司最佳实践之如何进行版本管理" class="headerlink" title="互联网公司最佳实践之如何进行版本管理"></a>互联网公司最佳实践之如何进行版本管理</h2><p>开发中的版本：x.x.x-SNASHOPT<br>发布的版本：x.x.x<br>举个例子<br>开发中：1.0.1-SNASHOPT → 1.0.2-SNASHOPT（修复某个bug）→1.0.2（发布版本）<br>重大升级：2.0.1-SNASHOPT → 2.0.2-SNASHOPT（修复某个bug）→2.0.1（发布版本）<br>第一位，一般相对稳定除非大的变更，第二位，用于次重大变更，第三位用于日常变更</p>
<h2 id="为项目创建统一的工程骨架"><a href="#为项目创建统一的工程骨架" class="headerlink" title="为项目创建统一的工程骨架"></a>为项目创建统一的工程骨架</h2><p><a href="http://maven.apache.org/guides/mini/guide-creating-archetypes.html">Maven - Guide to Creating Archetypes</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">archetype<br>|-- pom.xml<br>`-- src<br>    `-- main<br>        `-- resources<br>            |-- META-INF<br>            |   `-- maven<br>            |       `--archetype-metadata.xml<br>            `-- archetype-resources<br>                |-- pom.xml<br>                `-- src<br>                    |-- main<br>                    |   `-- java<br>                    |       `-- App.java<br>                    `-- test<br>                        `-- java<br>                            `-- AppTest.java<br></code></pre></td></tr></table></figure>

<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>archetypes-oa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Releases<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8090/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.archetype<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>archetype-packaging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>archetype-metadata.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">archetype-descriptor</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0 https://maven.apache.org/xsd/archetype-descriptor-1.1.0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;quickstart&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileSets</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span> <span class="hljs-attr">filtered</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">packaged</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">encoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span> <span class="hljs-attr">filtered</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">packaged</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">encoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span> <span class="hljs-attr">filtered</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">packaged</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">encoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/profiles<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span> <span class="hljs-attr">filtered</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">packaged</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">encoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/test/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span> <span class="hljs-attr">filtered</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">packaged</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">encoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>/.gitignore<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fileSets</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperties</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- package  默认会取自 groupId --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;groupId&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>com.jaryoung.oa<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;artifactId&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">requiredProperty</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;version&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperty</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">requiredProperties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">archetype-descriptor</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="mybatis源码中的pom-xml解释"><a href="#mybatis源码中的pom-xml解释" class="headerlink" title="mybatis源码中的pom.xml解释"></a>mybatis源码中的pom.xml解释</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">2021-02-28 17:08:54,847 [main] INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from URL [file:/Users/jaryoung/project/study/maven/oa-parent/oa-web/target/classes/application-web.xml]<br></code></pre></td></tr></table></figure>

<h1 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h1><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gt1o4cj3fxj31830u0goa.jpg" alt="%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86maven%2024fba34a5ee5462cbca9db8b86fe4619/Untitled%2014.png"></p>
<h1 id="遇到的问题及解决思路"><a href="#遇到的问题及解决思路" class="headerlink" title="遇到的问题及解决思路"></a>遇到的问题及解决思路</h1><p>多模块进行聚合的时候，发现部分项目的mamper没有被扫描到。<br>解决思路，查询日志看那些mapper没有被扫描到<br>Parsed mapper file:’URL [jar:file:&#x2F;**&#x2F;oa-org-1.0-SNAPSHOT.jar!&#x2F;mapper&#x2F;AuthorizationDao.xml]’</p>
<p>解决思路：</p>
<ol>
<li>单个项目构建跑单元测试通过，表明配置每个项目的配置是ok</li>
<li>调试源码看到只有oa-auth的mapper被扫描到了，其实通过启动日志也能看到扫描那些mapper</li>
<li>发现<code>&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</code> </li>
<li>问题分析，上面的配置导致多模块聚合的时候，只扫描了oa-auth下面classpath下面的mapper的文件</li>
<li>修改<code>&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:mapper/*.xml&quot;/&gt;</code>问题解决</li>
<li>spring配置文件中application-xx.xml多个一致的<code>property</code> key配置的时候，主要覆盖的内容喔。</li>
</ol>
<p>引出问题 classpath: vs classpath*: </p>
<p><a href="http://tech-tauk.blogspot.com/2010/04/difference-between-classpath-classpath.html#:~:text=classpath*%20will%20search%20all%20classpath,will%20concentrate%20on%20one%20resource.&text=But%20important%20thing%20to%20be,is%20locations%20and%20not%20location.&text=classpath*%3A*config.,is%20present%20in%20the%20classpath">Difference between Classpath:* &amp; Classpath*: in Spring</a></p>
<p>application-org.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置mybatis sqlSessionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:mapper/*.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>application-flow.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置mybatis sqlSessionFactory --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:mapper/*.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>application-auth.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置mybatis sqlSessionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:application-org.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:application-flow.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:application-auth.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br>properties 中 如果名称一样，值不一样的话，排在下面的配置，会覆盖上面的配置<br></code></pre></td></tr></table></figure>

<p>日志分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">2021-02-28 17:08:54,847 [main] INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from URL [file:/Users/jaryoung/project/study/maven/oa-parent/oa-web/target/classes/application-web.xml]<br><br>2021-02-28 17:08:54,976 [main] INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from URL [file:/Users/jaryoung/project/study/maven/oa-parent/oa-org/target/classes/application-org.xml]<br><br>2021-02-28 17:08:55,147 [main] INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from URL [file:/Users/jaryoung/project/study/maven/oa-parent/oa-flow/target/classes/application-flow.xml]<br><br>2021-02-28 17:08:55,192 [main] INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from URL [file:/Users/jaryoung/project/study/maven/oa-parent/oa-auth/target/classes/application-auth.xml]<br><br>2021-02-28 17:08:55,243 [main] INFO  [org.springframework.beans.factory.xml.XmlBeanDefinitionReader] - Loading XML bean definitions from URL [file:/Users/jaryoung/project/study/maven/oa-parent/oa-web/target/classes/spring-servlet.xml]<br><br>2021-02-28 17:08:55,364 [main] INFO  [org.springframework.web.context.support.GenericWebApplicationContext] - Refreshing org.springframework.web.context.support.GenericWebApplicationContext@4c583ecf: startup <span class="hljs-built_in">date</span> [Sun Feb 28 17:08:55 CST 2021]; root of context hierarchy<br><br>2021-02-28 17:19:59,375 [main] DEBUG [org.springframework.core.io.support.PathMatchingResourcePatternResolver] - Looking <span class="hljs-keyword">for</span> matching resources <span class="hljs-keyword">in</span> directory tree [/Users/jaryoung/project/study/maven/oa-parent/oa-org/target/classes/mapper]<br>2021-02-28 17:19:59,375 [main] DEBUG [org.springframework.core.io.support.PathMatchingResourcePatternResolver] - Searching directory [/Users/jaryoung/project/study/maven/oa-parent/oa-org/target/classes/mapper] <span class="hljs-keyword">for</span> files matching pattern [/Users/jaryoung/project/study/maven/oa-parent/oa-org/target/classes/mapper/*.xml]<br>2021-02-28 17:20:02,090 [main] DEBUG [org.springframework.core.io.support.PathMatchingResourcePatternResolver] - Resolved location pattern [classpath:mapper/*.xml] to resources [file [/Users/jaryoung/project/study/maven/oa-parent/oa-org/target/classes/mapper/EmployeeDao.xml]]<br>2021-02-28 17:20:02,094 [main] DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] - Invoking afterPropertiesSet() on bean with name <span class="hljs-string">&#x27;sqlSessionFactory&#x27;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
